
(* This generated code requires the following version of MenhirLib: *)

let () =
  MenhirLib.StaticVersion.require_20231231

module MenhirBasics = struct
  
  exception Error
  
  let _eRR =
    fun _s ->
      raise Error
  
  type token = 
    | XOR
    | WITH
    | WHERE
    | VAR
    | USE
    | UNDO
    | UNDERSCORE
    | UFORALL
    | UEXISTS
    | TYPE
    | TRY
    | TRUE
    | TRANS
    | TIMESTAMP
    | TIME
    | TILDE
    | TICK
    | THEOREM
    | THEN
    | TACTIC
    | SYSTEM
    | SUCHTHAT
    | STAR
    | SPLITSEQ
    | SMT
    | SLASHSLASHEQUAL
    | SLASHSLASH
    | SLASHEQUAL
    | SLASH
    | SIMPL
    | SIGNATURE
    | SHARP
    | SET
    | SEQ
    | SENC
    | SEMICOLON
    | SEARCH
    | RPAREN
    | RND
    | RIGHTINFIXSYMB of (
# 20 "src/frontend/parser.mly"
       (string)
# 59 "src/frontend/parser.ml"
  )
    | REWRITE
    | REVERT
    | RETURN
    | RESET
    | REPEAT
    | RENAME
    | REMEMBER
    | REDUCE
    | RBRACKET
    | RBRACE
    | RARROW
    | RANGLE
    | QUOTE
    | QUANTIF
    | QMARK
    | QED
    | PROOF
    | PROF
    | PROCESS
    | PRINT
    | PREDICATE
    | PLUS
    | PERCENT
    | PATH of (
# 18 "src/frontend/parser.mly"
       (string)
# 87 "src/frontend/parser.ml"
  )
    | PARALLEL
    | OUT
    | ORACLE
    | OR
    | OP
    | NULL
    | NOT
    | NOSIMPL
    | NEW
    | NEQ
    | NAME
    | MUTABLE
    | MINUS
    | MESSAGE
    | MEMSEQ
    | LPAREN
    | LOCALIZE
    | LOCAL
    | LLET
    | LET
    | LEQ
    | LEMMA
    | LEFTINFIXSYMB of (
# 19 "src/frontend/parser.mly"
       (string)
# 114 "src/frontend/parser.ml"
  )
    | LBRACKET
    | LBRACE
    | LANGLE
    | INTRO
    | INT of (
# 16 "src/frontend/parser.mly"
       (int)
# 123 "src/frontend/parser.ml"
  )
    | INDUCTION
    | INDEX
    | INCLUDE
    | IN
    | IF
    | ID of (
# 17 "src/frontend/parser.mly"
       (string)
# 133 "src/frontend/parser.ml"
  )
    | HINT
    | HELP
    | HAVE
    | HASH
    | GPRF
    | GOR
    | GLOBAL
    | GEQ
    | GENERALIZE
    | GDH
    | GCCA
    | GAND
    | GAME
    | FUN
    | FRESH
    | FORALL
    | FIND
    | FALSE
    | FA
    | EXN
    | EXISTS
    | EQUIV
    | EQ
    | EOF
    | ELSE
    | DOT
    | DOLLAR
    | DIFF
    | DESTRUCT
    | DEQUIVARROW
    | DEPENDS
    | DEPENDENT
    | DDH
    | DARROW
    | CYCLE
    | CS
    | CRYPTO
    | CONSTSEQ
    | COMMA
    | COLONEQ
    | COLON
    | CLEAR
    | CHECKFAIL
    | CHANNEL
    | CDH
    | CASE
    | BY
    | BOOLEAN
    | BOOL
    | BANGU
    | BANG of (
# 21 "src/frontend/parser.mly"
       (string)
# 188 "src/frontend/parser.ml"
  )
    | AXIOM
    | AUTO
    | ATSLASH
    | AT
    | ASSERT
    | AS
    | ARROW
    | APPLY
    | AND
    | AENC
    | ACTION
    | ABSTRACT
    | ABORT
  
end

include MenhirBasics

# 1 "src/frontend/parser.mly"
  
  open Squirrelcore
  module T  = Tactics
  module SE = SystemExpr

  module L = Location

  let sloc startpos endpos s =
    let loc = L.make startpos endpos in
    L.mk_loc loc s

  let mk_abstract loc s args =
    Tactics.Abstract (L.mk_loc loc s, args)

# 223 "src/frontend/parser.ml"

module Tables = struct
  
  include MenhirBasics
  
  let token2terminal : token -> int =
    fun _tok ->
      match _tok with
      | ABORT ->
          162
      | ABSTRACT ->
          161
      | ACTION ->
          160
      | AENC ->
          159
      | AND ->
          158
      | APPLY ->
          157
      | ARROW ->
          156
      | AS ->
          155
      | ASSERT ->
          154
      | AT ->
          153
      | ATSLASH ->
          152
      | AUTO ->
          151
      | AXIOM ->
          150
      | BANG _ ->
          149
      | BANGU ->
          148
      | BOOL ->
          147
      | BOOLEAN ->
          146
      | BY ->
          145
      | CASE ->
          144
      | CDH ->
          143
      | CHANNEL ->
          142
      | CHECKFAIL ->
          141
      | CLEAR ->
          140
      | COLON ->
          139
      | COLONEQ ->
          138
      | COMMA ->
          137
      | CONSTSEQ ->
          136
      | CRYPTO ->
          135
      | CS ->
          134
      | CYCLE ->
          133
      | DARROW ->
          132
      | DDH ->
          131
      | DEPENDENT ->
          130
      | DEPENDS ->
          129
      | DEQUIVARROW ->
          128
      | DESTRUCT ->
          127
      | DIFF ->
          126
      | DOLLAR ->
          125
      | DOT ->
          124
      | ELSE ->
          123
      | EOF ->
          122
      | EQ ->
          121
      | EQUIV ->
          120
      | EXISTS ->
          119
      | EXN ->
          118
      | FA ->
          117
      | FALSE ->
          116
      | FIND ->
          115
      | FORALL ->
          114
      | FRESH ->
          113
      | FUN ->
          112
      | GAME ->
          111
      | GAND ->
          110
      | GCCA ->
          109
      | GDH ->
          108
      | GENERALIZE ->
          107
      | GEQ ->
          106
      | GLOBAL ->
          105
      | GOR ->
          104
      | GPRF ->
          103
      | HASH ->
          102
      | HAVE ->
          101
      | HELP ->
          100
      | HINT ->
          99
      | ID _ ->
          98
      | IF ->
          97
      | IN ->
          96
      | INCLUDE ->
          95
      | INDEX ->
          94
      | INDUCTION ->
          93
      | INT _ ->
          92
      | INTRO ->
          91
      | LANGLE ->
          90
      | LBRACE ->
          89
      | LBRACKET ->
          88
      | LEFTINFIXSYMB _ ->
          87
      | LEMMA ->
          86
      | LEQ ->
          85
      | LET ->
          84
      | LLET ->
          83
      | LOCAL ->
          82
      | LOCALIZE ->
          81
      | LPAREN ->
          80
      | MEMSEQ ->
          79
      | MESSAGE ->
          78
      | MINUS ->
          77
      | MUTABLE ->
          76
      | NAME ->
          75
      | NEQ ->
          74
      | NEW ->
          73
      | NOSIMPL ->
          72
      | NOT ->
          71
      | NULL ->
          70
      | OP ->
          69
      | OR ->
          68
      | ORACLE ->
          67
      | OUT ->
          66
      | PARALLEL ->
          65
      | PATH _ ->
          64
      | PERCENT ->
          63
      | PLUS ->
          62
      | PREDICATE ->
          61
      | PRINT ->
          60
      | PROCESS ->
          59
      | PROF ->
          58
      | PROOF ->
          57
      | QED ->
          56
      | QMARK ->
          55
      | QUANTIF ->
          54
      | QUOTE ->
          53
      | RANGLE ->
          52
      | RARROW ->
          51
      | RBRACE ->
          50
      | RBRACKET ->
          49
      | REDUCE ->
          48
      | REMEMBER ->
          47
      | RENAME ->
          46
      | REPEAT ->
          45
      | RESET ->
          44
      | RETURN ->
          43
      | REVERT ->
          42
      | REWRITE ->
          41
      | RIGHTINFIXSYMB _ ->
          40
      | RND ->
          39
      | RPAREN ->
          38
      | SEARCH ->
          37
      | SEMICOLON ->
          36
      | SENC ->
          35
      | SEQ ->
          34
      | SET ->
          33
      | SHARP ->
          32
      | SIGNATURE ->
          31
      | SIMPL ->
          30
      | SLASH ->
          29
      | SLASHEQUAL ->
          28
      | SLASHSLASH ->
          27
      | SLASHSLASHEQUAL ->
          26
      | SMT ->
          25
      | SPLITSEQ ->
          24
      | STAR ->
          23
      | SUCHTHAT ->
          22
      | SYSTEM ->
          21
      | TACTIC ->
          20
      | THEN ->
          19
      | THEOREM ->
          18
      | TICK ->
          17
      | TILDE ->
          16
      | TIME ->
          15
      | TIMESTAMP ->
          14
      | TRANS ->
          13
      | TRUE ->
          12
      | TRY ->
          11
      | TYPE ->
          10
      | UEXISTS ->
          9
      | UFORALL ->
          8
      | UNDERSCORE ->
          7
      | UNDO ->
          6
      | USE ->
          5
      | VAR ->
          4
      | WHERE ->
          3
      | WITH ->
          2
      | XOR ->
          1
  
  and error_terminal =
    0
  
  and token2value : token -> Obj.t =
    fun _tok ->
      match _tok with
      | ABORT ->
          Obj.repr ()
      | ABSTRACT ->
          Obj.repr ()
      | ACTION ->
          Obj.repr ()
      | AENC ->
          Obj.repr ()
      | AND ->
          Obj.repr ()
      | APPLY ->
          Obj.repr ()
      | ARROW ->
          Obj.repr ()
      | AS ->
          Obj.repr ()
      | ASSERT ->
          Obj.repr ()
      | AT ->
          Obj.repr ()
      | ATSLASH ->
          Obj.repr ()
      | AUTO ->
          Obj.repr ()
      | AXIOM ->
          Obj.repr ()
      | BANG _v ->
          Obj.repr _v
      | BANGU ->
          Obj.repr ()
      | BOOL ->
          Obj.repr ()
      | BOOLEAN ->
          Obj.repr ()
      | BY ->
          Obj.repr ()
      | CASE ->
          Obj.repr ()
      | CDH ->
          Obj.repr ()
      | CHANNEL ->
          Obj.repr ()
      | CHECKFAIL ->
          Obj.repr ()
      | CLEAR ->
          Obj.repr ()
      | COLON ->
          Obj.repr ()
      | COLONEQ ->
          Obj.repr ()
      | COMMA ->
          Obj.repr ()
      | CONSTSEQ ->
          Obj.repr ()
      | CRYPTO ->
          Obj.repr ()
      | CS ->
          Obj.repr ()
      | CYCLE ->
          Obj.repr ()
      | DARROW ->
          Obj.repr ()
      | DDH ->
          Obj.repr ()
      | DEPENDENT ->
          Obj.repr ()
      | DEPENDS ->
          Obj.repr ()
      | DEQUIVARROW ->
          Obj.repr ()
      | DESTRUCT ->
          Obj.repr ()
      | DIFF ->
          Obj.repr ()
      | DOLLAR ->
          Obj.repr ()
      | DOT ->
          Obj.repr ()
      | ELSE ->
          Obj.repr ()
      | EOF ->
          Obj.repr ()
      | EQ ->
          Obj.repr ()
      | EQUIV ->
          Obj.repr ()
      | EXISTS ->
          Obj.repr ()
      | EXN ->
          Obj.repr ()
      | FA ->
          Obj.repr ()
      | FALSE ->
          Obj.repr ()
      | FIND ->
          Obj.repr ()
      | FORALL ->
          Obj.repr ()
      | FRESH ->
          Obj.repr ()
      | FUN ->
          Obj.repr ()
      | GAME ->
          Obj.repr ()
      | GAND ->
          Obj.repr ()
      | GCCA ->
          Obj.repr ()
      | GDH ->
          Obj.repr ()
      | GENERALIZE ->
          Obj.repr ()
      | GEQ ->
          Obj.repr ()
      | GLOBAL ->
          Obj.repr ()
      | GOR ->
          Obj.repr ()
      | GPRF ->
          Obj.repr ()
      | HASH ->
          Obj.repr ()
      | HAVE ->
          Obj.repr ()
      | HELP ->
          Obj.repr ()
      | HINT ->
          Obj.repr ()
      | ID _v ->
          Obj.repr _v
      | IF ->
          Obj.repr ()
      | IN ->
          Obj.repr ()
      | INCLUDE ->
          Obj.repr ()
      | INDEX ->
          Obj.repr ()
      | INDUCTION ->
          Obj.repr ()
      | INT _v ->
          Obj.repr _v
      | INTRO ->
          Obj.repr ()
      | LANGLE ->
          Obj.repr ()
      | LBRACE ->
          Obj.repr ()
      | LBRACKET ->
          Obj.repr ()
      | LEFTINFIXSYMB _v ->
          Obj.repr _v
      | LEMMA ->
          Obj.repr ()
      | LEQ ->
          Obj.repr ()
      | LET ->
          Obj.repr ()
      | LLET ->
          Obj.repr ()
      | LOCAL ->
          Obj.repr ()
      | LOCALIZE ->
          Obj.repr ()
      | LPAREN ->
          Obj.repr ()
      | MEMSEQ ->
          Obj.repr ()
      | MESSAGE ->
          Obj.repr ()
      | MINUS ->
          Obj.repr ()
      | MUTABLE ->
          Obj.repr ()
      | NAME ->
          Obj.repr ()
      | NEQ ->
          Obj.repr ()
      | NEW ->
          Obj.repr ()
      | NOSIMPL ->
          Obj.repr ()
      | NOT ->
          Obj.repr ()
      | NULL ->
          Obj.repr ()
      | OP ->
          Obj.repr ()
      | OR ->
          Obj.repr ()
      | ORACLE ->
          Obj.repr ()
      | OUT ->
          Obj.repr ()
      | PARALLEL ->
          Obj.repr ()
      | PATH _v ->
          Obj.repr _v
      | PERCENT ->
          Obj.repr ()
      | PLUS ->
          Obj.repr ()
      | PREDICATE ->
          Obj.repr ()
      | PRINT ->
          Obj.repr ()
      | PROCESS ->
          Obj.repr ()
      | PROF ->
          Obj.repr ()
      | PROOF ->
          Obj.repr ()
      | QED ->
          Obj.repr ()
      | QMARK ->
          Obj.repr ()
      | QUANTIF ->
          Obj.repr ()
      | QUOTE ->
          Obj.repr ()
      | RANGLE ->
          Obj.repr ()
      | RARROW ->
          Obj.repr ()
      | RBRACE ->
          Obj.repr ()
      | RBRACKET ->
          Obj.repr ()
      | REDUCE ->
          Obj.repr ()
      | REMEMBER ->
          Obj.repr ()
      | RENAME ->
          Obj.repr ()
      | REPEAT ->
          Obj.repr ()
      | RESET ->
          Obj.repr ()
      | RETURN ->
          Obj.repr ()
      | REVERT ->
          Obj.repr ()
      | REWRITE ->
          Obj.repr ()
      | RIGHTINFIXSYMB _v ->
          Obj.repr _v
      | RND ->
          Obj.repr ()
      | RPAREN ->
          Obj.repr ()
      | SEARCH ->
          Obj.repr ()
      | SEMICOLON ->
          Obj.repr ()
      | SENC ->
          Obj.repr ()
      | SEQ ->
          Obj.repr ()
      | SET ->
          Obj.repr ()
      | SHARP ->
          Obj.repr ()
      | SIGNATURE ->
          Obj.repr ()
      | SIMPL ->
          Obj.repr ()
      | SLASH ->
          Obj.repr ()
      | SLASHEQUAL ->
          Obj.repr ()
      | SLASHSLASH ->
          Obj.repr ()
      | SLASHSLASHEQUAL ->
          Obj.repr ()
      | SMT ->
          Obj.repr ()
      | SPLITSEQ ->
          Obj.repr ()
      | STAR ->
          Obj.repr ()
      | SUCHTHAT ->
          Obj.repr ()
      | SYSTEM ->
          Obj.repr ()
      | TACTIC ->
          Obj.repr ()
      | THEN ->
          Obj.repr ()
      | THEOREM ->
          Obj.repr ()
      | TICK ->
          Obj.repr ()
      | TILDE ->
          Obj.repr ()
      | TIME ->
          Obj.repr ()
      | TIMESTAMP ->
          Obj.repr ()
      | TRANS ->
          Obj.repr ()
      | TRUE ->
          Obj.repr ()
      | TRY ->
          Obj.repr ()
      | TYPE ->
          Obj.repr ()
      | UEXISTS ->
          Obj.repr ()
      | UFORALL ->
          Obj.repr ()
      | UNDERSCORE ->
          Obj.repr ()
      | UNDO ->
          Obj.repr ()
      | USE ->
          Obj.repr ()
      | VAR ->
          Obj.repr ()
      | WHERE ->
          Obj.repr ()
      | WITH ->
          Obj.repr ()
      | XOR ->
          Obj.repr ()
  
  and default_reduction =
    (16, "\000\000\000\000\000\214\000\000\000\000\000\170\000'\000\000\000(\000\000\000\000\001Y\000G\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\190\001\195\000\000\000\000\001\178\000\000\000\000\000\000\000\000\000\000\000\000\001f\001\179\001g\000\000\000\000\001c\000\000\000\000\001\206\001\200\000\000\002Q\001\198\000\000\001\199\001\201\001\202\001\203\000\000\001\205\000\000\000\000\002J\000\000\000\000\000\000\000\000\001\197\000\000\000\000\001w\001\204\002O\000\000\000\000\001S\000\000\000\000\000\000\002T\002P\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\137\001\136\000\000\000\000\000j\000\186\000k\000i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001i\000\000\000\000\000\000\000\000\001U\000\000\000\000\000\000\001{\001z\000\000\000\180\000\"\000#\000!\000\000\000\000\001\194\000\000\000\000\000\000\000\000\000\000\002\031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\188\000\000\001\169\001\189\002\"\000\000\0021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\191\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\249\000\000\000\000\001o\000\000\001\196\001\193\000\000\001\192\000\000\000\000\001\"\000\000\001$\001\183\001#\001&\000\000\001\157\000\000\001\185\000\000\001\184\001\182\000\000\000\000\000\000\000\000\000\000\001m\001(\000\000\000\000\000\235\0013\000\236\000\000\000\026\000\237\0012\000\000\000\000\000\000\000\000\001u\001\177\001\175\001\176\000\178\000\000\000\025\000\000\001\167\000\208\000\000\000\024\000\029\002\006\000\245\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\210\000\000\000\000\001\215\000\000\000\000\001\213\000\000\001\209\000\139\000\000\000\000\001q\000\000\000\000\000\000\002\b\001\207\002G\002H\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\003\002\016\000\000\000\198\001\232\000\000\001\151\000\000\000\000\000\159\000\000\000\000\000\000\000\172\000\000\000b\000\232\000\000\000\000\001a\000b\000\233\000\231\000\234\000\000\002\011\000\000\001E\001C\001D\001>\000\000\000\000\000\000\0016\000\000\0019\002\014\000\000\001:\001=\0017\0015\000\000\000\000\000\000\001B\000\000\000\000\000\226\000\000\000\225\000\000\000\221\000\000\000\223\000\000\000\217\000\000\000\218\000\000\000\224\000\000\000\219\000\000\000\220\000\000\000\216\000\000\000\228\000\000\000\227\000\000\000\222\001A\000\215\001@\001;\0014\000\000\000\000\000\136\000\000\000\000\001k\001\180\001\181\000\135\002\r\000\000\001\159\000\000\001<\000\000\001\252\000\000\001\147\000\000\000\000\000\000\000\000\001\245\000\000\002\012\000\000\000\000\000\000\002\018\000\000\000\000\000\000\000\000\001\242\000\000\000\154\000\155\000\000\000\000\000\000\000\153\000\000\000\000\0006\000\156\000\158\000\152\000\000\000\000\000h\000g\000f\001\238\000\000\001\145\000\157\000\151\000\000\002\027\000\000\001\255\000\000\000\000\002\030\000\000\000\202\000\000\000\000\000\131\000\000\001\161\001F\001G\000\000\000\000\002\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001W\000\000\000\000\000\000\001\127\001~\000\182\000$\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000x\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000w\000\000\000\000\000\000\000y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\211\000\000\001\171\000\212\000\000\001H\000\000\000\021\000\000\000\000\000\020\000\000\000\000\000\016\000\000\000\000\000\018\000\000\000\000\000\012\000\000\000\000\000\r\000\000\000\000\000\019\000\000\000\000\000\014\000\000\000\000\000\015\000\000\000\000\000\011\000\000\000\000\000\023\000\000\000\000\000\022\000\000\000\000\000\017\000\000\000\000\000\210\000\n\000\000\000\129\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\000\001\153\001\254\000\247\000\000\001\253\000\000\000\000\000\000\002\021\000\000\000\000\000n\000m\002\tn\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\002\015\000\000\000\000\000\000\001P\001Q\000\000\000\000\000\000\000\000\000\000\000\000\001\229\000\000\001sd`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000t\000\192\000u\000\000\000\000\000\000\000\000\000\000\000\000\000r\000\190\000s\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\t\000\000\000\000\000\188\000\000\000\000\000\000\000p\000q\000\000\000\000\000\000\000\243\001\011\000\255\001\b\000\000\001\139\000\000\001\141\000\000\001\143\000\200\000\000\000o\000\000\001\155\001\n\000^\000\000\000L\000_\000\000\000O\000\000\000\000\000\000\000\000\000\000\000\000\000>\000\000\000\000\000\000\000F\000\000\000\000\000\000\000\000\000\000\000arb\0001\000\000\002\025\002?\002@\000\000\000/\000\000\0000\000\000\002E\000\t\002F")
  
  and error =
    (163, "\000 \012\001\016\000\000\020\004\024 \000\002I\000\000\016\003\002\001\192\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\006\000\136\000\000\n\002\012\016@\001$\128\004\b\001\129\000\224\000\000\000\000\000\004\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000 \168\006\016\003,\000\000\004\014\000\161 \194(\011\188n\t \000\000\000\000\000\000\000\001\000\000\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000@\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\b\000\002\000\000\000\000\000\000\000\000\002\016\000\000T\000\128\006\130\001\000\001@\000\020\020\016\000\000\000\000B\000\000\b\000\000\000@@ \000\bbbbb\018\000\000\000\000\000\000\000\020\000\017\000\000\000\000\000\001\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\001\192#@\004\002\128\131\004\016\004I \t\003\b`A8\000\128<\004h\000\128P\016`\130\000\137$\001 a\012\b'\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016$\000\000\000\000\000\000\000(\000\"\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\003\192F\128\b\005\001\006\b \b\146@\018\006\016\192\130p\b\018\000\000\000\000\000\000\000\020\000\017\000\000\000\000\000\001\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\004 \000\000\000\016\000\000\000\000\000\000\000\000\bb\130\006\000\011\144 \000\000\000\000\002\016\000\000@\000\000\000\002\001\000\000@\000\016\004\000\000\000\000\000B\000\000\b\000\000\000\000@\"\b\024\000.@\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\016\000\000\000 H\000\000\000\000\000\000\000P\000D\000\000\000\000\000\006\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\001\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\016\128\000\002\000\000\000\000\016\b\130\006\000\011\144 \000\000\000\000\002\016\000\000@\000\000\000\002\001\016@\192\001r\004\000\000\000\000\000B\000\000\b\000\000\000\000@\"\b\024\000.@\128\000\000\000\000\bb\000\000\000\002\020\000\000\000\br\004\000\000\000\000\000@\000\000\000\000\000\000\000\000 \000\b\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\001\b\000\000 \000\000\000\001\000\136 `\000\185\002\000\000\000\000\000 \000@\000\000\000\000\000\000\016\000\004\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000(\000\000\000\016\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\b\018\000\000\000\000\000\000\000\020\000\017\000\000\000\000\000\001\128\000\000 \014\001\018\000 \020\004\024 \000\002I\000H\016C\002\t\192 \000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\224\017\000\002\001@A\138\000\002$\144\004\129\0050 \028\002@\028\002 \000@(\bb\000\000\000\000@\"\b\024\000.@\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\128\000 \000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\004 \000\000\128\000\000\000\004\002 \129\128\002\228\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\016\128\000\002\000\000\000\000\016\b\130\006\000\011\144 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000  \002\000\002\b\001H\000\b\000\016\"\016\000\016\128\b@\000\001\000\000\000\000\b\004A\003\000\005\200\016\000\000\000\000@ \028\001\154\128h\022L8% \130i\002x\152SBS\192!\000\000\004\000\000\000\000 \017\004\012\000\023 @\000\000\000\001\000\128p\006j\001\160Y0\224\148\130\t\164\t\226aM\bO \148\014\000\221@4\011&\156R\144Q4\133=L)\161)\224\016\128\000\002\000\000\000\000\016\b\000\002\000\000\128 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016J\007\000n\160\026\005\147N)H(\154B\158\166\020\208\148\240\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\128\000\002\000\000\000\000\016\b\130\006\000\011\144 \000\000\000\000\128@8\0035\000\208,\152pJA\004\210\004\2410\166\132\167\128B\000\000\b\000\000\000\000@\"\b\024\000.@\128\000\000\000\002\001\000\224\012\212\003@\178a\193)\004\019H\019\196\194\154\018\158\001\b\000\000 \000\000\000\001\000\136 `\000\185\002\000\000\000\000\b\004\003\1283P\012\002\201\131\004 \016I G\019\nhJx\004 \000\000\128\000\000\000\004\002 \129\128\002\228\b\000\000\000\000 \016\014\000\205@4\011&\028\018\144A4\129<L)\161)\224\016\128\000\002\000\000\000\000\016\b\130\006\000\011\144 \000\000\000\000\128@8\0035\000\192,\1520B\001\004\146\004q0\166\132\167\128B\000\000\b\000\000\000\000@\"\b\024\000.@\128\000\000\000\002\001\000\224\012\212\003\000\178`\193\b\004\018H\017\196\194\154\018\158\001\b\000\000 \000\000\000\001\000\136 `\000\185\002\000\000\000\000\b\004\003\1283P\012\002\201\131\004 \016I G\019\nhJx\004 \000\000\128\000\000\000\004\002 \129\128\002\228\b\000\000\000\000 \016\014\000\205@0\011&\012\016\128A$\129\028L)\161)\224\016\128\000\002\000\000\000\000\016\b\130\006\000\011\144 \000\000\000\000\128@8\0035\000\192,\1520B\001\004\146\004q0\166\132\167\128B\000\000\b\000\000\000\000@\"\b\024\000.@\128\000\000\000\002\001\000\224\012\212\003@\178a\193)\004\019H\019\196\194\154\018\158\001\b\000\000 \000\000\000\001\000\136 `\000\185\002\000\000\000\000\b\004\003\1283P\r\002\201\135\004\164\016M O\019\nhJx\004 \000\000\128\000\000\000\004\002 \129\128\002\228\b\000\000\000\000 \016\014\000\205@4\011&\028\018\144A4\129<L)\161)\224\016\128\000\002\000\000\000\000\016\b\130\006\000\011\144 \000\000\000\000\128\000\000\001\005\000\016\000\016@\n@\000@\000\129\016\000\000\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\001\000\224\012\212\003@\178a\193)\004\019H\019\196\194\154\018\158@\000\000\000\128\128\b\000\b \005 \128 \000@\136\000\000B\000!\000\000\004\000\000\000\000 \017\004\012\000\023 @\000\000\000\001\000\128p\006j\001\160Y0\224\148\130\t\164\t\226aM\tO\000\132\000\000\016\000\000\000\000\128D\0160\000\\\129\000\000\000\000\004\002\001\192\025\168\006\129d\195\130R\b&\144'\137\1334%<\128@8\0035\000\208,\152pJA\004\210\004\2410\166\132\167\144\b\007\000f\160\026\005\147\014\tH \154@\158&\020\208\148\242\000\000\128\004\004\000@\000A\000)\000\001\000\002\004@\000\002\016\001\b\000\000 \000\000\000\001\000\136 `\000\185\002\000\000\000\000\b\004\003\1283P\r\002\201\135\004\164\016M O\019\nhJx\004 \000\000\128\000\000\000\004\002 \129\128\002\228\b\000\000\000\000 \016\014\000\205@4\011&\028\018\144A4\129<L)\161)\228\000\000\000\b\b\000\128\000\130\000R\000\002\000\004\b\132\000\004 \002\016\000\000@\000\000\000\002\001\016@\192\001r\004\000\000\000\000\016\000\000\000  \002\000\002\b\001H\000\b\000\016\"\000\000\016\130\t@\224\r\212\003@\178i\197h\007\019M\219\212\194\154\018\158@\000\000\000\128\128\b\000\b \005 \128 \000@\136\000\000B\000!\000\000\004\000\000\000\000 \017\004\012\000\023 @\000\000\000\001\000\128p\006j\001\160Y0\224\148\130\t\164\t\226aM\tO\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\b(\000\128\000\130\000R\000\002\000\004\b\132\000\004 \002\016\000\000@\000\000\000\002\001\016@\192\001r\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\002\n\000 \000 \128\020\128\000\128\001\002 \000\001\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\000\nb\000\016\128\000\002\000\000\000\000\016\b\130\006\000\011\144 \000\000\000\000\128\000\000\001\021\000\144\004\144@\n@\000@\004\145\016\128\128\164\000\000\000\000\002\128\016\000\144\000\000\000\000\000\000\130\002\016\000\004\000\b@\000\001\000\000\000\000\b\004A\003\000\005\200\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000(\001\000\t\000\000\000\000\000\000\b  \000\000@\000\128\000\000\000\000\b\128\000\000\000@\016\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\002\136\000\000\000\004\001\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000(\128 \000\000@\016\000\000\000\000\000\000\004\000\016\000\000\000\000\005\016\000\000\000\b\002\000\000\000\000\000\000\000\128\000\000\000\000\000\000\128\000\128\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\004@\000\000\000 \bb\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\005@0\128\025`\000\000 p\005\t\006\017@]\227pI\000\000\000\000\000P\002\000\018\000\000\004@\000\000\016@@\000\000\000\000\000\000\000@\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\b\000\000\000\000\000\000\000\000\000\000\bt\000\000\000\000\000\000\b !\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000B\000\000\b\000\000\000\000@\"\b\024\000.@\128\000\000\000\002\000\000\000\004T\002@\018A\000)\000\001\000\018DB\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000AP\012 \006X\000\000\b\028\001BA\132P\023x\220\018@\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\001\b\000\000 \000\000\000\001\000\136 `\000\185\002\000\000\000\000\b\000\000\000\016P\001\000\001\004\000\164\000\004\000\b\017\000\000\b@\004 \000\000\168\001\000\t\004\002\000\000\128\000(( \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\020\000\128\004\128\000\000\000\000\000\004\016\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\b\128\000*\000@\003A\000\136(`\000\187\n\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\017\000\000T\000\128\006\130\001\016P\192\001v\020\016 \000\000\000\000\000\000\000\000\000\000\000\000\000 \b\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bx\000\000\002\002\000\tbb\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\b\000\004\000\001\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\002\000 \000 \128\020\128\000\128\001\002 \000\000\bt\000\000\000\002\000\000\b  \000\000\000\000\000\000\128\000\000\000\000\000\000\000\004\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\128\004\128\000\000\000\000\000\004\016\016\128\000\000\000\000\000\000\000\000\000\000\000\000\000\002\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\195\209\160\004\017tA\202\b\138$\144 \129\1280\160\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000(\001\128\t\000\000\000\000\128\000\b  \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000AP\012 \006X\000\000\b\028\001BA\132P\023x\220\018@\002\016\000\000@\000\000\000\002\001\016@\192\001r\004\000\000\000\000\016\000\000\000  \002\000\002\b\001H\000\b\000\016\"\000\000\020\128\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\001@\b\000H\000\000\000\000\000\000A\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\n\128a\0002\192\000\000@\224\n\018\012\"\128\187\198\224\146\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \168\006\016\003,\000\000\004\014\000\161 \194(\011\188n\t \000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\004\000\000\000\000\000\004\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\019\128\000\001\144\000\000@\012\002\000\000\000\000\000\000\b\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\001\192\000\002\136\000\000\000\004\001\000\000\000\000\000\000\000@\000\000\128\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\000\t\192P\002\200\018\000 \006\001\000\000\016@@\000\004@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\021\000 \001 \128D\0200\000]\133\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\001\021\000\144\004\144@\n@\000@\004\145\016\128\128\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000P\002\000\018\000\000\000\000\000\000\016@B\002\000\000\001\b\000\000*\000@\002A\000\136(`\000\187\n\b\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\224\000\000D\000\000\000\002\000\128\000\000\000\000\128\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\001\016\000\000\000\b\002\000\000\000\000\000\000\000\128\000\000\000p\000\000\000\000\000\000\000\000\000\000\000\000\000`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\001\192\000\000\136\000\000\000\004\001\000\000\000\000\001\128\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\016\000\b\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\000\014D\000\001\000\000\000\000\bnb\000\000\000\003\002\000\000\000\000\000\000\000\002B\000\000\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\016\128\000\002\000\000\000\000\016\b\130\006\000\011\144 \000\000\000\000\128\000\000\001\005\000\016\000\016@\n@\000@\000\145\016\128\000\132\000B\000\000\b\000\000\000\000@\"\bb\000\000\000\000@\"\b\024\000.@\128\000\000\000\002\000\000\000\004\004\000@\000A\000)\004\001\000\002\004@\000\002\016\000\192\128\000\000\000\000\000\000\000\144\128\000\000\000\132\000\000\000\000\000!\000\000\004\000\000\000\000 \017\004\012\000\023 @\000\000\000\001\000\000\000\002\002\001 \000 \128\020\128\000\128\001\002 \000\001\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\002\016\000\000@\000\000\000\002\001\016@\192\001r\004\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000!\000\000\004\000\000\000\000 \016\000\004\000\001\000@\000\000\000\001\000\000\000\000\002\000 \000 \128\020\128\000\128\001\002 \000\000\b\000\132\000\000\016\000\000\000\000\128@ \016\000\004\001\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\bb@\000\001\000\000\000\000\b\004\002\001\000\000@\016\000\000\000\000\001\b\000\000 \000\000\000\001\000\128\000 \000\b\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004 \000\000\128\000\000\000\004\002\001\000\128\000 \b\000\000\000\000\000\132\000\000\016\000\000\000\000\128@\000\016\000\004\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\016\000\000@\000\000\000\002\001\000\128@\000\016\004\000\000\000\000\000B\000\000\b\000\000\000\000@ \000\b\000\002\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\b\000\000 \000\000\000\001\000\128@ \000\b\002\000\000\000\000\000!\000\000\004\000\000\000\000 \016\000\004\000\001\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\016\000\000\000\000\128@ \016\000\004\001\000\000\000\000\000\016\128\000\002\000\000\000\000\016\b\000\002\000\000\128 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B\000\000\b\000\000\000\000@ \016\b\000\002\000\128\000\000\000\000\b@\000\001\000\000\000\000\b\004\000\001\000\000@\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\000\000\004\000\000\000\000 \016\b\004\000\001\000@\000\000\000\000\004 \000\000\128\000\000\000\004\002\000\000\128\000 \b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\128\000\002\000\000\000\000\016\b\004\002\000\000\128 \000\000\000\000\002\016\000\000@\000\000\000\002\001\000\000@\000\016\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b@\000\001\000\000\000\000\b\004\002\001\000\000@\016\000\000\000\000\001\b\000\000 \000\000\000\001\000\128\000 \000\b\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004 \000\000\128\000\000\000\004\002\001\000\128\000 \b\000\000\000\000\000\132\000\000\016\000\000\000\000\128@\000\016\000\004\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\016\000\000@\000\000\000\002\001\000\128@\000\016\004\000\000\000\000\000B\000\000\b\000\000\000\000@ \000\b\000\002\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\b\000\000 \000\000\000\001\000\128@ \000\b\002\000\000\000\000\000!\000\000\004\000\000\000\000 \016\000\004\000\001\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \132\000\000\017@\004\000\004\144B\176\016\016\004!D\000\000\001\000\016\128\000\002 \000\000\000\016\b\000\002\000\000\128 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\1280\004h\001\000Y\016`\128\002\011,\b\160`\r\b'\000`@\000\000\000\000\000\000\000H@\000\000\000B\000\000\000\000\000\002\000\192\017\160\004\001dA\130\000\b,\176\"\129\1284 \156\001\129\000\000\000\000\000\000\000\001!\000\000\000\001\b\000\000\000\000\000\b\003\000F\128\016\005\145\006\b\000 \178\192\138\006\000\208\130p\006\004\000\000\000\000\000\000\000\004\132\000\000\000\004 \000\000\000\000\000 \012\001\026\000@\022D\024 \000\130\203\002(\024\003B\t\192\000\000\000\000@\000\000\000\000\000\000\000\016@\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000A\000\000\000\000\000\004\000\002\000\192\017\160\004\001dA\130\000\b,\176\"\129\1284 \156\000@\024\0024\000\128,\1360@\001\005\150\004P0\006\132\019\128r \000\b\000\000\000\000@&(\024\000.a\128\000\000\000\002\000\000\000\004T\002@\018A\000)\000\001\000\018D@\002\002\016\000\000\000\000\n\000@\002@\000\000\000\000\000\002\b\b\000@\000\000\130\160\024@\012\176\000\000\0168\002\132\131\b\160.\241\184$\128\004 \000\000\128\000\000\000\004\002\000\000\128\000 \b\128\000\000\000\000\132\000\000\016\000\000\000\000\128@\000\016\000\004\001\000\000\000\000\000\000\000\000\000\160\004\000$\000\000\000\000\000\000 \128\128\000\001\000\002\000\000\000\000\000\002\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000P\002\b\018\000\000\000\001\000\000\016@@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000 \001 \000\000\000\000\000\001\004\004\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\016\000\000@\000\000\000\002\001\016@\192\001r\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\b@\000\001\000\000\000\000\bn\128\016@\144@\"\n\024\000.\194\130\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\b\000\000 \000\000\000\001\000\136 `\000\185\002\000\000\000\000\b\000\000\000\017P\t\000I\004\000\164\000\004\000I\017\b\000\b@\000\000\000\000(\001\000\t\000\000\000\000\000\000\b  \000 \000\000\000\000\000\005\000 \001 \000\000\000\000\000\001\004\004 \000\000\000\016\128\000\002\000\000\016\000\016\b\130\134\000\011\144 \000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B\000\000\n\128\016\000\144@\"\n\024\000.\194\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\001@\b\000H\000\000\000\000\000\000A\001\000\000\002\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\128\000\002\160\004\000$\016\b\130\134\000\011\176\160\128\004\000\000\000\000\000\000\020\000\128\004\128\000\000\000\000\000\004\016\016\000\128\000\001\005@0\128\025`\000\000 p\005\t\006\017@]\227pI\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\001\b\000\000*\000@\002A\000\136(`\000\187\n\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\000\000\000\000@\"\b\024\000.@\128\000\000\000\002\000\000\000\004T\002@\018A\000)\004\001\000\018D@\000\002\016\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\160\004\000$\000\b\000\000\000\000 \128\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\b@\000\001\000\000\000\000\b\004A\003\000\005\200\016\000\000\000\000@\000\000\000\130\128\b\000\b \005 \000 \000@\136\016\000B\000 \000\000\000\000\000\000\000\000\016\000\004\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\132\000\000\016\000\000\000\000\128D\0160\000\\\129\000\000\000\000\004\000\000\000\b(\000\128\000\130\000R\000\002\000\004\b\128\000\004 \000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000(\001\000\t\000\002\000\000\000\000\b  \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\b@\000\001\000\000\000\000\b\004A\003\000\005\200\016\000\000\000\000@\000\000\000\130\128\b\000\b \005 \000 \000@\136\000\000B\000!\000\000\004\000\000\000\000 \016\000\004\000\001\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\004\000$\000\b\000\000\000\000 \128\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\021\000\194\000e\128\000\000\129\192\020$\024E\001w\141\193$\000!\000\000\004\000\000\000\000 \017\004\012\000\023 @\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\132\000\000\016\000\000\000\000\128D\0160\000\\\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\017\000\000@\000\000\000\002\001\016@\192\001r\004\000\000\000\000\000B\000\000\b\000\000\000\000@\"\b\024\000.@\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\021\000\194\000e\128\000\000\129\192\020$\024E\001w\141\193$\000\000\016\000\001@\b\000H\000\000\000\000\000\000A\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\016\000\000\000\000\128D\0160\000\\\129\000\000\000\000\000\000\000\000\000\160\004\000$\000\000\000\000\000\000 \128\128\004\001\000\000\000\000\000\020\000\128\004\128\000\000\000\000\000\004\016\016\000\128\000\001\005@0\128\025`\000\000 p\005\t\006\017@]\227pI\000\000\004\000\000\000\000\000\b\000\004\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\128\000 \000\000\000\000\000\000\000\000\000\000\000\001@\b\000H\000\000\000\016\000\000A\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\128\004\128\000\000\000\000\000\004\016\016\000\000\000\001\005@0\128\025`\000\000 p'\t\006\017@]\227pI\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\002\n\128a\0002\192\000\000@\224\n\018\012\"\128\187\198\224\146\000\000\000\000\000\128\004\000$\000\000\000\000\000\000\000\000\128\000\000\000\b*\001\132\000\203\000\000\001\003\128(H0\138\002\239\027\130H\000\000\000\000\002\128\016\000\144\000\000\000\000\000\000\130\002\000\000\000\000\b@\000\001P\002\000\018\bb\000\000\000\000\000\000\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000(\001\000\t\000\000\000\000\000\000\b  \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000AP\012 \006X\000\000\b\028\001BA\132P\023x\220\018@\000\000\000\000\020\000\128\004\128\000\000\000\000\000\004\016\016\000\000\000\000\000\000\000\002\128\016\000\144\000\000\000\000\000\000\130\002\000\000\000\000\000\000\000\000@\000\000\016\000\000\000\000\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000(\001\000\t\000\000\000\000\000\000\b  \000\000\000\000\000\000\000\005\000 \001 \000\000\000\000\000\001\004\004\000\000\000\000\000\000\000\000\160\004\000$\000\000\000\000\b  \128\128\004\000\128\000\000\000\000\020\000\000\004\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001@\b\000H\000\000\000\000\000\000A\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\001\000\000\000\000\000\000\000\004\004\000\000\000\000\000\000\000\000\000\000\000\002$\b\140\014\000\001\000@\000\000@\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\001\b\000\000 \000\000\000\001\000\136 `\000\185\002\000\000\000\000\b\000\000\000\016P\001\000\001\004\000\164\000\004\000\b\017\000\000\b@\000\1280\004h\000\000Q\016`\128\000\t$\000\224@\012\b\007\000\000\000\000\000\000\000\000\017 D\000p\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\002\016\000\000@\000\000\000\002\001\016@\192\001r\004\000\000\000\000\016\000\000\000  \002\000\002\b\001H \bp \006\004\003\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b@\000\001\000\000\000\000\b\004A\003\000\005\200\016\000\000\000\000@\000\016\000\128\128\b\000\b \005 \000 \000@\136\000\000B\000\000\000\000\000\000\000\000\004H\017\000\028\000\002\000\128\000\000\128\000\000\1280\004H\000\000Q\016b\128\000\t$\001\240@\204\b\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\002$\b\128\014\000\001\000@\000\000@\000\000\000\004\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b@\000\001\000\000\000\000\b\004A\003\000\005\200\016\000\000\000\000@\000\000\000\128\128\b\000\b \005 \128 \000@\136\000\000B\000\000\000\000\000\000\000\000\004H\017\000\028\000\002\000\128\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\002$\b\128\014\000\001\000@\000\000@\000\000\000\000\000\000\000\000\000D\129\016\001\192\000 \b\000\000\bp F\004\003\128B\000\000\b\000\000\000\000@\"\b\024\000.@\128\000\000\000\002\001\000`\012\212\000@\162a\193)\000\019H\003\196\192\024\018\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\1280\004H\000\000Q\016`\128\000\t$\000\224@\012\b\007\000\000\000\000\000\000\000\000\017 D\000p\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017 D\000p\000\b\002\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\137\002!\003\128\000@\016\000\000\016\000\000\000\000\000\000\000\016\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\144\"\0008\000\004\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017 D\000p\000\b\002\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\003\000D\000\000\005\001\006(\000\000\146@\018\004\b\192\128p\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b@\000\000\000\000\000\000 \128\000\000\000\000\000\000\000\000\000\240\000\000\004\004\000\018\002 \128\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\b\000\000\000\000\000\000\000\t\b\000\000\000\b@\000\000\000\000\000@\024\002 \000\000(\b0@\000\005\150\000\016 \006\004\019\128@@\000\000\000\000\000\000\000 \000\b\000\000\000\000\016\000\000\000\b\000\000\000\000\000\000\000\000\004\000\001\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000!\000\000\004\000\000\000\000 \017\004\012\000\023 @\000\000\000\001\000\1280\006B\000 P0\224\148\128\t\164\001\"`\012\t\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\016\128\000\002\000\000\000\000\016\b\130\006\000\011\144 \000\000\000\000\128@\024\003!\000\016(\024pJ@\004\210\000\1450\006\004\135\128@\000\000\000\000\000\000\000\000 \000\b\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\001\b\000\000 \000\000\000\001\000\136 `\000\185\002\000\000\000\000\b\004\001\1282\016\001\002\129\135\004\164\000M \t\019\000`Hxb\016\003\002\001\192\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\004 \000\000\128\000\000\000\004\002 \129\128\002\228\b\000\000\000\000 \016\006\000\200@\004\n\006\028\018\144\0014\128$L\001\129!\224\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\b\018\000\000\000\000\000\000\000\020\000\017\000\000\000\000\000\001\128\000\000 \012\001\016\000\000\020\004\024 \000\"I\000\b\016\003\002\t\192\004\001\128\"\000\000\002\128\131\004\000\004I \001\002\000`@8\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\001\129\000`\bb\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\128\000 \000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\137\002 \003\128\000@\016\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000D\129\016\001\192\000 \b\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\000\000\000\000\000\000\000\000\000\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\016\000\000\000\000\000\016\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000`\bb\146@\018\004\000\192\128p\001\000`\b\128\000\000\160 \193\000\000\018H\002@\128\024\016\014\000\192\128\000\000\000\000\000\000\000\144\128\000\000\000\132\000\000\000\000\000\004\001\128\"\000\000\002\128\131\004\000\000Y`\001\002\000`b\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\016\128\000\002\000\000\000\000\016\b\130\006\000\011\144 \000\000\000\000\128@\024\003!\000\016(\024pJ@\004\210\000\1450\006\004\135\128\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\001\002@\000\000\000\000\000\000\002\128\002 \000\000\000\000\0000\000\000\004\001\128\"\000\000\002\128\131\004\000\000I \001\002\000`A8\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000@\000\016\000\000 \000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000B\000\000\b\000\000\000\000@\"\b\024\000.@\128\000\000\000\002\001\000`\012\132\000@\160a\193)\000\019H\002D\192\024\018\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000 \000\000\000\000\000\000\000\000\000\016\004\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\b\b\002\000\000\000\000\001\000\000\000\002\000\000\000\000\000\000\000\000\001\000\000@\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\b@\000\001\000\000\000\000\b\004A\003\000\005\200\016\000\000\000\000@ \012\001\144\128\b\020\0128% \002i\000H\152\003\002C\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\003\002\000\192\017\000\000\001@A\130\000\000$\144\000\129\0000 \028\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000B\000\000\b\000\000\000\000@\"\b\024\000.@\128\000\000\000\002\001\000`\012\132\000@\160a\193)\000\019H\002D\192\024\018\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\004\000\000\000\000\000\000\000\000\000\002\000\128\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\b\b\002\000\000\000\000\001\000\000\000\002\000\000\000\000\000\000\000\000\001\000\000@\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\006\004\000\000\000\000\000\000\000\004\132\000\000\000\004 \000\000\000\000\000 \012\001\016\000\000\020\004\024 \000\002\203\000\b\016\003\002\t\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\002\000\000\000\000@\bb\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\004 \000\000\128\000\000\000\004\002 \129\128\002\228\bb\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\016\000\000\000\002 @\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\016 \000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\002\004\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\016\128\000\002\000\000\000\000\016\b\130\006\000\011\144 \000\000\000\000\128\000\000\001\017\000\016\000\016@\n@\000@\000\129\016\000\000\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016 \000\000\000\000\000\000\000\000\000\000\000\000\000\000!\000\000\004\000\000\000\000 \017\004\012\000\023 @\000\000\000\001\000\000\000\002\"\000\160\000 \128\020\128\000\128\001\002 \000\001\bb\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bbb\003\000D\000\000\005\001\006\b\000\000\146@\002\004\000\192\128p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\b\018\000\000\000\000\000\000\000\020\000\017\000\000\000\000\000\001\128\000\000 \012\001\016\000\000\020\004\024 \000\002I\000\b\016\003\002\t\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000@\000\000\000\000\000\000\000\004\b\003\000D\000\000\005\001\006\b\000\000\146@\002\004\016\192\128p\000\000\000\000\000\000\000\000\000\004\000\001\000\000\000\000\000\000\000\000\016 \012\001\016\000\000\020\004\024 \000\002I\000\bb\011\000U\002\000\031\001\006\b\128F\146@(\004\000\192\128p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bbbb\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\b\000\000\128\000\000\000\000\000\000\000\000\000@\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000 \b\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\128\000 \000\000\b\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\004 \000\000\128\000\000\000\004\002 \129\128\002\228\bbbb@\000\001\000\000\000\000\b\004A\003\000\005\200\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\016\016\001\000\001\004\000\164\000\004\000\012\017\000\000\b@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000`n\128\225\002vb\000\000\000\000\000\000\000  \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\005@p\1289h\000\128!pU\t\006\017B]\227pI\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\021\001\194\000\229\160\002\000\133\193T$\024E\tw\141\193$\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024T\007\b\019\182\130\168\002\023\005P\176a\020\165\2227\004\144\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")
  
  and start =
    9
  
  and action =
    ((16, "B4\000g\000\000<\222\000\n\000\000\000\000\001,\000\000\002R\000g\000\000\000\000\000g\001P\003\132\000\004\002\180\003\144\000\004\000\004C\174\000\003\000\000\000\000\003\178\000\n\000\000\000g\004(\000\247\000\n\000\231\000\n\000\000\000\000\000\000\001R\000g\000\000\003n\006\170\000\000\000\000\000g\000\000\000\000\006\170\000\000\000\000\000\000\000\000\002\162\000\000\000\210\006\170\000\000.\172,\232\004j\006\170\000\000-\202\006\170\000\000\000\000\000\000\001\184\000\n\000\000\000\210\000g\004J\000\000\000\000\003\168\000\003\000\003\000\003\000g\000\167\006\170\002>\003\202\000\003\000\003\000\003\001Z\000\n\004\150\003\004\004Z\000\000\000\000\000N\006\170\000\000\000\000\000\000\000\000\003\226\000\003\004\160\003\240\000\003\000\020\000\n\000>\000\n\000\000\003\246\006\1701\192\000\n\000\000\004\198/\2480\180\000\000\000\0001\004\000\000\000\000\000\000\000\000\004\232\000\003\000\000\004\160\004\004\000\003\004x\000\003\000\000\024j\000\003\004\166\000\003\021\194\0014\000\003\000\000\002j\000\000\000\000\000\000\004\138\000\000\000\003\005\202\000\003\006\238\000\003\022\224\000\003\b\018\000\003\024\004\000\003\025(\000\003\026L\000\003\027p\000\003\028\148\000\003\t6\000\003\nZ\000\003\011~\000\003\025\142\000\000\012\162\030\176\000\003\r\198\000\003\014\234\016\014\0172\023F\000\003\018V\000\003\019z\025\142\000\003:\198\000\003\031\152\000\003\020\158\000\000\003\194\000\003\000\000\005\n\000\000\000\000\026\178\000\000\004\190\000\004\000\000\005\030\000\000\000\000\000\000\000\000C\212\000\000\005\"\000\000\0054\000\000\000\000\002\196\000\0039\174\005\020\000\003\000\000\000\000\007\234\001\222\000\000\000\000\000\000\001\222\000\000\000\000\000\000\004\196\007J\000\150\001\222\000\000\000\000\000\000\000\000\000\000\005(\000\000\011\200\000\000\000\000\0052\000\000\000\000\000\000\000\000\003\132\001\204\002V\004\146\000g\005b\004\196\004\164\000g\005\\\000\000\000\016\000g\000\000\0009\000g\000\000\005x\000\000\000\000\b\148\000\000\000\000\004\202\000\003?\234\000\000\000\000\000\000\000\000\003\132\005F\004\236\005x\000\003\027\214!(\000\000\000\000\t\164\000\000\000\0006\188\000\000\006\n\000g\000\0004\202\000-\000\208\000\000\005\210\000\000\000\000\002Z\000g\000\000\000\000\000\000\000\000\000\000\t\164\000\000\000\028\000\000\000\000\000\000\000\000\000/\002\190\005\216\000\000\0007\000\000\000\000\000\004\000\000\000\000\000\000\000\000\0007\003@\001^\000\0003\012\005\240\000\000\005\242\000\000\005\246\000\000\006\002\000\000\006\004\000\000\006\n\000\000\006\012\000\000\006\016\000\000\006\024\000\000\006\028\000\000\006\030\000\000\006$\000\000\006.\000\000\000\000\000\000\000\000\000\000\000\000\b\234\001\000\000\000\t\184\001\000\000\000\000\000\000\000\000\000\000\000\029\164\000\000\005X\000\000\000g\000\000\005\162\000\000\003\132\000\003\003\194\000g\000\000\t\164\000\000\003\132\005\204\005\208\000\000\003\132\000g\005V\001\148\000\000-h\000\000\000\000\006\230\002\190\0060\000\000\000g\0060\000\000\000\000\000\000\000\000\005h\001\152\000\000\000\000\000\000\000\000B\230\000\000\000\000\000\000:P\000\000=8\000\000\007\\:P\000\000\b\n\000\000\001\222\003\024\000\000\005\194\000\000\000\000\000\000\005\140\000\004\000\000\001\138C\024\004\184\000\n\005\150\006\170\001\216\000\n\000\000\006b\003L\004p\000\000\000\000\000\000\000\000\005\158\002\200\004\184\005\160\002\200\006\020\000\003\023F\000\003\000\000\006n\000\000\002\200\000g\000\167\005\210\000\003!h\002\200\000\003\023F\000\000\006(\000\003\006\130\000\000\0064\000\0035~\005\168\003V\000g\006x\000\000\003\164\000\000\000\000\006z\000\000\000\003\000\000\005\168\000\003\000\000\005\168\000\003\000\000\005\168\000\003\000\000\005\168\000\003\000\000\005\168\000\003\000\000\005\168\000\003\000\000\005\168\000\003\000\000\005\168\000\003\000\000\005\168\000\003\000\000\005\168\000\003\000\000\005\168\000\003\000\000\005\168\000\003\000\000@\132\n\182\000\000\000\000\006\150\000\000\000\000&\210\002\200'\180\002\200(\150\002\200)x\002\174\000\000\000\195*Z+<C\024A\006\n2\003\132\000\003\000\003\011\236\001\148\000\000\001\148\000\000\000\000\000\000\011\236\000\000\000\003\005\210\000\003\000\000\001z\001\000\000\000\000\000\000\0007v\000\000\000\003Ab\n\220\012\000+\216\000\000:P\000\000\000g\012z\001\222\000\000:P\r$\003\132\0060:P\000\000\000g\005\220\000g\005\224\000g\005\230\000g\000\000\0038\006F\000\000\000\000\000\003A\228\000\000\000\000\000\000\000g\rz\000g\005\238\000\003\024j\000\020\005\252\000\003\031\152\006\196\000\000\000\000\000\000\000\000\0144\000\000\006Z\006\n\006\130\000\003 \128\000\003\000\000\000\000\014\194\000\000\000g\000\000\003\132\000\003\006\018\000\003\000\000&\210\000\003\000\000\003\132\t\164\000\000\000\003\007\234\014H\003\132\004`\000\004\015\194\000g\000\000\000\000\015l\003\132\000\000\000\000\000\000\006\016\003\132\002z\003\132\015\230:P\000\000\000\000\000\000\002\022\000\000\000\000-h\000\000\006\198\000\000\016\144\006\020\003\132\016\230\017\n\001r\006l\000\000\017\180\018\n\028l\001\158\000\000\000\000\000\000\018.\000\000\001\158$ \006\146\000g\006&\000\003!h\030\176\000\198\000\000\000g\001\142\006\244\000\198\000\198\000g\000\167\006N\000\003\"P\000\198\006\162\000g\0062\000g\007\002\030\176\000\000\000\003\024j\000\198/6\006D\000\198\000\002\0070\000\003#8\000\198\006\154\006J\000\198\000\198\000\000\000\0002J'\128\000\000\007\022\000\0003\012\000\003\030\176\000\000\000\0005~\000\198\000\000\000\000\000\188\000\002\000\000\000\000\000\198\000\0005~\000\000\000\000\007 \000\000\002N\006\240\000\198\000\000\000\000\000\000\000\000\000g\007\018\031\146\002\208\000\000\007\022\000\198\000\000\000\000\002\208\007\024\000\198\000\000\000\0002J\003V\007z\000?\000\000\000\000\002\2007\254\000\020\000\020\006n\000\003\031\152\006v\000\003 \128\000\020\006x\000\003!h\000\000\000g\006z\000g\006|\000g;\024\007\n\000\003\"P\000g\000\000\006~\006\170;\152=\200\000\000\000\000\000g\006\136\000g;\162\006\210\000g\000\000\000\000\000g\001\000\002\208\007<\001\000\006\180\000\198\000\000\006\192\000\198\000\000\001^\002V\003\246\003\246\000\000\007R\000\000\007\004\001\012\000\000\000\000\000\000\000\226\003L\000\000\004\024\000\000\000\000\007Z\000\000\004\000\000\000\000\000\007`3\200\001\012\006\178\004\200\007f\000\000\000\0006:>H\002\2008~\000\000\000\0004H\000\000\000\000\001^\002\212\001\150\000\167\006\224\000\003#8\000g\006\190\006\170?\004\000g\003*\000\167\006\228\000\003$ \004\226\002@\001^\000\000\002\212\0048\006\198\000\003%\b\000\000\000\000\000g<\"\007b\000\003%\240\000\000\004\246\002@\001^\002\212\0048\006\212\002\2009P\000\000\000\000\000g\006\250\007>\002\206\000g\006\220\006\170\0016\000\000\000\000\000\000\002\190\000g\000\167\007\006\000\003\003\194\000\000\000\000\000\000\003l\000g\003*\000\167\007\n\007L\002\206\007\158\000\000\004\132\000\004\000\000\006\242\000\003\030`\000\000\000\000\005p\000\003\031\152\000\000\000\000\000\000\000\000\004\224\000\000\000\166\000\000\000\178\000\000\000\000\007\164\000\000\003\154\000\000\000\000\000\000\000g\000\000\000\000\002@\000\000\000g\007\000\000g\007\004\000g;\024\000\000\000g\007\006\000\000\000\000\001^\002\212\007\012\006\170?\132\000\000\000\000\000g\007\022\001^;\024\001^;\024\000\000\000\000\004\142\000\138\000\000\000\000\000\000\000\000\007<\000\000\000\000B4\000\000,,\000\000\007\128\007T\005\190\000\000\000\000\000\000\000\000\007R\000\000C\024\030`\003V\007V\000\000\000\000\003h\003V\007^\000\000\000\000\000\000\000\000\007d\000\000\004@\003V\007h\000\000\000\000\007p\000\000\004\226\000\000\002@\007r\000\000\001\164\0048\000\000\b\016\000\000\003\230\007\252\000\000\b\022\007\140\000\000\007\142\000\000\004\142\000g\007\146\000\000\000g\007\152\000\000\007\154\000\000\004\246\002@\007\158\000\000\002@\001^\004\184\007\130\000\003\007\166\000\000\007\168\000\000\000\000\000\000\000\000\000\000\000\000\002@\007\170\000\000\000\000\000\000\000\000\000\000,,\007\236\007\180\000\000\000\000\000\000\000\000\007\254\000g\bN\000\000\000\000\000\003\000\000\003\194\000\000\002\200\000\000\005D\000\000\000\198\000\000\007\190\000\000\003\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002B\000\000\000\000\000\000\003\132\000\000\003\132\000\000\003\132\000\000\000\000\000\000"), (16, "\b\137\0046\004\221\004\250\004\254\005\002\000^\b\142\007M\b\137\012\138\000b\000n\b\150\000~\012\146\005\145\000n\b\137\b\137\b\137\007M\000\134\003\185\005\141\012\158\004\250\004\254\005\002\004\249\b\137\b\137\002\201\000f\b\137\b\137\004\221\b\137\003\221\b\137\004\250\004\254\005\002\004\249\007U\002\233\000n\000\n\b\137\b\137\005\030\b\137\002\233\004\221\002\161\005\006\001F\007U\b\137\b\158\b\137\b\137\0032\004\249\b\137\000F\004\190\b\137\b\137\005\006\0016\004\221\012\154\b\137\b\137\b\137\000\n\004\249\012\186\001:\004\249\b\137\000R\001>\b\137\000r\b\137\014\222\005\n\001V\001\170\004\249\004F\0065\004\249\b\137\001Z\000\n\004\249\000\n\000\n\b\137\005\n\000\n\b\137\b\137\004F\b\137\000\n\007M\b\137\001^\004\249\001\154\001\166\001\254\003\189\b\137\002\002\001b\b\137\b\137\b\137\b\137\005\205\002\014\006-\b\137\014\190\b\206\b\137\b\137\0065\006-\005\026\000n\b\137\000\n\b\137\0065\003\186\b\137\b\137\tI\b\137\004*\005%\002\201\005.\b\137\006-\005\210\b\137\002\169\b\137\b}\0065\b\137\b\137\b\137\b\137\006\237\005.\005%\b}\011\022\006\237\r\130\001\178\0112\005\157\006\025\0116\b}\b}\b}\006\025\014\170\001~\011F\000n\006-\014N\011J\003)\b}\b}\0065\006\237\b}\b}\014\206\b}\001\030\b}\011b\011~\011\138\005F\000\"\015\142\r\146\000\n\b}\b}\001\145\b}\005\133\001\170\003\146\000n\005%\015\154\b}\011\150\b}\b}\r:\005\133\b}\004F\nz\b}\b}\011\170\006\237\000\n\006\142\b}\b}\b}\011\254\000\n\005%\006\237\003\221\b}\tI\006]\b}\006]\b}\tI\nz\b}\n\250\003\146\n\150\011\182\002\201\b}\006]\006\237\001b\r\134\005J\b}\003\154\005E\b}\b}\000\222\b}\002%\006]\b}\007=\006]\007=\n\150\006\237\000\n\b}\000\n\005U\b}\b}\b}\b}\007=\006\237\003\017\b}\001b\005J\b}\b}\003\017\003\162\000>\003\150\b}\007=\b}\003\154\007=\b}\b}\016\214\b}\003\166\000\n\000\n\n\226\b}\002\225\000\154\b}\002%\b}\006\157\000\222\b}\b}\b}\b}\000^\n\186\004\002\006\157\006]\000b\004F\000\217\002\225\nz\006]\003\158\006\157\006\157\006\157\001m\004\006\004}\006]\003\241\006\254\003\166\001F\n\186\006\157\006\157\002\225\000f\006\157\006\157\005]\006\157\007=\006\157\005}\n\150\005E\nz\007=\014\222\003r\001\018\006\157\006\157\0049\006\157\007=\002\249\007\002\007B\005\197\001\145\006\157\t)\006\157\006\157\007N\007\022\006\157\000\214\004\002\006\157\006\157\n\150\0016\b\170\n\166\006\157\006\157\006\157\007=\rf\t)\001:\004\153\006\157\004\153\000n\006\157\003\170\006\157\000\n\014\190\006\157\003\017\002\241\002\249\004\153\n\178\006\157\005u\000\n\000\217\002\249\003\001\006\157\000n\018/\006\157\006\157\004\153\006\157\002\241\004\153\006\157\n\186\004\250\004\254\005\002\001\254\002\249\006\157\000J\000n\006\157\006\157\006\157\006\157\000*\002\014\007j\006\157\004\214\007n\006\157\006\157\t)\000\222\007\134\005B\006\157\001\213\006\157\n\186\rf\006\157\006\157\001\213\006\157\000B\017\146\002\249\000\n\006\157\t)\003\250\006\157\003\254\006\157\004r\001b\006\157\006\157\006\157\006\157\0031\004\153\017\242\004v\004\150\007\146\003I\004\153\000F\004\238\007\162\002\030\t)\000\n\001\170\004\153\016f\003\025\t\142\017\246\004\246\006\002\t%\017\251\006\018\000R\006\022\006&\001\213\017\254\t)\007\006\000\n\t\150\015\002\018\003\006\021\016\154\004\153\016\162\006e\018\006\002J\000\n\007\182\006\165\014\242\006\021\005\181\000\n\002R\006.\006\021\000\178\006\021\002\201\018\n\015\002\0062\006>\006B\016\130\002b\003!\003!\000N\018\014\n~\018\018\b\142\006R\004F\006\174\002\201\r\130\b\150\000n\000\n\002j\017\"\006\202\016\234\000j\007\182\002r\006\173\b\202\b\246\005\237\016\143\005\237\006\133\t\006\000n\016\166\002z\t\026\002Z\t:\000z\002\130\018\023\006\141\018\027\000n\001\145\tB\000\166\tR\t^\tj\014\222\t\138\t\154\t\174\t\242\002\138\000\242\002\177\n\026\n\"\b\158\n&\n6\nB\b\181\000\n\001&\000n\0012\nF\002\146\017\203\nN\b\181\001R\n^\017\n\002\162\000\n\000n\018\031\002\170\b\181\b\181\b\181\003\146\003\022\000n\007\006\002\241\000\n\003\017\017\022\001j\b\181\b\181\002\241\001\150\b\181\b\181\r\134\b\181\002&\b\181\006\030\001b\000\n\002\154\003\017\001\162\000\n\016>\b\181\b\181\001\190\b\181\007\006\001\210\001\250\002\n\002\018\016>\b\181\000\n\b\181\b\181\003\017\0039\b\181\003\150\002\201\b\181\b\181\003\154\000\n\006%\016\179\b\181\b\181\b\181\001b\002N\006%\003\178\002\241\b\181\006\025\002\209\b\181\005e\b\181\003\"\007\006\b\181\005\173\0036\005\173\006\025\000\n\b\181\001\170\003B\006\025\003^\006\025\b\181\003\158\005\173\b\181\b\181\000\n\b\181\003f\005\241\b\181\005\241\003\166\003\214\000\n\016\194\005\173\b\181\003\234\005\173\b\181\b\181\b\181\b\181\016\018\016\194\000\n\b\181\004\n\004\018\b\181\b\181\003\181\002\225\004\022\005!\b\181\004\026\b\181\004\"\005!\b\181\b\181\015F\b\181\002\209\002\030\002\209\006}\b\181\003\245\016N\002&\004B\b\181\b\177\004Z\b\181\b\181\b\181\b\181\006E\005!\006E\b\177\b\177\b\177\004\250\004\254\005\002\003\170\004z\005\173\004~\006E\006E\b\177\b\177\005\173\014F\b\177\b\177\b\142\b\177\004\130\002R\005\173\006E\b\150\014\138\006E\003~\006}\004\174\b\177\b\177\006}\b\177\004\202\005!\017\219\005\022\005R\005Z\b\177\005b\b\177\b\177\005!\005\173\b\177\005j\005r\b\177\b\177\005z\005\130\007\178\005\138\b\177\b\177\b\177\005\146\000\n\005\154\005\162\005!\b\177\005\170\006}\b\177\016R\002Z\005\178\b\158\b\177\005\254\016V\0066\006}\006:\b\177\006J\006E\005!\006j\006v\b\177\006\138\006E\b\177\b\177\006\242\b\177\005!\016Z\b\177\006E\007\014\007\"\007>\007J\007R\b\177\000\170\007f\b\177\b\177\b\177\b\177\007z\000\174\007\150\b\177\000\178\007\158\b\177\b\177\007\166\006}\006}\007\190\b\177\007\210\b\177\b\130\b\254\b\177\b\177\tb\b\177\tr\002\030\tz\003\146\b\177\t\130\006}\002&\t\146\b\177\b\173\t\190\b\177\b\177\b\177\b\177\t\206\t\218\t\246\b\173\b\173\b\173\004\250\004\254\005\002\t\250\t\254\n.\n\142\n\198\n\210\b\173\b\173\n\230\011\026\b\173\b\173\011\"\b\173\011B\b\173\011V\011f\011n\000\186\003\162\000\190\003\150\011v\b\173\b\173\003\154\b\173\003\146\011\146\011\158\011\174\011\178\011\210\b\173\000\194\b\173\b\173\012\"\000\n\b\173\012.\012J\b\173\b\173\012Z\012n\012\134\012\166\b\173\b\173\b\173\012\178\012\194\012\214\012\222\012\234\b\173\012\254\003\158\b\173\r\026\b\173\r&\rB\b\173\bq\rJ\bq\003\166\002\193\b\173\003\150\rV\rv\r~\003\154\b\173\r\170\bq\b\173\b\173\r\190\b\173\r\202\r\210\b\173\000\198\000\202\014\018\014\"\014:\bq\b\173\014^\bq\b\173\b\173\b\173\b\173\014z\014\158\014\182\b\173\014\186\014\198\b\173\b\173\014\234\003\158\015\018\015\022\b\173\015\030\b\173\0152\015~\b\173\b\173\003\166\b\173\015\174\002\030\015\182\003!\b\173\015\202\003\170\002&\015\222\b\173\b\169\015\246\b\173\b\173\b\173\b\173\003\205\016+\003\205\b\169\b\169\b\169\004\250\004\254\005\002\016F\016J\bq\016c\003\205\016w\b\169\002J\bq\016\139\b\169\b\169\016\159\b\169\016\175\002R\bq\003\205\016\187\016\207\003\205\006\194\003!\016\226\b\169\b\169\003!\002b\016\238\bq\016\246\003\170\016\251\017\003\b\169\017\019\b\169\b\169\017\031\017'\b\169\0177\017J\002j\b\169\017S\017[\017{\017\150\002r\b\169\b\169\017\155\017\174\017\183\017\235\000\000\b\169\000\000\003!\002z\000\000\002Z\000\000\000\000\002\130\000\000\000\000\000\000\003!\000\000\b\169\000\000\003\205\000\000\000\000\005\189\b\169\005\189\003\205\b\169\002\138\000\000\b\169\000\000\000\000\b\169\003\205\000\000\005\189\000\000\000\000\000\000\b\169\000\000\000\000\002\146\b\169\b\169\b\169\003\205\000\000\005\189\b\169\000\000\005\189\b\169\b\169\000\000\003\237\003\142\000\000\b\169\000\000\b\169\000\000\000\000\b\169\b\169\002\021\b\169\002\021\002\030\000\000\000\000\b\169\000\000\003!\002&\000\000\b\169\b\165\002\021\002\154\b\169\b\169\b\169\000\000\000\000\000\000\b\165\b\165\b\165\000\000\000\000\002\021\000\000\000\000\002\021\000\000\000\000\000\000\b\165\002J\000\000\000\000\b\165\b\165\005\189\b\165\000\000\002R\000\000\000\000\005\189\000\000\000\000\000\000\000\000\000\000\b\165\b\165\005\189\002b\000\000\000\000\000\000\004N\000\000\005\206\b\165\000\000\b\165\b\165\000\000\000\000\b\165\000\000\000\000\002j\b\165\000\000\001\145\000\000\000\000\002r\b\165\b\165\000\000\000\000\000\000\002\021\000\000\b\165\000\000\000\000\002z\002\021\002Z\000\000\000\000\002\130\003\017\000\000\003\017\002\021\000\000\b\165\000\000\000\000\000\000\000\000\005\165\b\165\005\165\003\017\b\165\002\138\000\000\b\165\000\000\000\000\b\165\000\000\000\000\005\165\000\000\000\000\003\017\b\165\000\000\003\017\002\146\b\165\b\165\b\165\000\000\000\000\005\165\b\165\000\000\005\165\b\165\b\165\000\000\000\000\000\000\000\000\b\165\000\000\b\165\000\000\000\000\b\165\b\165\000\000\b\165\000\000\002\030\000\000\000\000\b\165\000\000\000\000\002&\000\000\b\165\b\189\000\000\002\154\b\165\b\165\b\165\b\t\000\000\b\t\b\189\b\189\b\189\000\000\000\000\000\000\000\000\000\000\003\017\000\000\b\t\000\000\b\189\002J\003\017\000\000\b\189\b\189\005\165\b\189\000\000\002R\003\017\b\t\005\165\000\000\b\t\000\000\000\000\000\000\b\189\b\189\005\165\002b\000^\000\000\000\000\005\218\000\000\000b\b\189\000\000\b\189\b\189\000\000\000\000\b\189\000\000\000\000\002j\b\189\000\000\000\000\000\000\000\000\002r\b\189\b\189\000\000\000\000\000\000\000f\000\000\b\189\000\000\003A\002z\000\000\002Z\000\000\000\000\002\130\000\000\000\000\000\000\000\000\000\000\b\189\000\000\b\t\000\000\000\000\007\173\b\189\007\173\b\t\b\189\002\138\000\000\b\189\000\000\000\000\b\189\b\t\000\000\007\173\000\000\000\000\0016\b\189\000\000\000\000\002\146\b\189\b\189\b\189\b\198\001:\007\173\002\162\000\000\007\173\b\189\b\189\000\000\000\000\000\000\000\000\b\189\000\000\b\189\000\000\000\000\b\189\b\189\000\n\b\189\000\000\002\030\000\000\000\000\b\189\000\000\000\000\002&\000\000\b\189\b\185\000\000\002\154\b\189\b\189\b\189\001\254\000\000\000\000\b\185\b\185\b\185\000\000\000\000\000\000\000\000\002\014\000\000\000\000\000\000\000\000\b\185\002J\000\000\000\000\b\185\b\185\007\173\b\185\000\000\002R\000\000\000\000\007\173\003\146\000\000\000\000\000\000\000\000\b\185\b\185\007\173\002b\000\000\000\000\000\000\000\000\000\000\000\000\b\185\000\000\b\185\b\185\000\000\000\000\b\185\000\000\005\254\002j\b\185\000\000\000\000\000\000\000\000\002r\b\185\b\185\000\000\000\000\000\000\000\000\000\000\b\185\000\000\000\000\002z\006\149\002Z\003\150\000\000\002\130\003\213\003\154\003\213\000\000\000\000\b\185\000\000\000\000\000\000\000\000\005m\b\185\005m\003\213\b\185\002\138\000\000\b\185\000\000\000\000\b\185\000\000\000\000\005m\000\000\000\000\003\213\b\185\000\000\003\213\002\146\b\185\b\185\b\185\003\158\000\000\005m\002\162\000\000\005m\b\185\002\170\000\000\000\000\003\166\000\000\b\185\000\000\b\185\000\000\000\000\b\185\b\185\000\000\b\185\000\000\002\030\000\000\000\000\b\185\000\000\000\000\002&\000\000\b\185\b\217\000\000\002\154\b\185\b\185\b\185\007\189\000\000\007\189\b\217\b\217\b\217\000\000\000\000\000\000\000\000\000\000\003\213\000\000\007\189\000\000\b\217\002J\003\213\000\000\b\217\b\217\005m\b\217\000\000\002R\003\213\007\189\005m\000\000\007\189\000\000\003\170\000\000\b\217\b\217\005m\002b\000\000\000\000\000\000\t2\000\000\000\000\b\217\000\000\b\217\b\217\000\000\b\214\b\217\000\000\000\000\002j\b\217\000\000\000\000\000\000\000\000\002r\b\217\b\217\000\000\000\000\000\000\000\000\000\000\b\217\000\000\000\000\002z\000\000\002Z\000\000\000\000\002\130\000\000\000\000\000\000\000\000\000\000\b\217\000\000\007\189\000\000\000\000\007\201\b\217\007\201\007\189\b\217\002\138\000\000\b\217\000\000\000\000\b\217\007\189\000\000\007\201\000\000\000\000\000\000\b\217\000\000\000\000\002\146\b\217\b\217\b\217\000\000\000\000\007\201\002\162\000\000\007\201\b\217\002\170\000\000\000\000\tJ\000\000\b\217\000\000\b\217\000\000\000\000\b\217\b\217\002\217\b\217\002\217\002\030\000\000\000\000\b\217\000\000\000\000\002&\000\000\b\217\b\205\002\217\002\154\b\217\b\217\b\217\000\000\000\000\000\000\b\205\b\205\b\205\000\000\000\000\002\217\000\000\000\000\002\217\000\000\000\000\000\000\b\205\002J\000\000\000\000\b\205\b\205\007\201\b\205\000\000\002R\000\000\t\182\007\201\000\000\000\000\000\000\000\000\000\000\b\205\b\205\007\201\b\205\000\000\000\000\000\000\000\000\000\000\000\000\b\205\000\000\b\205\b\205\000\000\tZ\b\205\000\000\000\000\b\205\b\205\000\000\000\000\000\000\000\000\b\205\b\205\b\205\000\000\000\000\000\000\002\217\000\000\b\205\000\000\000\000\b\205\002\217\002Z\000\000\000\000\b\205\006\r\000\000\006\r\002\217\000\000\b\205\000\000\000\000\000\000\000\000\b\005\b\205\b\005\006\r\b\205\b\205\000\000\b\205\000\000\000\000\b\205\000\000\000\000\b\005\000\000\000\000\006\r\b\205\000\000\006\r\b\205\b\205\002\206\b\205\000\000\000\000\b\005\b\205\000\000\b\005\b\205\b\205\000\000\000\000\t\182\000\000\b\205\000\000\b\205\000\000\000\000\b\205\b\205\000\000\b\205\000\000\002\030\000\000\000\000\b\205\000\000\000\000\002&\000\000\b\205\b\209\000\000\b\205\b\205\b\205\b\205\006\005\000\000\006\005\b\209\b\209\b\209\000\000\000\000\000\000\000\000\000\000\006\r\000\000\006\005\000\000\b\209\002J\006\r\000\000\b\209\b\209\b\005\b\209\000\000\002R\006\r\006\005\b\005\000\000\006\005\000\000\000\000\000\000\b\209\b\209\b\005\b\209\000\000\000\000\000\000\000\000\000\000\000\000\b\209\t\254\b\209\b\209\000\000\nZ\b\209\000\000\000\000\b\209\b\209\000\000\000\000\000\000\000\000\b\209\b\209\b\209\000\000\000\000\000\000\000\000\000\000\b\209\000\000\000\000\b\209\000\000\002Z\000\000\000\000\b\209\000\000\000\000\000\000\000\000\000\000\b\209\000\000\006\005\000\000\000\000\nz\b\209\b\r\006\005\b\209\b\209\000\000\b\209\000\000\000\000\b\209\006\005\000\000\b\r\000\000\000\000\000\000\b\209\000\000\000\000\b\209\b\209\b\209\b\209\000\000\000\000\n\150\b\209\000\000\b\r\b\209\b\209\000\000\000\000\000\000\000\000\b\209\000\000\b\209\000\000\000\000\b\209\b\209\000i\b\209\000i\002\030\000\000\000\000\b\209\000\000\000\000\002&\000\000\b\209\b\221\000i\b\209\b\209\b\209\b\209\nz\000\000\007\133\b\221\b\221\b\221\000\000\000\000\000i\000\000\000\000\000i\000\000\007\133\000\000\b\221\002J\000\000\000\000\b\221\b\221\b\r\b\221\000\000\002R\000\000\007\133\b\r\000\000\007\133\000\000\000\000\000\000\b\221\b\221\b\r\002b\000\000\000\000\000\000\000\000\000\000\nj\b\221\000\000\b\221\b\221\000\000\000\000\b\221\000\000\000\000\002j\b\221\000\000\000\000\000\000\000\000\002r\b\221\b\221\000\000\000\000\000\000\000i\000\000\b\221\000\000\000\000\002z\000i\002Z\000\000\000\000\002\130\000\000\000\000\000\000\000i\000\000\b\221\000\000\007\133\000\000\000\000\nz\b\221\007u\007\133\b\221\002\138\000\000\b\221\000\000\000\000\b\221\007\133\000\000\007u\000\000\000\000\000\000\b\221\000\000\000\000\002\146\b\221\b\221\b\221\000\000\000\000\007u\002\162\000\000\007u\b\221\002\170\000\000\000\000\000\000\000\000\b\221\000\000\b\221\000\000\000\000\b\221\b\221\nz\b\221\007}\002\030\000\000\000\000\b\221\000\000\000\000\002&\000\000\b\221\b\213\007}\002\154\b\221\b\221\b\221\nz\000\000\007\129\b\213\b\213\b\213\000\000\000\000\n\150\000\000\000\000\007}\000\000\007\129\000\000\b\213\002J\000\000\000\000\b\213\b\213\007u\b\213\000\000\002R\000\000\n\150\007u\000\000\007\129\000\000\000\000\000\000\b\213\b\213\007u\002b\000\000\000\000\000\000\000\000\000\000\000\000\b\213\000\000\b\213\b\213\000\000\000\000\b\213\000\000\000\000\002j\b\213\000\000\000\000\000\000\000\000\002r\b\213\b\213\000\000\000\000\000\000\007}\000\000\b\213\000\000\000\000\002z\007}\002Z\000\000\000\000\002\130\000\000\000\000\000\000\007}\000\000\b\213\000\000\007\129\000\000\000\000\nz\b\213\007\205\007\129\b\213\002\138\000\000\b\213\000\000\000\000\b\213\007\129\000\000\007\205\000\000\000\000\000\000\b\213\000\000\000\000\002\146\b\213\b\213\b\213\000\000\000\000\n\150\002\162\000\000\007\205\b\213\002\170\000\000\000\000\000\000\000\000\b\213\000\000\b\213\000\000\000\000\b\213\b\213\nz\b\213\b\017\002\030\000\000\000\000\b\213\000\000\000\000\002&\000\000\b\213\b\197\b\017\002\154\b\213\b\213\b\213\nz\000\000\007\221\b\197\b\197\b\197\000\000\000\000\n\150\000\000\000\000\b\017\000\000\007\221\000\000\b\197\002J\000\000\000\000\b\197\b\197\007\205\b\197\000\000\002R\000\000\n\150\007\205\000\000\007\221\000\000\000\000\000\000\b\197\b\197\007\205\b\197\000\000\000\000\000\000\000\000\000\000\000\000\b\197\000\000\b\197\b\197\000\000\000\000\b\197\000\000\000\000\b\197\b\197\000\000\000\000\000\000\000\000\b\197\b\197\b\197\000\000\000\000\000\000\b\017\000\000\b\197\000\000\000\000\b\197\b\017\002Z\000\000\000\000\b\197\000\000\000\000\000\000\b\017\000\000\b\197\000\000\007\221\000\000\000\000\000\000\b\197\000\000\007\221\b\197\b\197\000\000\b\197\000\000\000\000\b\197\007\221\000\000\000\000\000\000\000\000\000\000\b\197\000\000\000\000\b\197\b\197\002\234\b\197\000\000\000\000\000\000\b\197\000\000\000\000\b\197\b\197\000\000\000\000\000\000\000\000\b\197\000\000\b\197\000\000\000\000\b\197\b\197\000\000\b\197\000\000\002\030\000\000\000\000\b\197\000\000\000\000\002&\000\000\b\197\b\201\000\000\b\197\b\197\b\197\b\197\000\000\000\000\000\000\b\201\b\201\b\201\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\201\002J\000\000\000\000\b\201\b\201\000\000\b\201\000\000\002R\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\201\b\201\000\000\b\201\000\000\000\000\000\000\000\000\000\000\000\000\b\201\000\000\b\201\b\201\000\000\000\000\b\201\000\000\000\000\b\201\b\201\000\000\000\000\000\000\000\000\b\201\b\201\b\201\000\000\000\000\000\000\000\000\000\000\b\201\000\000\000\000\b\201\000\000\002Z\000\000\000\000\b\201\000\000\000\000\000\000\000\000\000\000\b\201\000\000\000\000\000\000\000\000\000\000\b\201\000\000\000\000\b\201\b\201\000\000\b\201\000\000\000\000\b\201\000\000\000\000\000\000\000\000\000\000\000\000\b\201\000\000\000\000\b\201\b\201\b\201\b\201\000\000\000\000\000\000\b\201\000\000\000\000\b\201\b\201\000\000\000\000\000\000\000\000\b\201\000\000\b\201\000\000\000\000\b\201\b\201\000\000\b\201\000\000\002\030\000\000\000\000\b\201\000\000\000\000\002&\000\000\b\201\b\225\000\000\b\201\b\201\b\201\b\201\000\000\000\000\000\000\b\225\b\225\b\225\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\225\002J\000\000\000\000\b\225\b\225\000\000\b\225\000\000\002R\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\225\b\225\000\000\002b\000\000\000\000\000\000\000\000\000\000\000\000\b\225\000\000\b\225\b\225\000\000\000\000\b\225\000\000\000\000\002j\b\225\000\000\000\000\000\000\000\000\002r\b\225\b\225\000\000\000\000\000\000\000\000\000\000\b\225\000\000\000\000\002z\000\000\002Z\000\000\000\000\002\130\000\000\000\000\000\000\000\000\000\000\b\225\000\000\000\000\000\000\000\000\000\000\b\225\000\000\000\000\b\225\002\138\000\000\b\225\000\000\000\000\b\225\000\000\000\000\000\000\000\000\000\000\000\000\b\225\000\000\000\000\002\146\b\225\b\225\b\225\000\000\000\000\000\000\002\162\000\000\000\000\b\225\002\170\000\000\000\000\000\000\000\000\b\225\000\000\b\225\000\000\000\000\b\225\b\225\000\000\b\225\000\000\b\129\000\000\000\000\b\225\000\000\000\000\002&\000\000\b\225\b\129\000\000\002\154\b\225\b\225\b\225\000\000\000\000\000\000\b\129\b\129\b\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\129\b\129\000\000\000\000\b\129\b\129\000\000\b\129\000\000\b\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\129\b\129\000\000\b\129\000\000\000\000\000\000\000\000\000\000\000\000\b\129\000\000\b\129\b\129\000\000\000\000\b\129\000\000\000\000\b\129\b\129\000\000\000\000\000\000\000\000\b\129\b\129\b\129\000\000\000\000\000\000\000\000\000\000\b\129\000\000\000\000\b\129\000\000\b\129\000\000\000\000\b\129\000\000\000\000\000\000\000\000\000\000\b\129\000\000\000\000\000\000\000\000\000\000\b\129\000\000\000\000\b\129\b\129\000\000\b\129\000\000\000\000\b\129\000\000\000\000\000\000\000\000\000\000\000\000\b\129\000\000\000\000\b\129\b\129\b\129\b\129\000\000\000\000\000\000\b\129\000\000\000\000\b\129\b\129\000\000\000\000\000\000\000\000\b\129\000\000\b\129\000\000\000\000\b\129\b\129\002\030\b\129\000\000\000\000\000\000\000\000\b\129\000\000\000\000\b\161\000\000\b\129\000\000\000\000\b\129\b\129\b\129\b\129\b\161\b\161\b\161\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\161\002J\000\000\000\000\b\161\b\161\000\000\b\161\000\000\002R\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\161\b\161\000\000\002\030\000\000\000\000\000\000\000\000\000\000\000\000\b\161\000\000\b\161\b\161\000\000\000\000\b\161\000\000\000\000\b\161\b\161\002\226\000\000\000\000\000\000\000\000\b\161\b\161\000\000\000\000\000\000\000\000\000\000\b\161\002J\000\000\000\000\000\000\002Z\000\000\000y\000\000\002R\000\000\000\000\000\000\000\000\b\161\000\000\000\000\000\000\007\142\000\000\b\161\002b\000\000\b\161\000\000\000\000\b\161\000\000\000\000\b\161\000\000\000\000\000\000\000\000\000\000\000\000\b\161\002j\000\000\000\000\b\161\b\161\b\161\002r\000\000\000\000\b\161\000\000\000\000\b\161\b\161\000\000\000\000\000\000\002z\b\161\002Z\b\161\000\000\002\130\b\161\b\161\000\000\b\161\000\000\002\030\000\000\000\000\b\161\000\000\000\000\002&\000\000\b\161\b\145\002\138\b\161\b\161\b\161\b\161\000\000\000\000\000\000\b\145\b\145\b\145\000\000\000\000\000\000\000\000\002\146\000\000\000\000\000y\000\000\b\145\002J\002\162\000\000\b\145\b\145\002\170\b\145\000\000\002R\000\000\007Z\000\000\000\000\000\000\000\000\000\000\000\000\b\145\b\145\000\000\002\030\000\000\000\000\000\000\000\000\000\000\002&\b\145\000\000\b\145\b\145\002\154\000\000\b\145\000\000\000\000\b\145\b\145\011\134\000\000\000\000\000\000\000\000\b\145\b\145\000\000\000\000\000\000\000\000\000\000\b\145\002J\000\000\000\000\000\000\002Z\000\000\003\229\000\000\002R\000\000\000\000\000\000\000\000\b\145\000\000\000\000\000\000\000\000\000\000\b\145\002b\000\000\b\145\000\000\000\000\b\145\000\000\000\000\b\145\000\000\000\000\000\000\000\000\000\000\000\000\b\145\002j\000\000\000\000\b\145\b\145\b\145\002r\000\000\000\000\b\145\000\000\000\000\b\145\b\145\000\000\000\000\000\000\002z\b\145\002Z\b\145\000\000\002\130\b\145\b\145\000\000\b\145\000\000\002\030\000\000\000\000\b\145\000\000\000\000\002&\000\000\b\145\b\149\002\138\b\145\b\145\b\145\b\145\000\000\000\000\000\000\b\149\b\149\b\149\000\000\000\000\000\000\000\000\002\146\000\000\000\000\000\000\000\000\b\149\002J\002\162\000\000\b\149\b\149\002\170\b\149\000\000\002R\000\000\002\178\000\000\t\198\000\000\000\000\000\000\000\000\b\149\b\149\000\000\002\030\000\000\000\000\000\000\000\000\000\000\002&\b\149\000\000\b\149\b\149\002\154\000\000\b\149\000\000\000\000\b\149\b\149\000\000\000\000\000\000\000\000\000\000\b\149\b\149\000\000\000\000\000\000\000\000\000\000\b\149\002J\000\000\000\000\000\000\002Z\000\000\002\186\000\000\002R\000\000\000\000\000\000\000\000\b\149\000\000\000\000\000\000\000\000\000\000\b\149\002b\000\000\b\149\000\000\000\000\b\149\000\000\000\000\b\149\000\000\000\000\000\000\000\000\000\000\000\000\b\149\002j\000\000\000\000\b\149\b\149\b\149\002r\000\000\000\000\b\149\000\000\000\000\b\149\b\149\000\000\000\000\000\000\002z\b\149\002Z\b\149\000\000\002\130\b\149\b\149\000\000\b\149\000\000\002\030\000\000\000\000\b\149\000\000\000\000\002&\000\000\b\149\b\153\002\138\b\149\b\149\b\149\b\149\000\000\000\000\000\000\b\153\b\153\b\153\000\000\000\000\000\000\000\000\002\146\000\000\000\000\000\000\000\000\b\153\002J\002\162\000\000\b\153\b\153\002\170\b\153\000\000\002R\000\000\002\246\000\000\000\000\000\000\000\000\000\000\000\000\b\153\b\153\000\000\002\030\000\000\000\000\000\000\000\000\000\000\002&\b\153\000\000\b\153\b\153\002\154\000\000\b\153\000\000\000\000\b\153\b\153\000\000\000\000\000\000\000\000\000\000\b\153\b\153\000\000\000\000\000\000\000\000\000\000\b\153\002J\000\000\000\000\000\000\002Z\000\000\003.\000\000\002R\000\000\000\000\000\000\000\000\b\153\000\000\000\000\000\000\000\000\000\000\b\153\002b\000\000\b\153\000\000\000\000\b\153\000\000\000\000\b\153\000\000\000\000\000\000\000\000\000\000\000\000\b\153\002j\000\000\000\000\b\153\b\153\b\153\002r\000\000\000\000\b\153\000\000\000\000\b\153\b\153\000\000\000\000\000\000\002z\b\153\002Z\b\153\000\000\002\130\b\153\b\153\000\000\b\153\000\000\002\030\000\000\000\000\b\153\000\000\000\000\002&\000\000\b\153\b\157\002\138\b\153\b\153\b\153\b\153\000\000\000\000\000\000\b\157\b\157\b\157\000\000\000\000\000\000\000\000\002\146\000\000\000\000\000\000\000\000\b\157\002J\002\162\000\000\b\157\b\157\002\170\b\157\000\000\002R\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\157\b\157\000\000\002\030\000\000\000\000\000\000\000\000\000\000\002&\b\157\000\000\b\157\b\157\002\154\000\000\b\157\000\000\000\000\b\157\b\157\000\000\000\000\000\000\000\000\000\000\b\157\b\157\000\000\000\000\000\000\000\000\000\000\b\157\002J\000\000\000\000\000\000\002Z\000\000\004\138\000\000\002R\000\000\000\000\000\000\000\000\b\157\000\000\000\000\000\000\000\000\000\000\b\157\002b\000\000\b\157\000\000\000\000\b\157\000\000\000\000\b\157\000\000\000\000\000\000\000\000\000\000\000\000\b\157\002j\000\000\000\000\b\157\b\157\b\157\002r\000\000\000\000\b\157\000\000\000\000\b\157\b\157\000\000\000\000\000\000\002z\b\157\002Z\b\157\000\000\002\130\b\157\b\157\000\000\b\157\000\000\002\030\000\000\000\000\b\157\000\000\000\000\002&\000\000\b\157\b\141\002\138\b\157\b\157\b\157\b\157\bY\000\000\bY\b\141\b\141\b\141\000\000\000\000\000\000\000\000\002\146\000\000\000\000\bY\000\000\b\141\002J\002\162\000\000\b\141\b\141\002\170\b\141\000\000\002R\000\000\bY\000\000\000\000\bY\000\000\000\000\000\000\b\141\b\141\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002&\b\141\000\000\b\141\b\141\002\154\000\000\b\141\000\000\000\000\b\141\b\141\000\000\000\000\000\000\000\000\000\000\b\141\b\141\000\000\000\000\000\000\000\000\000\000\b\141\000\000\b\142\000\000\000\000\002Z\000\000\000\000\b\150\000\000\000\000\000\000\000\000\000\000\b\141\000\000\bY\000\000\000\000\000\000\b\141\000\000\bY\b\141\000\000\000\000\b\141\000\000\000\000\b\141\bY\000\000\000\000\000\000\000\000\000\000\b\141\000\000\000\000\000\000\b\141\b\141\b\141\bY\000\000\000\000\b\141\000\000\000\000\b\141\b\141\000\000\000\000\000\000\b\158\b\141\000\000\b\141\000\000\000\000\b\141\b\141\000\000\b\141\006u\000\000\000\000\000\000\b\141\000\000\000\000\002&\000\000\b\141\006u\006u\b\141\b\141\b\141\b\141\004\250\004\254\005\002\004\249\000\000\006u\000\000\000\000\000\000\006u\006u\000\000\006u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006u\000\000\000\000\000\000\000\000\000\000\005\006\000\000\000\000\000\000\006u\000\000\006u\006u\004\249\000\000\006u\000\000\000\000\000\000\006u\000\000\000\000\000\000\000\000\000\000\006u\006u\004\249\000\000\000\000\004\249\000\000\006u\000\000\000\000\000\000\000\000\000\000\005\n\000\000\000\000\000\000\004F\000\000\000\000\002\030\006u\000\000\004\249\000\000\000\000\000\000\006u\000\000\000\000\006u\000\000\000\000\006u\000\000\000\000\006u\000\000\000\000\000\000\000\000\000\000\000\000\006u\000\000\000\000\000\000\000\000\000\000\006u\000\000\002J\000\000\000\000\000\000\015:\006u\006u\000\000\002R\002\030\000\000\000\000\000\000\000\000\000\000\000\000\006u\006u\004=\000\000\002b\000\000\005.\000\000\006u\000\000\000\000\000\000\004=\004=\000\000\000\000\000\000\006u\006u\006u\002j\000\000\000\000\004=\002J\000\000\002r\004=\011.\000\000\004=\000\000\002R\000\000\000\000\000\000\000\000\002z\000\000\002Z\000\000\000\000\002\130\000\000\002b\000\000\000\000\000\000\016n\000\000\000\000\004=\000\000\004=\000\000\000\000\000\000\004=\002\138\000\000\002j\004=\000\000\000\000\000\000\000\000\002r\004=\004=\000\000\000\000\000\000\000\000\002\146\004=\000\000\016{\002z\000\000\002Z\002\162\000\000\002\130\000\000\002\170\000\000\000\000\000\000\002\198\000\000\000\000\000\000\000\000\000\000\004=\000\000\000\000\004=\002\138\000\000\004=\000\000\000\000\004=\000\000\002&\000\000\000\000\000\000\002\030\002\154\000\000\000\000\002\146\004=\004=\004=\000\000\007i\000\000\002\162\000\000\000\000\004=\002\170\000\000\000\000\000\000\007i\007i\000\000\000\000\000\000\000\000\004=\004=\000\000\000\000\000\000\007i\002J\000\000\004=\007i\015N\002&\000\229\000\000\002R\000\000\002\154\004=\004=\004=\000\000\000\000\000\000\000\000\003\197\000\000\002b\000\000\000\000\000\000\000\000\000\000\000\000\007i\000\000\007i\000\000\011\022\000\000\000\000\000\000\0112\002j\007i\0116\000\000\000\000\000\000\002r\007i\007i\011F\000\000\000\000\000\000\011J\007i\000\000\000\000\002z\012N\002Z\000\000\000\000\002\130\000\000\000\000\011b\011~\011\138\003\006\000\000\000\000\000\000\000\000\000\000\007i\000\000\000\000\007i\002\138\000\000\007i\000\000\000\000\007i\011\150\000\000\000\000\000\000\000\000\002\030\000\000\000\000\000\000\002\146\011\170\000\000\007i\000\000\007e\000\000\002\162\000\000\000\000\007i\002\170\000\000\000\000\000\000\007e\007e\000\000\000\000\000\000\000\000\007i\007i\000\000\000\000\011\182\007e\002J\000\000\007i\007e\000\000\002&\n\006\000\000\002R\000\000\002\154\007i\007i\007i\000\000\000\000\000\000\000\000\000\000\000\000\002b\000\000\000\000\000\000\000\000\000\000\000\000\007e\000\000\007e\000\000\000\000\000\000\000\000\000\000\000\000\002j\007e\000\000\000\000\000\000\000\000\002r\007e\007e\000\000\000\000\000\000\000\000\000\000\007e\000\000\000\000\002z\000\000\002Z\000\000\000\000\002\130\000^\000\000\000\000\000\000\000\000\000b\000\000\000\000\000\000\000\000\000\000\007e\000\000\000\000\007e\002\138\000\000\007e\000\000\000\000\007e\000\000\000\000\000\000\000\000\000\000\002\030\000f\000\000\004\005\002\146\004\005\000\000\007e\000\000\007a\000\000\002\162\000\000\000\000\007e\002\170\004\005\000\000\000\000\007a\007a\000\000\000\000\000\000\000\000\007e\007e\000\000\000\000\004\005\007a\002J\004\005\007e\007a\000\000\002&\011*\0016\002R\000\000\002\154\007e\007e\007e\000\000\000\000\001:\000\000\000\000\000\000\002b\000\000\000\000\000\000\000\000\000\000\000\000\007a\000\000\007a\000\000\000\000\000\000\000\000\000\n\000\000\002j\007a\000\000\000\000\000\000\000\000\002r\007a\007a\000\000\000\000\000\000\000\000\000\000\007a\000\000\001\254\002z\004\005\002Z\000\000\000\000\002\130\000\000\004\005\000\000\002\014\000\000\007\130\000\000\000\000\000\000\004\005\000\000\007a\000\000\000\000\007a\002\138\000\000\007a\000\000\000\000\007a\000\000\000\000\000\000\000\000\000\000\002\030\000\000\000\000\000\000\002\146\000\000\000\000\007a\000\000\001\005\000\000\002\162\000\000\000\000\007a\002\170\000\000\000\000\000\000\001\005\001\005\000\000\000\000\000\000\000\000\007a\007a\000\000\000\000\000\000\001\005\002J\000\000\007a\001\005\000\000\002&\000\000\000\000\002R\000\000\002\154\007a\007a\007a\000\000\000\000\000\000\000\000\000\000\000\000\002b\000\000\000\000\000\000\000\000\000\000\000\000\001\005\000\000\001\005\000\000\000\000\000\000\000\000\000\000\000\000\002j\001\005\000\000\000\000\000\000\000\000\002r\001\005\001\005\000\000\000\000\000\000\000\000\000\000\001\005\000\000\000\000\002z\000\000\002Z\000\000\000\000\002\130\000\000\000\000\000\000\000\000\000\000\011^\000\000\000\000\000\000\000\000\000\000\001\005\000\000\000\000\001\005\002\138\000\000\001\005\000\000\000\000\001\005\000\000\000\000\000\000\000\000\000\000\002\030\000\000\000\000\000\000\002\146\000\000\000\000\001\005\000\000\001%\000\000\002\162\000\000\000\000\001\005\002\170\000\000\000\000\000\000\001%\001%\000\000\000\000\000\000\000\000\001\005\001\005\000\000\000\000\000\000\001%\002J\000\000\001\005\001%\000\000\002&\000\000\000\000\002R\000\000\002\154\001\005\001\005\001\005\000\000\000\000\000\000\000\000\000\000\000\000\002b\000\000\000\000\000\000\000\000\000\000\000\000\001%\000\000\001%\000\000\000\000\000\000\000\000\000\000\000\000\002j\001%\000\000\000\000\000\000\000\000\002r\001%\001%\000\000\000\000\000\000\000\000\000\000\001%\000\000\000\000\002zb\000\000\000\000\000\000\000\000\000\000\000\000\001)\000\000\001)\000\000\000\000\000\000\000\000\011\022\000\000\002j\001)\0112\000\000\000\000\0116\002r\001)\001)\000\000\000\000\000\000\011F\000\000\001)\000\000\011J\002z\000\000\002Z\012B\012f\002\130\000\000\000\000\000\000\000\000\000\000\011b\011~b\000\000\000\000\000\000\000\000\000\000\000\000\002\157\000\000\002\157\000\000\000\000\000\000\000\000\000\000\000\000\002j\002\157\000\000\000\000\000\000\000\000\002r\002\157\002\157\000\000\000\000\000\000\000\000\000\000\002\157\000\000\000\000\002zb\000\000\000\000\000\000\000\000\000\000\000\000\000\241\000\000\000\241\000\000\000\000\000\000\000\000\000\000\000\000\002j\000\241\000\000\000\000\000\000\000\000\002r\000\241\000\241\000\000\000\000\000\000\000\000\000\000\000\241\000\000\000\000\002zb\000\000\000\000\001\253\000\000\b\142\001\253\000\000\000\000\001\253\000\000\b\150\001\253\003\017\000\000\003\017\003\017\003\017\000\000\001\253\003\017\000\000\000f\001\253\001\249\001\253\002\185\003\017\000\000\000\000\000\000\000\000\001\253\001\253\001\249\001\249\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\253\001\253\001\249\001\253\000\000\000\000\001\249\001\249\001\253\001\249\000\000\000\000\000\000\000\000\b\158\000\000\0016\001\253\001\253\001\253\001\249\000\000\000\000\000\000\000\000\001:\000\000\000\000\000\000\001>\001\249\000\000\001\249\001\249\000\000\001V\001\249\000\000\000\000\000\000\001\249\000\000\001Z\000\n\000\000\000\000\001\249\001\249\000\000\000\000\000\000\000\000\000\000\001\249\000\000\000\000\000\000\001^\000\000\001\154\001\166\001\254\000\000\000\000\002\002\000\000\000\000\001\249\000\000\000\000\000\000\002\014\000\000\001\249\000\000\b\142\001\249\000\000\000\000\001\249\000\000\bb\142\001\245\000\000\000\000\001\245\000\000\bb\142\001\233\000\000\000\000\001\233\000\000\b\150\001\233\000\000\000\000\000\000\000\000\000\000\000\000\001\233\000\000\000\000\000\000\001\233\001\241\001\233\000\000\000\000\000\000\000\000\000\000\000\000\001\233\001\233\001\241\001\241\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\233\001\233\001\241\001\233\000\000\000\000\001\241\001\241\001\233\001\241\000\000\000\000\000\000\000\000\b\158\000\000\000\000\001\233\001\233\001\233\001\241\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\241\000\000\001\241\001\241\000\000\000\000\001\241\000\000\000\000\000\000\001\241\000\000\000\000\000\000\000\000\000\000\001\241\001\241\000\000\000\000\000\000\000\000\000\000\001\241\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\241\000\000\000\000\000\000\000\000\000\000\001\241\000\000\b\142\001\241\000\000\000\000\001\241\000\000\b\150\001\241\000\000\000\000\000\000\000\000\000\000\000\000\001\241\000\000\000\000\000\000\001\241\001\237\001\241\000\000\000\000\000\000\000\000\000\000\000\000\001\241\001\241\001\237\001\237\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\241\001\241\001\237\001\241\000\000\000\000\001\237\001\237\001\241\001\237\000\000\000\000\000\000\000\000\b\158\000\000\000\000\001\241\001\241\001\241\001\237\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\237\000\000\001\237\001\237\000\000\000\000\001\237\000\000\000\000\000\000\001\237\000\000\000\000\000\000\000\000\000\000\001\237\001\237\000\000\000\000\000\000\000\000\000\000\001\237\000\000\000\000\004\249\000\000\000\000\000\000\000\000\004\249\000\000\000\000\000\000\000\000\000\000\001\237\000\000\000\000\000\000\000\000\000\000\001\237\000\000\b\142\001\237\000\000\000\000\001\237\000\000\b\150\001\237\004\249\000\000\000\000\000\000\000\000\000\000\001\237\000\000\000\000\000\000\001\237\000\000\001\237\000\000\017\146\000\000\000\000\000\000\000\006\001\237\001\237\005\006\000\000\000\000\000\000\000\000\016>\000\000\0006\011\018\001\237\001\237\000\000\001\237\000\000\000\000\000\000\004\249\001\237\012\206\000\000\016B\000\000\r\018\b\158\016f\004\249\001\237\001\237\001\237\004\249\000\000\016\147\000\000\000\000\000\000\004\249\000\000\004F\000\000\000\000\000\000\000\000\004\249\004\249\016\151\016\154\r2\016\162\r^\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\254\004\249\000\000\004\249\004\249\004\249\014\026\014*\004\249\000\000\000\000\000\000\000\000\016\190\000\000\004\249\000\000\016\194\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\210\000\000\000\000\000\000\017\006\017\"\000\000\014n\000\000\t1\017*\005.\000\000\014\170\000\000\000\000\014\174\000\000\000\000\t1\t1\t1\007\017\000\000\000\000\017:\000\000\017_\000\000\000\000\t1\000\000\000\000\000\000\t1\t1\015\142\t1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\146\015\154\t1\000\000\000\000\000\000\000\000\000\000\015\158\000\000\000\000\t1\000\000\t1\000\000\000\000\000\000\015\166\015\194\015\210\000\000\t1\000\000\003\146\000\000\000\000\000\000\t1\t1\000\000\000\000\000\000\000\000\000\000\t1\000\000\000\000\000\000\000\000\006V\t1\000\000\004\250\004\254\005\002\000\000\000\000\000\000\000\000\000\000\t1\000\000\000\000\000\000\t1\000\000\000\000\t1\000\000\000\000\t1\000\000\000\000\t1\000\000\000\000\000\000\003\150\006Z\000\000\000\000\003\154\000\000\t1\000\000\005\213\t1\000\000\000\000\000\000\000\000\000\000\000\000\t1\t1\005\213\005\213\005\213\000\254\t1\000\000\000\000\000\000\005\030\t1\t1\005\213\000\000\000\000\000\000\005\213\005\213\t1\005\213\006^\006n\000\000\000\000\t1\000\000\000\000\t1\t1\tt5\005\213\000\000\000\000\000\000\000\000\000\000\000\000\005\213\005\213\t5\t5\t5\000\000\005\213\000\000\000\000\000\000\000\000\005\213\005\213\t5\000\000\000\000\000\000\t5\t5\005\213\t5\000\000\000\000\000\000\000\000\005\213\000\000\000\000\005\213\005\213\005\213\000\000\t5\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t5\000\000\t5\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t5\000\000\000\000\000\000\000\000\000\000\t5\t5\000\000\000\000\003U\000\000\000\000\t5\000\000\000\000\000\000\000\000\000\000\t5\003U\003U\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t5\000\000\003U\000\000\t5\000\000\003U\t5\000\000\003U\t5\000\000\000\000\t5\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t5\000\000\000\000\t5\000\000\000\000\000\000\003U\000\000\003U\t5\t5\000\000\003U\000\000\000\000\t5\003U\000\000\000\000\000\000\t5\t5\003U\003U\000\000\000\000\000\000\003U\t5\003U\000\000\000\000\000\000\000\000\000\222\000\000\000\000\t5\t5\t5\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003U\000\000\000n\003U\000\000\005\221\003U\000\000\000\000\003U\000\000\000\000\000\000\000\000\000\000\005\221\005\221\005\221\000\000\003U\003U\003U\003U\011\142\000\000\000\000\005\221\000\000\000\000\003U\005\221\000\000\000\000\000\000\000\000\000\000\003U\012\n\000\000\000\000\003U\003U\000\000\000\000\000\000\005\221\000\000\000\000\003U\000\000\000\000\000\000\000\000\000\000\005\221\000\000\005\221\003U\003U\003U\000\000\000\000\000\000\000\000\005\221\000\000\000\000\000\000\000\000\000\000\005\221\005\221\000\000\000\000\000\000\001\170\000\000\005\221\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\000\000\000\000n\005\221\000\000\005\225\005\221\000\000\000\000\005\221\000\000\000\000\005\221\000\000\000\000\005\225\005\225\005\225\000\000\000\000\000\000\000\000\005\221\000\000\000\000\005\221\005\225\000\000\000\000\000\000\005\225\000\000\005\221\000\000\000\000\000\000\000\000\000\000\005\221\000\000\005\221\000\000\000n\005\221\005\221\005\225\000\000\000\000\000\000\000\000\000\000\005\221\000\000\000\000\005\225\005\225\005\225\005\225\000\000\000\000\005\221\005\221\005\221\000\000\005\225\000\000\005\225\000\000\000\000\000\000\005\225\005\225\000\000\000\000\000\000\001\170\000\000\005\225\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\225\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\005\225\000\000\005\225\005\225\000\000\000\000\005\225\000\000\000\000\005\225\005\225\000\000\005\225\000\000\000\000\000\000\005\225\005\225\000\000\000\000\000\000\001\170\005\225\005\225\000\000\005\225\000\000\000\000\000\000\000\000\000\000\000\000\005\225\000\000\000\000\000\000\000\000\000\000\005\225\000\nb\229\000\000\000\000\005M\000\000\000\000\000\000\000\000\000\000\000\000\b\229\b\229\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\229\000\000\005M\000\000\b\229\005M\000\000\b\229\005M\000\000\000\000\005M\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005M\000\000\000\000\005M\000\000\000\000\000\000\b\229\000\000\b\229\005M\000\000\000\000\b\229\000\000\000\000\001\198\b\229\000\000\000\000\000\000\005M\005M\b\229\b\229\000\000\000\000\000\000\011\198\005M\b\229\000\000\000\000\000\000\000\000\000\222\000\000\000\000\005M\005M\005M\000\000\000\000\000\000\000\000\000\000\005N\000\000\000\000\000\000\b\229\000\000\000\000\b\229\000\000\004M\b\229\000\000\000\000\b\229\000\000\000\000\000\000\000\000\000\000\004M\004M\000\000\000\000\012~\b\229\b\229\b\229\000\000\000\000\000\000\004M\000\000\000\000\b\229\004M\000\000\000\000\004M\000\000\005V\b\229\000\000\000\000\000\000\b\229\b\229\000\000\000\000\000\000\000\000\000\000\005^\b\229\000\000\000\000\000\000\000\000\000\000\004M\000\000\004M\b\229\b\229\b\229\004M\000\000\000\000\005f\004M\000\000\000\000\000\000\000\000\005n\004M\004M\000\000\000\000\000\000\000\000\000\000\004M\000\000\000\000\005v\000\000\005~\000\000\000\000\005\134\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\t\004M\000\000\003\t\004M\005\142\000\000\004M\000\000\000\000\004M\000\000\000\000\003\t\003\t\000\000\000\000\000\000\000\000\000\000\005\150\004M\004M\004M\003\t\000\000\000\000\005\158\003\t\000\000\004M\005\166\000\000\000\000\000\000\000\000\000\000\011\218\000\000\000\000\000\000\004M\004M\000\000\000\000\000\000\000\000\000\000\000\000\004M\000\000\000\000\003\t\000\000\003\t\000\000\000\000\005\174\004M\004M\004M\000\000\003\t\000\000\006M\000\000\000\000\006M\003\t\003\t\000\000\000\000\000\000\003\t\000\000\003\t\000\000\006M\006M\000\000\000\000\000\000\r\194\000\000\000\000\000\000\000\000\000\000\006M\000\000\000\000\003\t\006M\000\000\000\000\003\t\000\000\000\000\003\t\000\000\000\000\003\t\000\000\000\000\003\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\t\000\000\006M\003\t\006M\000\000\000\000\000\000\000\000\000\000\003\t\000\000\006M\000\000\000\000\001\133\000\000\000\000\006M\006M\001\133\003\t\003\t\006M\001\133\006M\000\000\000\000\000\000\003\t\000\000\000\000\r\194\000\000\000\000\000\000\000\000\000\000\003\t\003\t\003\tb\002\001\137\001\137\000\000\000\000\000\000\000\000\000\000\001\137\000\000\000\000\b\014\000\000\b\026\000\000\000\000\b&\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000n\001\137\000\000\002\201\001\137\b2\000\000\001\137\000\000\000\000\001\137\000\000\000\000\002\201\002\201\000\000\000\000\000\000\000\000\000\000\b>\001\137\011\238\001\137\002\201\000\000\000\000\bJ\002\201\000\000\001\137\bV\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\137\001\137\000\000\000\000\000\000\000\000\000\000\000\000\001\137\000\000\000\000\002\201\000\000\002\201\000\000\000\000\bb\001\137\001\137\001\137\000\000\002\201\000\000\000\000\006U\000\000\000\000\002\201\002\201\006U\000\000\000\000\001\170\001\145\002\201\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nb\142\007]\000\000\000\000\007]\000\000\b\150\007]\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0045\007]\0045\000\000\000\000\000\000\000\000\000\000\007]\000\000\0045\000\000\000\000\000\000\000\000\000\000\0045\0045\000\000\007]\007]\000\000\000\000\0045\000\000\000\000\000\000\007]\000\000\000\000\000\000\000\000\000\000\b\158\000\000\000\000\007]\007]\007]\000\000\000\000\000\000\000\000\0045\000\000\b\142\0045\000\000\000\000\0045\000\000\b\150\0045\000\000\000\000\000\000\002\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0045\002\005\002\005\000\000\000\000\000\000\000\000\0045\000\000\000\000\000\000\000\000\002\005\000\000\000\000\000\000\002\005\000\000\0045\0045\000\000\000\000\000\000\000\000\000\000\000\000\0045\000\000\000\000\002\030\000\000\000\000\b\158\000\000\000\000\0045\0045\0045\000\000\000\000\002\005\000\000\002\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\005\000\000\000\000\000\000\000\000\000\000\002\005\002\005\000\000\000\000\002J\000\000\000\000\002\005\b]\000\000\b]\000\000\002R\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b]\000\000\000\000\002b\000\000\000\000\002\005\000\000\b\142\002\005\000\000\000\000\002\005\b]\b\150\002\005\b]\000\000\000\000\002j\000\000\000\000\000\000\000\000\000\000\002r\000\000\000\000\002\005\000\000\000\000\000\000\000\000\000\000\000\000\002\005\002z\000\000\002Z\000^\000\000\002\130\000\000\000\000\000b\000\000\002\005\002\005\000\000\000\000\000\000\000\000\000\000\000\000\002\005\000\000\000\000\002\138\000\000\000\000\b\158\000\000\000\000\002\005\002\005\002\005\000f\000\000\bm\b]\bm\000\000\002\146\000\000\000\000\b]\000\000\000\000\000\000\002\162\000\000\bm\000\000\b]\000\000\000\000\000\000\000\000\b]\000\000\000\000\000\000\002\030\000\000\bm\000\000\b]\bm\000\000\000\000\000\000\000\000\000\000\0016\002&\000\000\b]\000\000\000\000\002\154\000\000\000\000\001:\000\000\000\000\000\000\001>\000\000\000\000\000\000\000\000\000\000\001V\002J\006\178\000\000\000\000\000\000\000\000\001Z\000\n\002R\000\000\000\000\012\230\012\242\000\000\000\000\000\000\000\000\000\000\000\000\000\209\002\254\001^\000\000\001\154\001\166\001\254\000\000\bm\002\002\000\209\000\209\000\000\000\000\bm\000\000\002\014\002j\000\000\000\000\000\000\000\209\bm\002r\000\000\000\209\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002z\bm\002Z\000\000\000\000\002\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\209\000\000\000\209\000\000\000\000\000\000\002\138\000\000\000\000\000\000\000\209\000\000\rvbe\000\161\be\000\000\002R\000\000\000\000\000\018\000\000\000\000\000\000\000\000\000\000\be\000\000\000\000\002b\000\000\000\000\000\000\000\000\000\161\000\000\000\000\000\161\000\000\be\000\161\000\000\be\000\161\000\000\002j\000\000\000\000\000\000\000\000\000\000\002r\000\000\000\000\000\000\000\000\000\161\000\000\000\000\005\253\000\000\000\000\002z\000\161\002Z\000\000\000\000\002\130\000\000\005\253\005\253\000\000\000\000\000\000\000\161\000\161\000\000\000\000\000\000\000\000\005\253\000\000\000\161\002\138\005\253\000\000\000\000\000\000\000\000\000\000\000\000\000\161\000\161\000\161\000\000\be\000\000\000\000\002\146\000\000\000\000\be\000\000\000\000\000\000\002\162\000\000\000\000\005\253\be\005\253\000\000\000\000\000\000\be\000\000\000\000\000\000\005\253\000\000\000\000\000\000\be\003\253\005\253\005\253\000\000\000\000\000\000\000\000\002&\005\253\000\000\003\253\003\253\002\154\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\253\000\000\000\000\000\nrt!\000\000\t!\000\000\002R\000\222\000\000\000\000\001\017\001\017\001\017\000\000\000\000\t!\000\000\001\029\002b\000\000\001\029\000\000\000\000\001\029\000\000\000\000\001\029\000\000\t!\000\000\000\000\t!\000\000\000\000\002j\000\000\000\000\000\000\000\000\001\029\002r\000\000\000\000\000\000\006\241\000\000\001\029\000\000\000\000\000\000\005!\002z\000\000\002Z\000\000\005!\002\130\001\029\001\029\000\000\000\000\000\000\000\000\000\000\000\000\001\029\000\000\000\000\000\000\000\000\000\000\000\222\002\138\000\000\001\029\001\029\001\029\005!\000\000\000\000\000\000\005!\000\000\006\241\t!\000\000\000\000\002\146\000\000\000\000\t!\000\000\000\000\000\000\002\162\006\241\000\000\000\000\t!\000\000\000\000\000\000\000\000\t!\000\000\000\000\000\000\000\000\000\000\002\030\000\000\006\241\000\000\000\000\005!\000\000\000\000\006\241\000\000\002&\000\000\000\000\000\000\005!\002\154\000\000\000\000\000\000\006\241\000\000\006\241\000\000\007\178\006\241\000\000\000\000\000\000\000\000\000\000\000\000\002J\005!\000\000\000\000\bU\000\000\bU\000\000\002R\006\241\000\000\000\000\000\000\000\000\000\000\002\030\000\000\bU\000\000\005!\002b\000\000\000\000\000\000\006\241\000\000\000\000\000\000\000\000\005!\bU\006\241\000\000\bU\000\000\006\241\002j\000\000\000\000\000\000\000\000\000\000\002r\000\000\000\000\000\000\002J\000\000\000\000\000\000\001\173\000\000\001\173\002z\002R\002Z\000\000\000\000\002\130\000\000\000\000\006\241\000\000\001\173\000\000\000\000\002b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\138\000\000\001\173\000\000\000\000\001\173\002\030\000\000\002j\000\000\000\000\000\000\bU\000\000\002r\002\146\000\000\000\000\bU\000\000\000\000\000\000\002\162\000\000\000\000\002z\bU\002Z\000\000\000\000\002\130\000\000\000\000\000\000\000\000\000\000\000\000\002J\000\000\bU\000\000\b]\000\000\b]\000\000\002R\002\138\002&\000\000\000\000\000\000\000\000\002\154\000\000\b]\000\006\000\000\002b\001\173\000\000\000\000\002\146\000\000\000\000\001\173\0006\011\018\b]\002\162\000\000\b]\000\000\001\173\002j\000\000\000\000\012\206\001\173\000\000\002r\r\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002z\000\000\002Z\002&\000\000\002\130\000\000\000\000\002\154\000\000\000\000\t\162\000\000\000\000\r2\000\000\r^\000\000\000\000\000\000\000\000\002\138\000\000\000\000\r\254\000\000\000\000\000\000\000\000\000\000\014\026\014*\000\000\b]\000\000\000\000\002\146\014B\000\000\b]\000\000\000\000\000\000\002\162\000\000\000\000\000\000\b]\000\000\000\000\000\000\003\146\000\000\000\000\000\000\000\000\000\000\014n\000\000\000\000\014\134\000\000\000\000\014\170\000\000\000\000\014\174\006V\002&\000\000\004\250\004\254\005\002\002\154\000\000\000\000\000^\007\002\007B\001]\006=\000b\006=\000\000\000\000\007N\015\142\000\000\000\000\000\000\000\000\000\000\000\000\006=\000\000\003\150\006Z\015\146\015\154\003\154\000\000\000\000\000\000\000f\000\000\015\158\006=\000\000\000\000\006=\000\000\000\000\000\000\000\000\015\166\015\194\015\210\000\000\000\000\000\000\000\000\005\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006^\006n\000\000\000\000\000\000\000\000\000\000\000\000\0016\000\000\003\166\000\000\000\000\000\000\000\000\000\000\000\000\b\186\000\000\006\213\007n\001>\000\000\000\000\006\213\007\134\000\000\001V\000\000\000\000\006=\000\000\000\000\000\000\001Z\000\n\006=\000\000\000^\000\000\000\000\000\000\000\000\000b\006=\000\000\006\213\000\000\004\145\001^\004\145\001\154\001\166\001\254\000\000\000\000\002\002\007\146\000\000\000\000\000\000\004\145\007\162\002\014\004\221\000f\000\000\006m\003\170\006m\000\000\000\000\000\000\000\000\004\145\006\213\000\000\004\145\000\000\000\000\006m\000\000\000\000\006\213\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\213\006m\0032\000\000\006m\000\000\000\000\000\000\000\000\000\000\0016\000\000\000\000\000\000\000\000\000\000\004\145\000\000\006\213\001:\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006m\006\213\000\n\004\145\000\000\000\000\000\000\000\000\000\000\004\145\000\000\006\213\000\000\000\000\000\000\000\000\000\000\004\145\000\000\000\000\001\254\000\000\006m\000\000\000\000\000\000\000\000\000\000\006m\000\000\002\014\000\000\000\000\000\000\000\000\000\000\006m"))
  
  and lhs =
    (8, "\b~~}}||{{{{zyxwvvutssrrrrrrrrrrrrrrqqpoonnmmlllllllllkkjjjihhgfeeeedddcccba``r\r\r\012\011\n\t\t")
  
  and goto =
    ((16, "\000\143\000\255\000\000\001A\002r\000\000\000\000\000\000\000\000\000\000\002\170\000\000\000\000\000\155\000\000\0009\000K\000\000\000\000\000\234\0007\000\000\004@\000\000\000\000\000\000\000\192\000\000\000\194\000\000\000\000\001X\000\000\003`\000\000\000\000\000\000\000\000\000\206\000\000\000\000\001\204\000\000\000\000\000\143\000\000\000\000\002\230\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003*\000\000\000\000\000\000\000\000\001\218\000\000\000\000\003\222\000\000\000\000\000\000\000\000\003\236\000\000\001\b\002N\000\000\000\000\000\000\000\000\004\142\b\254\001r\000\218\000\187\003<\000\000\000\000\004\154\004\170\004\194\0022\006R\000\000\003j\b\232\000\000\000\000\b\232\001\232\000\000\000\000\000\000\000\000\000\000\004\216\002Z\000\000\004\220\000\011\006\200\000\000\005\224\000\000\000\000\003H\000\000\bX\000\000\000\000\001\228\b\176\000\000\000\000\b\176\000\000\000\000\000\000\000\000\000\000\005\000\000\000\002f\000\000\005\006\000\000\005\016\000\000\000\000\005\022\000\000\005\028\000\000\000\000\bn\000\000\bv\000\000\000\000\000\000\000\000\000\000\005D\000\000\005H\000\000\005N\000\000\005Z\000\000\005\134\000\000\005\142\000\000\005\150\000\000\005\154\000\000\005\158\000\000\005\178\000\000\005\204\000\000\005\214\000\000\005\220\000\000\000\000\000\000\000\000\005\226\000\000\006\b\000\000\000\000\000\000\000\000\006\020\000\000\006\026\000\000\000\000\006\030\000\000\005N\000\000\006F\000\000\000\000\000\000\002\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\162\000\000\000\000\000\000\000\000\000\000\000\000\005\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\004\000\000\000\000\002f\b \000\000\000\000\000\000\006<\000\000\000\000\000\000\000U\003\018\000\000\004N\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\186\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0002\002\142\000\238\000\000\001\246\000\000\000\000\000\000\b\206\000\000\000\000\000\000\t\018\000\000\000\000\001*\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\006T\000\000\000\000\000\000\000\000\000\000\005\132\000\000\000\000\000\000\006Z\000\000\bJ\000\000\000\000\005\198\000\000\000\000\002r\000\000\000\000\000\243\000\000\000\228\001V\000\151\000\000\000\000\001\162\000\000\000\000\000c\000\000\001\210\000\000\000\000\000\000\005\220\000\000\000o\000\000\000\000\000\000\000\000\002\168\005\250\000\000\000\000\001z\000\000\000\000\005\234\000\000\000\000\000\000\000\000\002\192\0058\006\248\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002D\002\228\000\000\000\000\b`\000\000\000\000\000\000\000\000\000\000\002\214\000\000\000\000\000\000\004\148\000\000\005\254\000\000\006d\006\142\000\000\002\164\000\000\006\004\000\000\007\024\000\000\000\000\000\000\t\230\003L\000\000\003\232\000\000\000[\000\000\000\000\006<\006\026\000\000\000\000\006\160\000\000\000\000\000\000\000\000\000\000\004\016\t\208\000\000\000\000\000\000\000\000\0005\000\000\000\000\000\000\001\224\000\000\000\000\000\000\000\000\001\236\000\000\001h\000\000\b|\001\182\000\000\006|\000\000\000\000\000\000\000\000\006x\000\000\000\000\000\142\006\000\000#\000\000\002:\000\000\b|\000\000\000\000\003\230\t\024\000\000\000\000\000\000\000\000\000\000\t\132\006\128\000\000\t\136\000\000\000\164\000\000\003\132\000\000\000\000\000\000\001r\004\130\005\176\000\000\006\146\000\000\t\140\006\206\000\000\000\000\000\000\003\144\000\000\000\000\000\000\b\170\000\000\005J\005v\t@\000\000\000\000\000\011\000\000\000\000\000\000\000\000\t\022\000\000\005\250\tX\000\000\006\026\t\\\000\000\0068\tf\000\000\006~\tp\000\000\006\132\t|\000\000\006\136\t\148\000\000\006\194\t\158\000\000\006\204\t\162\000\000\006\212\t\166\000\000\007\192\t\172\000\000\b\190\t\182\000\000\b\228\t\190\000\000\b\250\006\130\000\000\000\000\000\000\000\000\000\000\000\000\t\144\000\000\t\154\000\000\t\158\000\000\000\000\000\000\000\000\000\000\000\000\001r\000\000\000\000\n\012\b\224\b\248\003\204\003\148\000\000\004\018\000\000\000\000\000\000\004Z\000\000\003\188\000\000\003\202\000\000\006>\000\185\000\000\000\000\000\000\001\b\000\000\0074\000\000\000\000\000\000\002\030\000\000\002b\000\000\b\186\000\000\t\134\000\000\002l\000\000\n\016\000\000\002\158\000\000\n0\000\000\n2\000\000\n4\000\000\n6\000\000\000\000\000\000\000\000\000\000\003\214\000\000\t\246\000\000\000\000\n:\000s\n<\000\000\007F\000\238\003\252\000\000\007^\000\000\000\000\000\000\000\000\000\000\000\000\002\246\000\000\000\000\000\000\005\190\007\134\000\000\t\196\000\000\000\000\t\004\000\000\bx\000\000\n\024\003\228\000\000\003\254\000\000\006\176\004\012\000\000\n(\006\186\000\000\004\026\tv\000\000\nH\006\190\007\004\t\152\n@\000\000\000\000\000\000\002\004\000/\000\000\000\000\000\000\n\142\000\000\n\192\000\000\002\216\000\000\b\164\000\000\000\000\004\250\000\000\000\022\000\000\000\000\000\000\000\000\000\000\n\206\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t6\000\000\nB\000\000\007\162\000\000\nx\t8\000\000\nF\0068\000\000\t>\000\163\nJ\n\b\000\000\007\188\000\000\tF\000\000\nL\000\000\nN\000\000\n\132\000\000\007\198\000\000\tP\000\000\000\000\tR\004:\000\000\007\202\000\000\t^\000\000\000\000\t`\tz\000\000\000\000\011>\0020\000\000\000\000\000\000\000\000\007\208\n\136\000\000\000\000\t\232\t\128\000\000\000\000\000\000\007\254\000\000\000\000\t\140\000\000\t\234\000\000\000\000\000\000\000\000\000\000\000\000\b\004\000\000\000\000\000\000\000\000\nZ\000\000\t\154\003\190\000\000\000\000\t\160\000\000\000\000\004V\000\000\t\168\000\000\000\000\011>\0110\000\000\0118\002P\000\000\t\166\000\000\007\020\007\022\000\000\007\212\000\000\000\000\007\216\000\000\007N\000\000\b\b\000\000\000\000\n`\000\000\nb\000\000\nd\t\218\000\000\b\012\000\000\006\132\000\000\000\000\004J\000\000\t:\000\000\000\000\nh\000\000\nj\t\224\000\000\nn\000\000\000\000\np\000\150\t\142\000\000\001,\000\000\t\170\000\000\000\000\t\180\000\000\t\250\011p\000T\003\002\000\000\000\000\000\000\000\000\007\168\000\000\000\000\000\000\000\000\b\164\000\000\t\226\000\000\000\000\000\000\000\000\b\190\000\000\000\000\000\000\000i\000\240\000\000\001@\000\000\000\000\000\000\001\\\b\140\t\174\000\000\000\000\000\000\002\188\000\000\000\000\n\002\011r\007,\n\030\000\000\b\026\000\000\nv\000\000\004X\000\000\nx\007\230\n \000\000\b>\000\000\000\000\003\132\t\014\000\000\011x\007b\000\000\bB\000\000\000\000\000\000\n|\t\244\000\000\bR\000\000\000\000\000\000\nX\n\202\011\128\007\236\000\000\t\206\000\000\000\000\000\000\n\132\000\000\000\000\0048\n\134\000\000\004b\000\000\000\000\000\000\000\000\b`\n\136\n\"\000\000\bV\000\000\000\000\000\000\000\000\b\194\n\138\007\250\n&\000\000\000\000\007\208\000\000\000\000\bn\003\142\000\000\000\000\bf\000\000\000\000\000\000\b\238\b\128\n\158\000\000\000\000\000\000\000\000\t\184\000\000\b,\000\000\000R\000\000\000\000\000\000\000\000\004\200\000\000\000\000\000\000\n\148\000\000\000\000\nb\000\000\n\150\000\000\n\154\000\000\n\156\n\018\000\000\n\160\000\000\nj\000\000\n\"\011\174\000\000\004h\000\000\000\000\000\000\n\178\000\000\n&\n(\n,\n*\000\000\000\000\000\000\n\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000;\000\000\000\000\000\000\n\220\000\000\000\000\000\000\000\000\000\000\000\000\002t\000\000\011\142\000\000\000\000\000\000\000\000\011\144\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\190\011\152\000\000\000\000\000\000\000\000\000\000\n\146\000\000\nh\000\000\000\000\n\132\t\156\000\000\000\000\000\000\n\208\n\208\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\212\000\000\000\000\n\214\000\000\000\000\000\000\000\000\n\164\n\128\000\000\000\000\n\140\n\220\bP\000\000\004j\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\146\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\000\000\000\000\000\011\174\n\162\000\000\000\000\000\000\004\150\000\000\000\000\000\000\006^\000\000\000\000\000\000\b\242\000\000\000\000\000\000\001\144\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\030\000\000\003p\000\000\000\r\000\000\000\000\000\000"), (16, "\004h\001M\001\159\002\196\004\148\000\247\000\219\000\220\0011\003v\000\249\002y\004\149\004\150\000\004\003\250\000\022\000\023\001\160\004Y\001-\001\159\004\138\000\134\000\222\004\139\000\134\000\222\000\223\000l\001\241\000\223\003\b\003\n\0017\003\011\000T\001\169\004Y\000\140\000\141\000y\000\140\000\141\001N\001\242\001O\001r\001.\002D\001s\001}\002\161\003[\001\161\000\r\002\195\003\250\001\159\001\162\002\241\002\162\000\241\001\195\000\015\000\241\001-\000z\002\163\002\177\000.\001\200\000\227\001\161\001\160\000o\003\250\000\226\001\162\004Z\000\225\000\241\002E\000\215\000{\003\250\003w\003}\0012\004[\000\242\003]\001-\000\242\0015\000\134\0020\002F\004Z\003\127\002z\0021\004\141\000\250\000\210\003\221\000\134\001\214\004[\000\242\001\161\000\140\000\141\002\168\000\210\001\162\000\196\003\251\000\241\001\127\0015\000y\000\140\000\141\000$\001\167\001\168\003\252\004\004\004\007\004\b\004\t\004\n\004\012\004\r\002\168\000$\004\\\004]\004`\000\145\000K\000!\000\145\004a\001\168\000\242\000z\004b\001\170\002{\002\172\001\016\001\n\000|\000o\004\\\004]\004`\003\251\000\022\000\023\004i\004j\000{\001\171\002\168\004b\001\170\003\252\004\004\004c\004\b\004\t\004\n\004\012\004\r\000)\003\251\000\030\000\243\002\176\001\168\000\243\001\171\000(\000L\003\251\003\252\004\004\004c\004\b\004\t\004\n\004\012\004\r\000y\003\252\004\004\000\243\004\b\004\t\004\014\004\012\004\r\001\170\000y\004\142\004\143\000\134\000\197\004\145\000\145\003r\000}\000~\000$\002H\000!\004\137\000y\001\171\000z\000\145\003\220\000\140\000\141\000\207\004\138\000\217\000o\004\139\000z\002I\000|\001\180\000\243\000$\000&\000{\000o\0004\000D\0009\000&\000G\000z\002v\0004\000{\000Q\002\"\002\189\000%\000o\0004\000a\0009\000\210\000G\001\r\003n\000\200\000{\000\134\001\174\001\175\001\176\000;\000<\000\134\001\174\001\178\001\176\001\180\000>\000?\001\181\001\184\001\186\000\140\000\141\000;\000<\001\004\001\n\000\140\000\141\000v\002\179\001\015\000$\001I\001J\000}\003U\0004\001\197\0009\004\138\000G\000$\004\139\001\217\000\134\000\197\002K\001\188\004\141\000|\000C\001:\001-\000$\000x\000$\001\183\001\184\001\186\000|\000\140\000\141\002L\000;\000<\002x\000\145\000_\001\187\000\134\001\174\002P\001\176\000|\000\134\001\174\002V\001\176\000\134\004\027\0018\002\168\002\162\001\019\001\025\000\140\000\141\000_\000b\002\180\000\140\000\141\001M\000_\000\140\000\141\002N\002\243\001\191\000\134\001\174\002Z\001\176\001\026\001\027\002*\002,\001\187\000b\000}\003R\000B\002I\001*\000b\000\140\000\141\000I\000B\000}\003t\000\145\0004\000$\0005\000B\0007\000\145\000\134\001\174\002\169\001\176\001\r\000}\003x\001N\003[\001O\001r\002\168\000\006\003$\001}\001\028\000\140\000\141\0014\000\134\000\197\000;\000<\003~\002\168\004\142\004\143\001v\0004\004\145\0009\001~\000:\000\145\000$\000\140\000\141\0004\000B\0009\000\012\000S\0019\0004\002\172\0009\003\\\000q\000&\000c\000\253\001D\000\238\002\244\000$\000;\000<\001\127\000\145\002|\000$\001{\001)\000\145\000;\000<\000\007\000\145\001P\000c\000;\000<\000\199\002L\001N\000c\001O\001r\001|\000\244\004\138\001}\001\127\004\139\000d\000e\000\134\001\214\000\145\000\b\000!\001\137\000\134\001\214\000\007\000\\\004\144\004\143\001\026\003\147\004\145\003}\000\140\000\141\000d\000h\002\"\004 \000\140\000\141\000d\000\130\000\241\001\022\000\134\000\222\000^\000\145\0004\002?\001+\000\134\000\222\001y\000B\000#\002A\000\134\002h\0027\000\140\000\141\002k\003\203\000\134\000\222\000\145\000\140\000\141\002\139\000\242\000\n\000\254\000\140\000\141\000>\000?\000\134\000\222\001\127\000\140\000\141\002\141\003\021\000\134\000\222\001z\001\202\000B\002\144\000!\000\134\000\222\000\140\000\141\000\245\002\149\000B\000v\000\n\000\140\000\141\0004\000B\0009\001\146\003A\000\140\000\141\0004\000A\0009\001\204\003\138\0004\000$\0009\0004\003\179\0009\000$\003\249\0029\002\168\000z\000)\000\142\000\211\002{\000;\000<\000\134\001\214\000\145\000F\0028\000;\000<\003\204\000\145\000\238\000;\000<\000\212\000;\000<\003\181\000\140\000\141\000\134\000\203\004q\003\208\000\134\004r\000\134\000\193\003\155\002:\003\021\000\243\000\145\001\131\000\134\000\189\000\140\000\141\000\240\000\145\000\140\000\141\000\140\000\141\003\022\000\145\000\134\000\184\001\148\000B\000\140\000\141\000\145\000$\003\209\003\216\000$\000\134\000\183\000\134\000\182\001\130\000\140\000\141\000$\000\145\004\146\004\143\000\213\0028\004\145\000\241\000\145\000\140\000\141\000\140\000\141\000\134\000\177\000\145\000\134\000\176\000|\003\226\001\216\000\134\000\135\002\231\000\134\000\137\001\231\000\134\000\139\000\140\000\141\002\255\000\140\000\141\000\145\000\242\002=\000\140\000\141\000B\000\140\000\141\003\182\000\140\000\141\001\131\000B\000\134\000\150\000\134\000\152\000B\000\134\000\154\000B\000\145\003\027\002;\000\134\000\156\000\219\001p\001\166\000\140\000\141\000\140\000\141\001\221\000\140\000\141\002\174\003\183\003\220\000\145\000\140\000\141\001\131\000\145\002s\000\145\000\134\000\158\003\225\001\241\000\134\000\160\002\194\000\145\000\134\000\162\000\134\000\164\000\134\000\166\000\142\000\211\000\140\000\141\001\243\000\145\000\140\000\141\000\134\000\168\000\140\000\141\000\140\000\141\000\140\000\141\000\145\000\214\000\145\000\022\000\023\000\134\000\170\001q\000\140\000\141\000\134\000\172\001\246\000\134\000\174\000\243\000\134\000\179\002;\000\247\000\145\000\140\000\141\000\145\000\248\004T\000\140\000\141\000\145\000\140\000\141\000\145\000\140\000\141\000\145\000\134\000\181\000l\001'\000\022\000\023\000\134\000\186\002\132\000\134\000\188\000\134\000\191\000\210\001'\002\172\000\140\000\141\001\202\000\145\000\213\000\145\000\140\000\141\000\145\000\140\000\141\000\140\000\141\001'\000\145\000\134\000\195\001\132\001'\000\207\000n\000\208\000\134\001\024\004ul\001;\001'\001\154\001)\000\145\001;\001'\000\145\001'\000\145\002\208\001\206\002\002\001\184\001\186\002\005\001;\002\b\000\242\001+\002C\001)\000\196\000\207\002\192\001\190\000\022\000\023\002\133\000\145\001+\000\134\002J\000o\001;\000$\000\145\000v\000v\000\145\000\134\002q\000t\000\243\002\168\001+\002\011\000\140\000\141\000\\\001+\002\014\000\134\002u\000\210\002\017\000\140\000\141\000$\000\145\003?\001+\002\031\000z\000z\000\145\000v\000\145\000\140\000\141\000b\001\207\000\134\002\129\001\131\001\206\001\202\002\143\001)\001+\002\"\004v\002\147\001)\002\153\001)\000\134\002\202\000\140\000\141\000\196\001;\000z\000\207\000$\002\154\001;\000\145\001;\000\134\002\215\001\205\000\140\000\141\000\134\002\225\000\134\002\233\000\243\000\134\002\248\000\134\003+\000\134\003.\000\140\000\141\001n\001o\003c\000\140\000\141\000\140\000\141\000\210\000\140\000\141\000\140\000\141\000\140\000\141\003B\000$\000$\002\168\001\210\001+\000\134\0032\000\134\003<\001+\000v\001+\000$\001\202\000\134\003\134\000\145\003\181\000|\000|\000v\000\140\000\141\000\140\000\141\000\145\003d\000c\003l\000$\000\140\000\141\000\134\003\144\000\134\003\153\000z\000\145\001\205\000$\000\252\002\020\000\134\003\160\000\134\003\188\000z\000|\000\140\000\141\000\140\000\141\000\134\003\206\000\142\001$\001\206\000\145\000\140\000\141\000\140\000\141\003\131\001\202\003\219\000\134\003\211\000l\000\140\000\141\001v\000\145\000\142\000\143\003n\003\199\000\142\000\143\003,\003)\003o\000\140\000\141\000\146\000\145\000l\001\182\000\144\001\205\000\145\003\190\000\145\003\r\003\n\000\145\003\011\000\145\003\190\000\145\002\136\000\241\000o\000\142\001\235\001x\000$\003\182\0030\000$\003\001\000s\000v\003f\001\b\001\n\000$\003\151\002\255\004y\001\195\002\241\001\019\000\145\000|\000\145\001\206\003m\001\199\000\242\000\142\000\143\000\145\003\222\000|\002\171\003\201\003\220\000w\001%\000\\\002<\000\142\000\143\002\162\000\142\000\202\000\241\001\012\001\n\000\145\002\163\000\145\0025\003g\003\149\000\145\000\142\001\247\000$\000\145\000]\000\145\000$\001\202\003{\003d\001y\003l\002\023\000\145\001\239\001\n\003|\000\145\000\242\001\206\002\134\000\145\001\131\003\191\000$\001\021\000\145\003\141\003\218\003\167\003\191\002\026\001\203\000\142\001\250\000\142\001\253\003\195\003\223\003\225\000\142\002\000\002\029\001z\003i\000\142\002\003\002\028\003C\003j\000$\000\142\002\006\003\192\003\218\002R\002\239\003n\004z\003\214\003\202\003\218\000\243\000\142\002\t\001\r\003\215\003\227\000\142\002\012\000\142\002\015\000\142\002\018\000\145\000\142\002\021\002\172\000$\004R\000\142\002\024\003\021\002\241\000\142\002\027\000\145\000\142\002\131\000\145\002\239\002\239\003\030\003\015\002\239\002\190\003\014\003\154\002\239\001\r\003\007\000\145\000$\002\239\002\239\003\005\003\002\003\217\000\243\0047\002\239\002\239\002\251\002\250\002\188\003h\002\187\003\031\002\241\003?\002\184\002\241\001\r\001\022\002\239\002\241\002\240\002\239\002\183\002\253\002\241\002\241\002 \002\239\000\145\003\004\000\145\002\241\002\241\002\150\002\239\000\145\003\025\002\239\002\158\003\024\000\145\002\239\002\239\003\029\003T\002\241\000\145\002\239\002\241\003W\003g\001\026\003\164\002\133\002\241\001\131\001\026\003\147\000\145\001\026\003\147\002\241\000&\000\145\002\241\000\145\003P\000\145\002\241\002\241\000\145\001\026\003\164\002\165\002\241\000\145\003\204\001\026\004P\000\145\001\026\003\147\000\145\0048\003B\004m\001\n\001\165\001o\002\"\002.\002\"\002-\002\"\002#\002\"\002%\003i\002\167\002\168\002\"\002'\002\"\002)\002\213\002\182\002\"\003&\003Y\001o\002\"\003z\003\129\001o\003\165\003\132\003\142\003\186\002\168\003\196\002\168\004\006\003\216\004Q\002\168\000\254\002\"\003\169\003\246\001o\003\255\001o\002\168\004\001\001o\002T\002\\\002^\002`\002b\002j\002m\002o\002\157\002\156\002\200\003\016\002\207\002\168\002\212\002\219\002\221\002\223\002\246\002\249\002\254\003\006\003\018\003!\0033\0035\0037\0039\003D\003F\003H\003L\003K\003N\003_\003\130\003\136\003\140\003\150\003\157\004V\003\161\003\166\003\173\003\177\003\185\003\194\003\213\002\168\000\196\003\233\003\230\003\235\0043\003\237\003\239\003\240\003\242\001\r\003\170\000\196\000\196\000\196\003\244\000\196\003\247\003\253\004\003\004\002\004\024\004\029\004\"\004.\002\168\004^\004+\0042\004:\003\154\004M\002\168\004@\004=\004D\004G\004L\004o\003\154\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\004"))
  
  and semantic_action =
    [|
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = se_args;
            MenhirLib.EngineTypes.startp = _startpos_se_args_;
            MenhirLib.EngineTypes.endp = _endpos_se_args_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = name;
              MenhirLib.EngineTypes.startp = _startpos_name_;
              MenhirLib.EngineTypes.endp = _endpos_name_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.term list) = Obj.magic xs in
        let se_args : (Squirrelcore.Theory.SE.Parse.t list) = Obj.magic se_args in
        let name : (Squirrelcore.Theory.lsymb) = Obj.magic name in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_name_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let args =
            let l = 
# 241 "<standard.mly>"
    ( xs )
# 940 "src/frontend/parser.ml"
             in
            
# 132 "src/frontend/parser.mly"
                         ( l )
# 945 "src/frontend/parser.ml"
            
          in
          (
# 1203 "src/frontend/parser.mly"
    ( Theory.PPred Theory.{ name; se_args; args; }  )
# 951 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.global_formula_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = se_args;
            MenhirLib.EngineTypes.startp = _startpos_se_args_;
            MenhirLib.EngineTypes.endp = _endpos_se_args_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let se_args : (Squirrelcore.Theory.SE.Parse.t list) = Obj.magic se_args in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let name =
            let x =
              let s = 
# 161 "src/frontend/parser.mly"
                   ( "=" , `Left )
# 1001 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 1006 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 1019 "src/frontend/parser.ml"
            
          in
          (
# 1206 "src/frontend/parser.mly"
    ( Theory.PPred Theory.{ name; se_args; args = [t; t0]; }  )
# 1025 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.global_formula_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = se_args;
            MenhirLib.EngineTypes.startp = _startpos_se_args_;
            MenhirLib.EngineTypes.endp = _endpos_se_args_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let se_args : (Squirrelcore.Theory.SE.Parse.t list) = Obj.magic se_args in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let name =
            let x =
              let s = 
# 162 "src/frontend/parser.mly"
                   ( "<>", `Left )
# 1075 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 1080 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 1093 "src/frontend/parser.ml"
            
          in
          (
# 1206 "src/frontend/parser.mly"
    ( Theory.PPred Theory.{ name; se_args; args = [t; t0]; }  )
# 1099 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.global_formula_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = se_args;
            MenhirLib.EngineTypes.startp = _startpos_se_args_;
            MenhirLib.EngineTypes.endp = _endpos_se_args_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let se_args : (Squirrelcore.Theory.SE.Parse.t list) = Obj.magic se_args in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let name =
            let x =
              let s = 
# 163 "src/frontend/parser.mly"
                   ( "<=", `Left )
# 1149 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 1154 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 1167 "src/frontend/parser.ml"
            
          in
          (
# 1206 "src/frontend/parser.mly"
    ( Theory.PPred Theory.{ name; se_args; args = [t; t0]; }  )
# 1173 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.global_formula_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = se_args;
            MenhirLib.EngineTypes.startp = _startpos_se_args_;
            MenhirLib.EngineTypes.endp = _endpos_se_args_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let se_args : (Squirrelcore.Theory.SE.Parse.t list) = Obj.magic se_args in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let name =
            let x =
              let s = 
# 164 "src/frontend/parser.mly"
                   ( "<" , `Left )
# 1223 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 1228 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 1241 "src/frontend/parser.ml"
            
          in
          (
# 1206 "src/frontend/parser.mly"
    ( Theory.PPred Theory.{ name; se_args; args = [t; t0]; }  )
# 1247 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.global_formula_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = se_args;
            MenhirLib.EngineTypes.startp = _startpos_se_args_;
            MenhirLib.EngineTypes.endp = _endpos_se_args_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let se_args : (Squirrelcore.Theory.SE.Parse.t list) = Obj.magic se_args in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let name =
            let x =
              let s = 
# 165 "src/frontend/parser.mly"
                   ( ">=", `Left )
# 1297 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 1302 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 1315 "src/frontend/parser.ml"
            
          in
          (
# 1206 "src/frontend/parser.mly"
    ( Theory.PPred Theory.{ name; se_args; args = [t; t0]; }  )
# 1321 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.global_formula_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = se_args;
            MenhirLib.EngineTypes.startp = _startpos_se_args_;
            MenhirLib.EngineTypes.endp = _endpos_se_args_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let se_args : (Squirrelcore.Theory.SE.Parse.t list) = Obj.magic se_args in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let name =
            let x =
              let s = 
# 166 "src/frontend/parser.mly"
                   ( ">" , `Left )
# 1371 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 1376 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 1389 "src/frontend/parser.ml"
            
          in
          (
# 1206 "src/frontend/parser.mly"
    ( Theory.PPred Theory.{ name; se_args; args = [t; t0]; }  )
# 1395 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.global_formula_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = se_args;
            MenhirLib.EngineTypes.startp = _startpos_se_args_;
            MenhirLib.EngineTypes.endp = _endpos_se_args_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let se_args : (Squirrelcore.Theory.SE.Parse.t list) = Obj.magic se_args in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let name =
            let x =
              let s = 
# 167 "src/frontend/parser.mly"
                   ( "&&", `Left )
# 1445 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 1450 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 1463 "src/frontend/parser.ml"
            
          in
          (
# 1206 "src/frontend/parser.mly"
    ( Theory.PPred Theory.{ name; se_args; args = [t; t0]; }  )
# 1469 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.global_formula_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = se_args;
            MenhirLib.EngineTypes.startp = _startpos_se_args_;
            MenhirLib.EngineTypes.endp = _endpos_se_args_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let se_args : (Squirrelcore.Theory.SE.Parse.t list) = Obj.magic se_args in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let name =
            let x =
              let s = 
# 168 "src/frontend/parser.mly"
                   ( "||", `Left )
# 1519 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 1524 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 1537 "src/frontend/parser.ml"
            
          in
          (
# 1206 "src/frontend/parser.mly"
    ( Theory.PPred Theory.{ name; se_args; args = [t; t0]; }  )
# 1543 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.global_formula_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = se_args;
            MenhirLib.EngineTypes.startp = _startpos_se_args_;
            MenhirLib.EngineTypes.endp = _endpos_se_args_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = s;
              MenhirLib.EngineTypes.startp = _startpos_s_;
              MenhirLib.EngineTypes.endp = _endpos_s_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let se_args : (Squirrelcore.Theory.SE.Parse.t list) = Obj.magic se_args in
        let s : (
# 19 "src/frontend/parser.mly"
       (string)
# 1585 "src/frontend/parser.ml"
        ) = Obj.magic s in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let name =
            let x =
              let s = 
# 169 "src/frontend/parser.mly"
                   ( s, `Left )
# 1597 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 1602 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos_s_, _startpos_s_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 1615 "src/frontend/parser.ml"
            
          in
          (
# 1206 "src/frontend/parser.mly"
    ( Theory.PPred Theory.{ name; se_args; args = [t; t0]; }  )
# 1621 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.global_formula_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = se_args;
            MenhirLib.EngineTypes.startp = _startpos_se_args_;
            MenhirLib.EngineTypes.endp = _endpos_se_args_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = s;
              MenhirLib.EngineTypes.startp = _startpos_s_;
              MenhirLib.EngineTypes.endp = _endpos_s_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let se_args : (Squirrelcore.Theory.SE.Parse.t list) = Obj.magic se_args in
        let s : (
# 20 "src/frontend/parser.mly"
       (string)
# 1663 "src/frontend/parser.ml"
        ) = Obj.magic s in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let name =
            let x =
              let s = 
# 170 "src/frontend/parser.mly"
                   ( s, `Right )
# 1675 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 1680 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos_s_, _startpos_s_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 1693 "src/frontend/parser.ml"
            
          in
          (
# 1206 "src/frontend/parser.mly"
    ( Theory.PPred Theory.{ name; se_args; args = [t; t0]; }  )
# 1699 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.global_formula_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = se_args;
            MenhirLib.EngineTypes.startp = _startpos_se_args_;
            MenhirLib.EngineTypes.endp = _endpos_se_args_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let se_args : (Squirrelcore.Theory.SE.Parse.t list) = Obj.magic se_args in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let name =
            let x =
              let s = 
# 171 "src/frontend/parser.mly"
                   ( "xor", `Left )
# 1749 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 1754 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 1767 "src/frontend/parser.ml"
            
          in
          (
# 1206 "src/frontend/parser.mly"
    ( Theory.PPred Theory.{ name; se_args; args = [t; t0]; }  )
# 1773 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.global_formula_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = se_args;
            MenhirLib.EngineTypes.startp = _startpos_se_args_;
            MenhirLib.EngineTypes.endp = _endpos_se_args_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let se_args : (Squirrelcore.Theory.SE.Parse.t list) = Obj.magic se_args in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let name =
            let x =
              let s = 
# 172 "src/frontend/parser.mly"
                   ( "=>" , `Left )
# 1823 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 1828 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 1841 "src/frontend/parser.ml"
            
          in
          (
# 1206 "src/frontend/parser.mly"
    ( Theory.PPred Theory.{ name; se_args; args = [t; t0]; }  )
# 1847 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.global_formula_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = se_args;
            MenhirLib.EngineTypes.startp = _startpos_se_args_;
            MenhirLib.EngineTypes.endp = _endpos_se_args_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let se_args : (Squirrelcore.Theory.SE.Parse.t list) = Obj.magic se_args in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let name =
            let x =
              let s = 
# 173 "src/frontend/parser.mly"
                   ( "<=>", `Left )
# 1897 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 1902 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 1915 "src/frontend/parser.ml"
            
          in
          (
# 1206 "src/frontend/parser.mly"
    ( Theory.PPred Theory.{ name; se_args; args = [t; t0]; }  )
# 1921 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.global_formula_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = s;
              MenhirLib.EngineTypes.startp = _startpos_s_;
              MenhirLib.EngineTypes.endp = _endpos_s_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xs : (Squirrelcore.TacticsArgs.simpl_pat list) = Obj.magic xs in
        let s : (Squirrelcore.TacticsArgs.simpl_pat) = Obj.magic s in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let ips =
            let l = 
# 241 "<standard.mly>"
    ( xs )
# 1970 "src/frontend/parser.ml"
             in
            
# 132 "src/frontend/parser.mly"
                         ( l )
# 1975 "src/frontend/parser.ml"
            
          in
          (
# 786 "src/frontend/parser.mly"
                    ( TacticsArgs.And (s :: ips) )
# 1981 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.and_or_pat))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = s;
                MenhirLib.EngineTypes.startp = _startpos_s_;
                MenhirLib.EngineTypes.endp = _endpos_s_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let xs : (Squirrelcore.TacticsArgs.simpl_pat list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let s : (Squirrelcore.TacticsArgs.simpl_pat) = Obj.magic s in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let ips =
            let l = 
# 241 "<standard.mly>"
    ( xs )
# 2037 "src/frontend/parser.ml"
             in
            
# 132 "src/frontend/parser.mly"
                         ( l )
# 2042 "src/frontend/parser.ml"
            
          in
          (
# 788 "src/frontend/parser.mly"
                    ( TacticsArgs.Or  (s :: ips) )
# 2048 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.and_or_pat))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Squirrelcore.TacticsArgs.and_or_pat) = 
# 789 "src/frontend/parser.mly"
                    ( TacticsArgs.Split )
# 2081 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.TacticsArgs.apply_in) = 
# 775 "src/frontend/parser.mly"
              ( None )
# 2099 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = id;
          MenhirLib.EngineTypes.startp = _startpos_id_;
          MenhirLib.EngineTypes.endp = _endpos_id_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_id_ in
        let _v : (Squirrelcore.TacticsArgs.apply_in) = 
# 776 "src/frontend/parser.mly"
              ( Some id )
# 2131 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ip;
          MenhirLib.EngineTypes.startp = _startpos_ip_;
          MenhirLib.EngineTypes.endp = _endpos_ip_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let ip : (Squirrelcore.TacticsArgs.simpl_pat) = Obj.magic ip in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ip_ in
        let _v : (Squirrelcore.TacticsArgs.have_ip) = 
# 928 "src/frontend/parser.mly"
                 ( ([],ip,[]) )
# 2163 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let l : (Squirrelcore.TacticsArgs.naming_pat list) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_l_ in
        let _v =
          let n_ips = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 2196 "src/frontend/parser.ml"
           in
          (
# 838 "src/frontend/parser.mly"
                                     ( n_ips )
# 2201 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.naming_pat list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ei;
          MenhirLib.EngineTypes.startp = _startpos_ei_;
          MenhirLib.EngineTypes.endp = _endpos_ei_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ei : (Squirrelcore.Theory.term) = Obj.magic ei in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ei_ in
        let _endpos = _endpos_ei_ in
        let _v : (Squirrelcore.Theory.equiv) = 
# 1166 "src/frontend/parser.mly"
                            ( [ei] )
# 2227 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = eis;
          MenhirLib.EngineTypes.startp = _startpos_eis_;
          MenhirLib.EngineTypes.endp = _endpos_eis_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ei;
              MenhirLib.EngineTypes.startp = _startpos_ei_;
              MenhirLib.EngineTypes.endp = _endpos_ei_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let eis : (Squirrelcore.Theory.equiv) = Obj.magic eis in
        let _2 : unit = Obj.magic _2 in
        let ei : (Squirrelcore.Theory.term) = Obj.magic ei in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ei_ in
        let _endpos = _endpos_eis_ in
        let _v : (Squirrelcore.Theory.equiv) = 
# 1167 "src/frontend/parser.mly"
                            ( ei::eis )
# 2266 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Squirrelcore.Theory.bnds) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.Theory.bnds) = 
# 296 "src/frontend/parser.mly"
                                  ( _1 )
# 2291 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let l : (Squirrelcore.Theory.bnd list list) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_l_ in
        let _v =
          let l =
            let args = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 2318 "src/frontend/parser.ml"
             in
            
# 278 "src/frontend/parser.mly"
                                        ( List.flatten args )
# 2323 "src/frontend/parser.ml"
            
          in
          (
# 297 "src/frontend/parser.mly"
                                  ( l )
# 2329 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.bnds))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.bnds list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let l =
            let l = 
# 241 "<standard.mly>"
    ( xs )
# 2357 "src/frontend/parser.ml"
             in
            
# 132 "src/frontend/parser.mly"
                         ( l )
# 2362 "src/frontend/parser.ml"
            
          in
          (
# 292 "src/frontend/parser.mly"
                      ( List.flatten l )
# 2368 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.bnds))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.bnd_tagged list list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let l =
            let l = 
# 241 "<standard.mly>"
    ( xs )
# 2396 "src/frontend/parser.ml"
             in
            
# 132 "src/frontend/parser.mly"
                         ( l )
# 2401 "src/frontend/parser.ml"
            
          in
          (
# 327 "src/frontend/parser.mly"
                             ( List.flatten l )
# 2407 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.bnds_tagged))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : ([ `Close | `Open ]) = 
# 1355 "src/frontend/parser.mly"
                     ( `Open )
# 2433 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : ([ `Close | `Open ]) = 
# 1356 "src/frontend/parser.mly"
                     ( `Close )
# 2458 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = info;
          MenhirLib.EngineTypes.startp = _startpos_info_;
          MenhirLib.EngineTypes.endp = _endpos_info_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let info : (Squirrelcore.Theory.lsymb) = Obj.magic info in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_info_ in
        let _endpos = _endpos_info_ in
        let _v : (Squirrelcore.Theory.lsymb) = 
# 484 "src/frontend/parser.mly"
             ( info )
# 2483 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : (Squirrelcore.Theory.lsymb list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let l =
            let l = 
# 241 "<standard.mly>"
    ( xs )
# 2524 "src/frontend/parser.ml"
             in
            
# 132 "src/frontend/parser.mly"
                         ( l )
# 2529 "src/frontend/parser.ml"
            
          in
          (
# 487 "src/frontend/parser.mly"
                                            ( l )
# 2535 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.lsymb list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 488 "src/frontend/parser.mly"
                                            ( [] )
# 2554 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 1348 "src/frontend/parser.mly"
                     ( "-" )
# 2579 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 1349 "src/frontend/parser.mly"
                     ( "+" )
# 2604 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 1350 "src/frontend/parser.mly"
                     ( "*" )
# 2629 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 20 "src/frontend/parser.mly"
       (string)
# 2650 "src/frontend/parser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : (string) = 
# 1351 "src/frontend/parser.mly"
                     ( s )
# 2658 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 19 "src/frontend/parser.mly"
       (string)
# 2679 "src/frontend/parser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : (string) = 
# 1352 "src/frontend/parser.mly"
                     ( s )
# 2687 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Squirrelcore.ProverLib.bulleted_tactics) = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Squirrelcore.ProverLib.bulleted_tactics) = 
# 1359 "src/frontend/parser.mly"
                         ( (ProverLib.Bullet _1) :: _2 )
# 2719 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Squirrelcore.ProverLib.bulleted_tactics) = Obj.magic _2 in
        let _1 : ([ `Close | `Open ]) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Squirrelcore.ProverLib.bulleted_tactics) = 
# 1360 "src/frontend/parser.mly"
                         ( (ProverLib.Brace  _1) :: _2 )
# 2751 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Squirrelcore.ProverTactics.AST.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.ProverLib.bulleted_tactics) = 
# 1361 "src/frontend/parser.mly"
                         ( [ ProverLib.BTactic _1 ] )
# 2776 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.ProverLib.bulleted_tactics) = 
# 1362 "src/frontend/parser.mly"
                         ( [] )
# 2801 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ty : (Squirrelcore.Theory.p_ty) = Obj.magic ty in
        let _2 : unit = Obj.magic _2 in
        let l : (Squirrelcore.Theory.lsymb) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_ty_ in
        let _v : (Squirrelcore.Decl.c_ty) = 
# 471 "src/frontend/parser.mly"
                      ( Decl.{ cty_space = l;
                                      cty_ty    = ty; } )
# 2841 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let l : (Squirrelcore.Decl.c_tys) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_l_ in
        let _v =
          let list = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 2874 "src/frontend/parser.ml"
           in
          (
# 476 "src/frontend/parser.mly"
                                 ( list )
# 2879 "src/frontend/parser.ml"
           : (Squirrelcore.Decl.c_tys))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Decl.c_tys) = 
# 477 "src/frontend/parser.mly"
                                 ( [] )
# 2898 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let l : (Squirrelcore.Theory.lsymb list) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let l = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 2938 "src/frontend/parser.ml"
           in
          (
# 814 "src/frontend/parser.mly"
                                       ( l )
# 2943 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.lsymb list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let t : (Squirrelcore.Theory.p_ty) = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : (Squirrelcore.Theory.p_ty) = 
# 357 "src/frontend/parser.mly"
             ( t )
# 2976 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = b;
              MenhirLib.EngineTypes.startp = _startpos_b_;
              MenhirLib.EngineTypes.endp = _endpos_b_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _3 : unit = Obj.magic _3 in
        let b : (Squirrelcore.Theory.term) = Obj.magic b in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : (Squirrelcore.Theory.term * Squirrelcore.Theory.term) = 
# 891 "src/frontend/parser.mly"
                               ( (b,t) )
# 3022 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = extra;
            MenhirLib.EngineTypes.startp = _startpos_extra_;
            MenhirLib.EngineTypes.endp = _endpos_extra_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = term;
              MenhirLib.EngineTypes.startp = _startpos_term_;
              MenhirLib.EngineTypes.endp = _endpos_term_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = glob_sample;
                  MenhirLib.EngineTypes.startp = _startpos_glob_sample_;
                  MenhirLib.EngineTypes.endp = _endpos_glob_sample_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let extra : ((Squirrelcore.Theory.bnds * Squirrelcore.Theory.term) option) = Obj.magic extra in
        let term : (Squirrelcore.Theory.term) = Obj.magic term in
        let _3 : unit = Obj.magic _3 in
        let glob_sample : (Squirrelcore.Theory.lsymb) = Obj.magic glob_sample in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Squirrelcore.TacticsArgs.crypto_arg) = 
# 952 "src/frontend/parser.mly"
    ( let bnds, cond = Utils.omap_dflt (None,None) (fun (x,y) -> Some x, Some y) extra in
      TacticsArgs.{glob_sample ; term; bnds; cond; } )
# 3083 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = term;
          MenhirLib.EngineTypes.startp = _startpos_term_;
          MenhirLib.EngineTypes.endp = _endpos_term_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = bnds;
              MenhirLib.EngineTypes.startp = _startpos_bnds_;
              MenhirLib.EngineTypes.endp = _endpos_bnds_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let term : (Squirrelcore.Theory.term) = Obj.magic term in
        let _3 : unit = Obj.magic _3 in
        let bnds : (Squirrelcore.Theory.bnds) = Obj.magic bnds in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_term_ in
        let _v : (Squirrelcore.Theory.bnds * Squirrelcore.Theory.term) = 
# 948 "src/frontend/parser.mly"
                                         ( bnds, term )
# 3129 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Decl.declaration_i) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let ldecl =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 3162 "src/frontend/parser.ml"
            
          in
          (
# 633 "src/frontend/parser.mly"
                                          ( ldecl )
# 3168 "src/frontend/parser.ml"
           : (Squirrelcore.Decl.declaration))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ctys;
          MenhirLib.EngineTypes.startp = _startpos_ctys_;
          MenhirLib.EngineTypes.endp = _endpos_ctys_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ctys : (Squirrelcore.Decl.c_tys) = Obj.magic ctys in
        let e : (Squirrelcore.Theory.lsymb) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ctys_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 526 "src/frontend/parser.mly"
                          ( Decl.Decl_hash (e, None, ctys) )
# 3208 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = e;
                MenhirLib.EngineTypes.startp = _startpos_e_;
                MenhirLib.EngineTypes.endp = _endpos_e_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let f : (Squirrelcore.Theory.term) = Obj.magic f in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let e : (Squirrelcore.Theory.lsymb) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_f_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 529 "src/frontend/parser.mly"
                          ( Decl.Decl_hash (e, Some f, []) )
# 3261 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ctys;
          MenhirLib.EngineTypes.startp = _startpos_ctys_;
          MenhirLib.EngineTypes.endp = _endpos_ctys_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = p;
            MenhirLib.EngineTypes.startp = _startpos_p_;
            MenhirLib.EngineTypes.endp = _endpos_p_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = e;
                    MenhirLib.EngineTypes.startp = _startpos_e_;
                    MenhirLib.EngineTypes.endp = _endpos_e_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let ctys : (Squirrelcore.Decl.c_tys) = Obj.magic ctys in
        let p : (Squirrelcore.Theory.lsymb) = Obj.magic p in
        let _5 : unit = Obj.magic _5 in
        let d : (Squirrelcore.Theory.lsymb) = Obj.magic d in
        let _3 : unit = Obj.magic _3 in
        let e : (Squirrelcore.Theory.lsymb) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ctys_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 532 "src/frontend/parser.mly"
                          ( Decl.Decl_aenc (e, d, p, ctys) )
# 3328 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ctys;
          MenhirLib.EngineTypes.startp = _startpos_ctys_;
          MenhirLib.EngineTypes.endp = _endpos_ctys_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = e;
                MenhirLib.EngineTypes.startp = _startpos_e_;
                MenhirLib.EngineTypes.endp = _endpos_e_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let ctys : (Squirrelcore.Decl.c_tys) = Obj.magic ctys in
        let d : (Squirrelcore.Theory.lsymb) = Obj.magic d in
        let _3 : unit = Obj.magic _3 in
        let e : (Squirrelcore.Theory.lsymb) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ctys_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 535 "src/frontend/parser.mly"
                          ( Decl.Decl_senc (e, d, ctys) )
# 3381 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = h;
          MenhirLib.EngineTypes.startp = _startpos_h_;
          MenhirLib.EngineTypes.endp = _endpos_h_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = e;
                    MenhirLib.EngineTypes.startp = _startpos_e_;
                    MenhirLib.EngineTypes.endp = _endpos_e_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let h : (Squirrelcore.Theory.lsymb) = Obj.magic h in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let d : (Squirrelcore.Theory.lsymb) = Obj.magic d in
        let _3 : unit = Obj.magic _3 in
        let e : (Squirrelcore.Theory.lsymb) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_h_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 538 "src/frontend/parser.mly"
                          ( Decl.Decl_senc_w_join_hash (e, d, h) )
# 3448 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ctys;
          MenhirLib.EngineTypes.startp = _startpos_ctys_;
          MenhirLib.EngineTypes.endp = _endpos_ctys_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = p;
            MenhirLib.EngineTypes.startp = _startpos_p_;
            MenhirLib.EngineTypes.endp = _endpos_p_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = c;
                MenhirLib.EngineTypes.startp = _startpos_c_;
                MenhirLib.EngineTypes.endp = _endpos_c_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = s;
                    MenhirLib.EngineTypes.startp = _startpos_s_;
                    MenhirLib.EngineTypes.endp = _endpos_s_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let ctys : (Squirrelcore.Decl.c_tys) = Obj.magic ctys in
        let p : (Squirrelcore.Theory.lsymb) = Obj.magic p in
        let _5 : unit = Obj.magic _5 in
        let c : (Squirrelcore.Theory.lsymb) = Obj.magic c in
        let _3 : unit = Obj.magic _3 in
        let s : (Squirrelcore.Theory.lsymb) = Obj.magic s in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ctys_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 541 "src/frontend/parser.mly"
                          ( Decl.Decl_sign (s, c, p, None, ctys) )
# 3515 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = p;
                MenhirLib.EngineTypes.startp = _startpos_p_;
                MenhirLib.EngineTypes.endp = _endpos_p_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = c;
                    MenhirLib.EngineTypes.startp = _startpos_c_;
                    MenhirLib.EngineTypes.endp = _endpos_c_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = s;
                        MenhirLib.EngineTypes.startp = _startpos_s_;
                        MenhirLib.EngineTypes.endp = _endpos_s_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let f : (Squirrelcore.Theory.term) = Obj.magic f in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let p : (Squirrelcore.Theory.lsymb) = Obj.magic p in
        let _5 : unit = Obj.magic _5 in
        let c : (Squirrelcore.Theory.lsymb) = Obj.magic c in
        let _3 : unit = Obj.magic _3 in
        let s : (Squirrelcore.Theory.lsymb) = Obj.magic s in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_f_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 545 "src/frontend/parser.mly"
                          ( Decl.Decl_sign (s, c, p, Some f, []) )
# 3596 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ctys;
          MenhirLib.EngineTypes.startp = _startpos_ctys_;
          MenhirLib.EngineTypes.endp = _endpos_ctys_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ei;
            MenhirLib.EngineTypes.startp = _startpos_ei_;
            MenhirLib.EngineTypes.endp = _endpos_ei_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = g;
                MenhirLib.EngineTypes.startp = _startpos_g_;
                MenhirLib.EngineTypes.endp = _endpos_g_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = h;
                  MenhirLib.EngineTypes.startp = _startpos_h_;
                  MenhirLib.EngineTypes.endp = _endpos_h_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let ctys : (Squirrelcore.Decl.c_tys) = Obj.magic ctys in
        let ei : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb) = Obj.magic ei in
        let _3 : unit = Obj.magic _3 in
        let g : (Squirrelcore.Theory.lsymb) = Obj.magic g in
        let h : (Squirrelcore.Symbols.dh_hyp list) = Obj.magic h in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_h_ in
        let _endpos = _endpos_ctys_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 548 "src/frontend/parser.mly"
    ( let e, f_info = ei in
      Decl.Decl_dh (h, g, (f_info, e), None, ctys) )
# 3650 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ctys;
          MenhirLib.EngineTypes.startp = _startpos_ctys_;
          MenhirLib.EngineTypes.endp = _endpos_ctys_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = mm;
            MenhirLib.EngineTypes.startp = _startpos_mm_;
            MenhirLib.EngineTypes.endp = _endpos_mm_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ei;
                MenhirLib.EngineTypes.startp = _startpos_ei_;
                MenhirLib.EngineTypes.endp = _endpos_ei_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = g;
                    MenhirLib.EngineTypes.startp = _startpos_g_;
                    MenhirLib.EngineTypes.endp = _endpos_g_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = h;
                      MenhirLib.EngineTypes.startp = _startpos_h_;
                      MenhirLib.EngineTypes.endp = _endpos_h_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let ctys : (Squirrelcore.Decl.c_tys) = Obj.magic ctys in
        let mm : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb) = Obj.magic mm in
        let _5 : unit = Obj.magic _5 in
        let ei : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb) = Obj.magic ei in
        let _3 : unit = Obj.magic _3 in
        let g : (Squirrelcore.Theory.lsymb) = Obj.magic g in
        let h : (Squirrelcore.Symbols.dh_hyp list) = Obj.magic h in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_h_ in
        let _endpos = _endpos_ctys_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 552 "src/frontend/parser.mly"
    ( let e, f_info = ei in
      let m, m_info = mm in
      Decl.Decl_dh (h, g, (f_info, e), Some (m_info, m), ctys) )
# 3719 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let ty : (Squirrelcore.Theory.p_ty) = Obj.magic ty in
        let _3 : unit = Obj.magic _3 in
        let e : (Squirrelcore.Theory.lsymb) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ty_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 557 "src/frontend/parser.mly"
                          ( Decl.Decl_name (e, ty) )
# 3765 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = a_arity;
          MenhirLib.EngineTypes.startp = _startpos_a_arity_;
          MenhirLib.EngineTypes.endp = _endpos_a_arity_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let a_arity : (int) = Obj.magic a_arity in
        let _3 : unit = Obj.magic _3 in
        let e : (Squirrelcore.Theory.lsymb) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_a_arity_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 560 "src/frontend/parser.mly"
                          ( Decl.Decl_action { a_name = e; a_arity; } )
# 3811 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = infos;
          MenhirLib.EngineTypes.startp = _startpos_infos_;
          MenhirLib.EngineTypes.endp = _endpos_infos_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let infos : (Squirrelcore.Theory.lsymb list) = Obj.magic infos in
        let e : (Squirrelcore.Theory.lsymb) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_infos_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 563 "src/frontend/parser.mly"
                          ( Decl.Decl_bty { bty_name = e; bty_infos = infos; } )
# 3850 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = a;
              MenhirLib.EngineTypes.startp = _startpos_a_;
              MenhirLib.EngineTypes.endp = _endpos_a_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = e;
                MenhirLib.EngineTypes.startp = _startpos_e_;
                MenhirLib.EngineTypes.endp = _endpos_e_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let t : (Squirrelcore.Theory.p_ty) = Obj.magic t in
        let _4 : unit = Obj.magic _4 in
        let a : (Squirrelcore.Theory.lsymb list) = Obj.magic a in
        let e : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 566 "src/frontend/parser.mly"
    ( let symb_type, name = e in
      Decl.(Decl_abstract
              { name      = name;
                symb_type = symb_type;
                ty_args   = a;
                abs_tys   = t; }) )
# 3908 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = simpl_args;
            MenhirLib.EngineTypes.startp = _startpos_simpl_args_;
            MenhirLib.EngineTypes.endp = _endpos_simpl_args_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = multi_args;
              MenhirLib.EngineTypes.startp = _startpos_multi_args_;
              MenhirLib.EngineTypes.endp = _endpos_multi_args_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = tyargs;
                      MenhirLib.EngineTypes.startp = _startpos_tyargs_;
                      MenhirLib.EngineTypes.endp = _endpos_tyargs_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = e;
                        MenhirLib.EngineTypes.startp = _startpos_e_;
                        MenhirLib.EngineTypes.endp = _endpos_e_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let body : (Squirrelcore.Theory.global_formula option) = Obj.magic body in
        let simpl_args : (Squirrelcore.Theory.bnds) = Obj.magic simpl_args in
        let multi_args : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.bnds) list) = Obj.magic multi_args in
        let _3 : unit = Obj.magic _3 in
        let xs : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.lsymb list) list) = Obj.magic xs in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let tyargs : (Squirrelcore.Theory.lsymb list) = Obj.magic tyargs in
        let e : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_body_ in
        let _v =
          let sebnds =
            let ids =
              let l = 
# 241 "<standard.mly>"
    ( xs )
# 3992 "src/frontend/parser.ml"
               in
              
# 132 "src/frontend/parser.mly"
                         ( l )
# 3997 "src/frontend/parser.ml"
              
            in
            
# 466 "src/frontend/parser.mly"
                                        ( ids )
# 4003 "src/frontend/parser.ml"
            
          in
          (
# 579 "src/frontend/parser.mly"
    ( let symb_type, name = e in
      Decl.(Decl_predicate
              { pred_name       = name;
                pred_symb_type  = symb_type;
                pred_tyargs     = tyargs;
                pred_se_args    = sebnds;
                pred_multi_args = multi_args;
                pred_simpl_args = simpl_args;
                pred_body       = body; }) )
# 4017 "src/frontend/parser.ml"
           : (Squirrelcore.Decl.declaration_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = tyo;
              MenhirLib.EngineTypes.startp = _startpos_tyo_;
              MenhirLib.EngineTypes.endp = _endpos_tyo_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = args;
                MenhirLib.EngineTypes.startp = _startpos_args_;
                MenhirLib.EngineTypes.endp = _endpos_args_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = tyargs;
                  MenhirLib.EngineTypes.startp = _startpos_tyargs_;
                  MenhirLib.EngineTypes.endp = _endpos_tyargs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = e;
                    MenhirLib.EngineTypes.startp = _startpos_e_;
                    MenhirLib.EngineTypes.endp = _endpos_e_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _6 : unit = Obj.magic _6 in
        let tyo : (Squirrelcore.Theory.p_ty option) = Obj.magic tyo in
        let args : (Squirrelcore.Theory.ext_bnds) = Obj.magic args in
        let tyargs : (Squirrelcore.Theory.lsymb list) = Obj.magic tyargs in
        let e : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 590 "src/frontend/parser.mly"
    ( let symb_type, name = e in
      Decl.(Decl_operator
              { op_name      = name;
                op_symb_type = symb_type;
                op_tyargs    = tyargs;
                op_args      = args;
                op_tyout     = tyo;
                op_body      = t; }) )
# 4092 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = init_body;
          MenhirLib.EngineTypes.startp = _startpos_init_body_;
          MenhirLib.EngineTypes.endp = _endpos_init_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = out_ty;
              MenhirLib.EngineTypes.startp = _startpos_out_ty_;
              MenhirLib.EngineTypes.endp = _endpos_out_ty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = args;
                MenhirLib.EngineTypes.startp = _startpos_args_;
                MenhirLib.EngineTypes.endp = _endpos_args_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = name;
                  MenhirLib.EngineTypes.startp = _startpos_name_;
                  MenhirLib.EngineTypes.endp = _endpos_name_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let init_body : (Squirrelcore.Theory.term) = Obj.magic init_body in
        let _5 : unit = Obj.magic _5 in
        let out_ty : (Squirrelcore.Theory.p_ty option) = Obj.magic out_ty in
        let args : (Squirrelcore.Theory.bnds) = Obj.magic args in
        let name : (Squirrelcore.Theory.lsymb) = Obj.magic name in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_init_body_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 600 "src/frontend/parser.mly"
                          ( Decl.Decl_state {name; args; out_ty; init_body; })
# 4152 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (Squirrelcore.Theory.lsymb) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 602 "src/frontend/parser.mly"
                          ( Decl.Decl_channel e )
# 4184 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = proc;
          MenhirLib.EngineTypes.startp = _startpos_proc_;
          MenhirLib.EngineTypes.endp = _endpos_proc_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = args;
              MenhirLib.EngineTypes.startp = _startpos_args_;
              MenhirLib.EngineTypes.endp = _endpos_args_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = id;
                MenhirLib.EngineTypes.startp = _startpos_id_;
                MenhirLib.EngineTypes.endp = _endpos_id_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let proc : (Squirrelcore.Process.Parse.t) = Obj.magic proc in
        let _5 : unit = Obj.magic _5 in
        let args : (Squirrelcore.Theory.bnds) = Obj.magic args in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_proc_ in
        let _v =
          let projs = 
# 499 "src/frontend/parser.mly"
                                      ( None )
# 4238 "src/frontend/parser.ml"
           in
          (
# 605 "src/frontend/parser.mly"
                          ( Decl.Decl_process {id; projs; args; proc} )
# 4243 "src/frontend/parser.ml"
           : (Squirrelcore.Decl.declaration_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = proc;
          MenhirLib.EngineTypes.startp = _startpos_proc_;
          MenhirLib.EngineTypes.endp = _endpos_proc_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = args;
              MenhirLib.EngineTypes.startp = _startpos_args_;
              MenhirLib.EngineTypes.endp = _endpos_args_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = id;
                      MenhirLib.EngineTypes.startp = _startpos_id_;
                      MenhirLib.EngineTypes.endp = _endpos_id_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let proc : (Squirrelcore.Process.Parse.t) = Obj.magic proc in
        let _5 : unit = Obj.magic _5 in
        let args : (Squirrelcore.Theory.bnds) = Obj.magic args in
        let _3 : unit = Obj.magic _3 in
        let xs : (Squirrelcore.Theory.lsymb list) = Obj.magic xs in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_proc_ in
        let _v =
          let projs =
            let l =
              let l = 
# 241 "<standard.mly>"
    ( xs )
# 4321 "src/frontend/parser.ml"
               in
              
# 132 "src/frontend/parser.mly"
                         ( l )
# 4326 "src/frontend/parser.ml"
              
            in
            
# 500 "src/frontend/parser.mly"
                                      ( Some l )
# 4332 "src/frontend/parser.ml"
            
          in
          (
# 605 "src/frontend/parser.mly"
                          ( Decl.Decl_process {id; projs; args; proc} )
# 4338 "src/frontend/parser.ml"
           : (Squirrelcore.Decl.declaration_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let s : (Squirrelcore.Goal.Parsed.t) = Obj.magic s in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_s_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 607 "src/frontend/parser.mly"
                                  ( Decl.Decl_axiom s )
# 4371 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let s : (Squirrelcore.Goal.Parsed.t) = Obj.magic s in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_s_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 608 "src/frontend/parser.mly"
                                  ( Decl.Decl_axiom s )
# 4410 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let s : (Squirrelcore.Goal.Parsed.t) = Obj.magic s in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_s_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 609 "src/frontend/parser.mly"
                                  ( Decl.Decl_axiom s )
# 4449 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let p : (Squirrelcore.Process.Parse.t) = Obj.magic p in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_p_ in
        let _v =
          let sprojs = 
# 499 "src/frontend/parser.mly"
                                      ( None )
# 4482 "src/frontend/parser.ml"
           in
          (
# 612 "src/frontend/parser.mly"
                          ( Decl.(Decl_system { sname = None;
                                                sprojs;
                                                sprocess = p}) )
# 4489 "src/frontend/parser.ml"
           : (Squirrelcore.Decl.declaration_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let p : (Squirrelcore.Process.Parse.t) = Obj.magic p in
        let _3 : unit = Obj.magic _3 in
        let xs : (Squirrelcore.Theory.lsymb list) = Obj.magic xs in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_p_ in
        let _v =
          let sprojs =
            let l =
              let l = 
# 241 "<standard.mly>"
    ( xs )
# 4546 "src/frontend/parser.ml"
               in
              
# 132 "src/frontend/parser.mly"
                         ( l )
# 4551 "src/frontend/parser.ml"
              
            in
            
# 500 "src/frontend/parser.mly"
                                      ( Some l )
# 4557 "src/frontend/parser.ml"
            
          in
          (
# 612 "src/frontend/parser.mly"
                          ( Decl.(Decl_system { sname = None;
                                                sprojs;
                                                sprocess = p}) )
# 4565 "src/frontend/parser.ml"
           : (Squirrelcore.Decl.declaration_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = id;
              MenhirLib.EngineTypes.startp = _startpos_id_;
              MenhirLib.EngineTypes.endp = _endpos_id_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let p : (Squirrelcore.Process.Parse.t) = Obj.magic p in
        let _4 : unit = Obj.magic _4 in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_p_ in
        let _v =
          let sprojs = 
# 499 "src/frontend/parser.mly"
                                      ( None )
# 4620 "src/frontend/parser.ml"
           in
          (
# 617 "src/frontend/parser.mly"
                          ( Decl.(Decl_system { sname = Some id;
                                                sprojs;
                                                sprocess = p}) )
# 4627 "src/frontend/parser.ml"
           : (Squirrelcore.Decl.declaration_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = id;
                    MenhirLib.EngineTypes.startp = _startpos_id_;
                    MenhirLib.EngineTypes.endp = _endpos_id_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let p : (Squirrelcore.Process.Parse.t) = Obj.magic p in
        let _3 : unit = Obj.magic _3 in
        let xs : (Squirrelcore.Theory.lsymb list) = Obj.magic xs in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _4 : unit = Obj.magic _4 in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_p_ in
        let _v =
          let sprojs =
            let l =
              let l = 
# 241 "<standard.mly>"
    ( xs )
# 4705 "src/frontend/parser.ml"
               in
              
# 132 "src/frontend/parser.mly"
                         ( l )
# 4710 "src/frontend/parser.ml"
              
            in
            
# 500 "src/frontend/parser.mly"
                                      ( Some l )
# 4716 "src/frontend/parser.ml"
            
          in
          (
# 617 "src/frontend/parser.mly"
                          ( Decl.(Decl_system { sname = Some id;
                                                sprojs;
                                                sprocess = p}) )
# 4724 "src/frontend/parser.ml"
           : (Squirrelcore.Decl.declaration_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = modifier;
          MenhirLib.EngineTypes.startp = _startpos_modifier_;
          MenhirLib.EngineTypes.endp = _endpos_modifier_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = from_sys;
              MenhirLib.EngineTypes.startp = _startpos_from_sys_;
              MenhirLib.EngineTypes.endp = _endpos_from_sys_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = id;
                  MenhirLib.EngineTypes.startp = _startpos_id_;
                  MenhirLib.EngineTypes.endp = _endpos_id_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let modifier : (Squirrelcore.Decl.global_rule) = Obj.magic modifier in
        let _5 : unit = Obj.magic _5 in
        let from_sys : (Squirrelcore.SystemExpr.Parse.t) = Obj.magic from_sys in
        let _3 : unit = Obj.magic _3 in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_modifier_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 622 "src/frontend/parser.mly"
    ( Decl.(Decl_system_modifier
              { from_sys = from_sys;
                modifier;
                name = id}) )
# 4788 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = g;
          MenhirLib.EngineTypes.startp = _startpos_g_;
          MenhirLib.EngineTypes.endp = _endpos_g_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let g : (Squirrelcore.Crypto.Parse.game_decl) = Obj.magic g in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_g_ in
        let _endpos = _endpos_g_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 627 "src/frontend/parser.mly"
          ( Decl.Decl_game g )
# 4813 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = decl;
          MenhirLib.EngineTypes.startp = _startpos_decl_;
          MenhirLib.EngineTypes.endp = _endpos_decl_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let decl : (Squirrelcore.Decl.declaration) = Obj.magic decl in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_decl_ in
        let _endpos = _endpos_decl_ in
        let _v : (Squirrelcore.Decl.declarations) = 
# 639 "src/frontend/parser.mly"
                                          ( [decl] )
# 4838 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = decl;
          MenhirLib.EngineTypes.startp = _startpos_decl_;
          MenhirLib.EngineTypes.endp = _endpos_decl_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let decl : (Squirrelcore.Decl.declaration_i L.located) = Obj.magic decl in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_decl_ in
        let _endpos = _endpos_decl_ in
        let _v : (Squirrelcore.Decl.declarations) = 
# 640 "src/frontend/parser.mly"
                                          ( [decl] )
# 4863 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = decls;
          MenhirLib.EngineTypes.startp = _startpos_decls_;
          MenhirLib.EngineTypes.endp = _endpos_decls_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = decl;
            MenhirLib.EngineTypes.startp = _startpos_decl_;
            MenhirLib.EngineTypes.endp = _endpos_decl_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let decls : (Squirrelcore.Decl.declarations) = Obj.magic decls in
        let decl : (Squirrelcore.Decl.declaration) = Obj.magic decl in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_decl_ in
        let _endpos = _endpos_decls_ in
        let _v : (Squirrelcore.Decl.declarations) = 
# 641 "src/frontend/parser.mly"
                                          ( decl :: decls )
# 4895 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Decl.declaration_i) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let ldecl =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 4928 "src/frontend/parser.ml"
            
          in
          (
# 636 "src/frontend/parser.mly"
                                          ( ldecl )
# 4934 "src/frontend/parser.ml"
           : (Squirrelcore.Decl.declaration_i L.located))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Squirrelcore.ProverTactics.AST.t) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Squirrelcore.Theory.lsymb) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Squirrelcore.Decl.declaration_i) = 
# 630 "src/frontend/parser.mly"
                                          ( Decl.Tactic (_2,_4) )
# 4981 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = decls;
            MenhirLib.EngineTypes.startp = _startpos_decls_;
            MenhirLib.EngineTypes.endp = _endpos_decls_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let decls : (Squirrelcore.Decl.declarations) = Obj.magic decls in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_decls_ in
        let _endpos = _endpos__2_ in
        let _v : (Squirrelcore.Decl.declarations) = 
# 644 "src/frontend/parser.mly"
                             ( decls )
# 5013 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.Symbols.dh_hyp) = 
# 144 "src/frontend/parser.mly"
      ( Symbols.DH_DDH )
# 5038 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.Symbols.dh_hyp) = 
# 145 "src/frontend/parser.mly"
      ( Symbols.DH_CDH )
# 5063 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.Symbols.dh_hyp) = 
# 146 "src/frontend/parser.mly"
      ( Symbols.DH_GDH )
# 5088 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let l : (Squirrelcore.Symbols.dh_hyp list) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_l_ in
        let _v =
          let l = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 5114 "src/frontend/parser.ml"
           in
          (
# 149 "src/frontend/parser.mly"
                           ( l )
# 5119 "src/frontend/parser.ml"
           : (Squirrelcore.Symbols.dh_hyp list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (unit) = 
# 963 "src/frontend/parser.mly"
  ( Feedback.disable_keywords_as_ids () )
# 5138 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let _endpos = _endpos__0_ in
          let _startpos = _endpos__0_ in
          (
# 412 "src/frontend/parser.mly"
                                 ( let loc = L.make _startpos _endpos in
                                   L.mk_loc loc Process.Parse.Null )
# 5160 "src/frontend/parser.ml"
           : (Squirrelcore.Process.Parse.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let p : (Squirrelcore.Process.Parse.t) = Obj.magic p in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_p_ in
        let _v : (Squirrelcore.Process.Parse.t) = 
# 414 "src/frontend/parser.mly"
                                 ( p )
# 5193 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (unit) = 
# 961 "src/frontend/parser.mly"
  ( Feedback.enable_keywords_as_ids () )
# 5211 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let t : ([ `Expand of Squirrelcore.Theory.lsymb | `ExpandAll of L.t ]) = Obj.magic t in
        let x : ([ `LeftToRight | `RightToLeft ]) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_t_ in
        let _v =
          let d =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 5251 "src/frontend/parser.ml"
            
          in
          (
# 748 "src/frontend/parser.mly"
                              ( TacticsArgs.{ rw_mult = TacticsArgs.Once;
                                              rw_dir = d;
                                              rw_type = t; } )
# 5259 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.expnd_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let s : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb) = Obj.magic s in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_s_ in
        let _v : ([ `Expand of Squirrelcore.Theory.lsymb | `ExpandAll of L.t ]) = 
# 734 "src/frontend/parser.mly"
                        ( `Expand (snd s) )
# 5292 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let l =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 5329 "src/frontend/parser.ml"
            
          in
          (
# 735 "src/frontend/parser.mly"
                        ( `ExpandAll l )
# 5335 "src/frontend/parser.ml"
           : ([ `Expand of Squirrelcore.Theory.lsymb | `ExpandAll of L.t ]))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Squirrelcore.Theory.ext_bnds) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.Theory.ext_bnds) = 
# 343 "src/frontend/parser.mly"
                                   ( _1 )
# 5361 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = v;
              MenhirLib.EngineTypes.startp = _startpos_v_;
              MenhirLib.EngineTypes.endp = _endpos_v_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ty : (Squirrelcore.Theory.p_ty * Squirrelcore.Theory.var_tags) = Obj.magic ty in
        let _2 : unit = Obj.magic _2 in
        let v : (Squirrelcore.Theory.lsymb) = Obj.magic v in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_v_ in
        let _endpos = _endpos_ty_ in
        let _v : (Squirrelcore.Theory.ext_bnds) = 
# 344 "src/frontend/parser.mly"
                                   ( [Theory.L_var v, ty] )
# 5400 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.ext_bnds list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let l =
            let l = 
# 241 "<standard.mly>"
    ( xs )
# 5427 "src/frontend/parser.ml"
             in
            
# 132 "src/frontend/parser.mly"
                         ( l )
# 5432 "src/frontend/parser.ml"
            
          in
          (
# 340 "src/frontend/parser.mly"
                                   ( List.flatten l )
# 5438 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.ext_bnds))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let d : (Squirrelcore.TacticsArgs.rw_count) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_t_ in
        let _v : (Squirrelcore.TacticsArgs.fa_arg) = 
# 771 "src/frontend/parser.mly"
                                  ( (d,t) )
# 5471 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (int) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let i =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 5504 "src/frontend/parser.ml"
            
          in
          (
# 903 "src/frontend/parser.mly"
             ( TacticsArgs.FreshInt i )
# 5510 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.fresh_arg))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let l : (Squirrelcore.Theory.lsymb) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_l_ in
        let _v : (Squirrelcore.TacticsArgs.fresh_arg) = 
# 904 "src/frontend/parser.mly"
             ( TacticsArgs.FreshHyp l )
# 5536 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = orcls;
            MenhirLib.EngineTypes.startp = _startpos_orcls_;
            MenhirLib.EngineTypes.endp = _endpos_orcls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = vars;
              MenhirLib.EngineTypes.startp = _startpos_vars_;
              MenhirLib.EngineTypes.endp = _endpos_vars_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = rnds;
                MenhirLib.EngineTypes.startp = _startpos_rnds_;
                MenhirLib.EngineTypes.endp = _endpos_rnds_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = n;
                      MenhirLib.EngineTypes.startp = _startpos_n_;
                      MenhirLib.EngineTypes.endp = _endpos_n_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : unit = Obj.magic _8 in
        let orcls : (Squirrelcore.Crypto.Parse.oracle_decl list) = Obj.magic orcls in
        let vars : (Squirrelcore.Crypto.Parse.var_decl list) = Obj.magic vars in
        let rnds : (Squirrelcore.Crypto.Parse.var_rnd list) = Obj.magic rnds in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let n : (Squirrelcore.Theory.lsymb) = Obj.magic n in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : (Squirrelcore.Crypto.Parse.game_decl) = 
# 699 "src/frontend/parser.mly"
    ( Crypto.Parse.{ 
        g_name    = n; 
        g_rnds    = rnds; 
        g_gvar    = vars; 
        g_oracles = orcls;
      } 
    )
# 5616 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = id;
                MenhirLib.EngineTypes.startp = _startpos_id_;
                MenhirLib.EngineTypes.endp = _endpos_id_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _2 : unit = Obj.magic _2 in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_id_ in
        let _endpos = _endpos__4_ in
        let _v : (Squirrelcore.Theory.lsymb * Squirrelcore.Theory.term) = 
# 667 "src/frontend/parser.mly"
                                    ( (id,t) )
# 5662 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.term) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let l =
            let l = 
# 241 "<standard.mly>"
    ( xs )
# 5689 "src/frontend/parser.ml"
             in
            
# 132 "src/frontend/parser.mly"
                         ( l )
# 5694 "src/frontend/parser.ml"
            
          in
          (
# 670 "src/frontend/parser.mly"
                              ( l )
# 5700 "src/frontend/parser.ml"
           : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.term) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ty;
                MenhirLib.EngineTypes.startp = _startpos_ty_;
                MenhirLib.EngineTypes.endp = _endpos_ty_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = v;
                  MenhirLib.EngineTypes.startp = _startpos_v_;
                  MenhirLib.EngineTypes.endp = _endpos_v_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _4 : unit = Obj.magic _4 in
        let ty : (Squirrelcore.Theory.p_ty option) = Obj.magic ty in
        let v : (Squirrelcore.Theory.lsymb) = Obj.magic v in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Squirrelcore.Crypto.Parse.var_decl) = 
# 660 "src/frontend/parser.mly"
    ( Crypto.Parse.{ vd_name = v; vd_ty = ty; vd_init = t; } )
# 5761 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (Squirrelcore.Crypto.Parse.var_decl list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let l =
            let l = 
# 241 "<standard.mly>"
    ( xs )
# 5788 "src/frontend/parser.ml"
             in
            
# 132 "src/frontend/parser.mly"
                         ( l )
# 5793 "src/frontend/parser.ml"
            
          in
          (
# 663 "src/frontend/parser.mly"
                                ( l )
# 5799 "src/frontend/parser.ml"
           : (Squirrelcore.Crypto.Parse.var_decl list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = v;
                MenhirLib.EngineTypes.startp = _startpos_v_;
                MenhirLib.EngineTypes.endp = _endpos_v_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ty : (Squirrelcore.Theory.p_ty) = Obj.magic ty in
        let _3 : unit = Obj.magic _3 in
        let v : (Squirrelcore.Theory.lsymb) = Obj.magic v in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Squirrelcore.Crypto.Parse.var_rnd) = 
# 652 "src/frontend/parser.mly"
    ( Crypto.Parse.{ vr_name = v; vr_ty = ty; } )
# 5853 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (Squirrelcore.Crypto.Parse.var_rnd list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let l =
            let l = 
# 241 "<standard.mly>"
    ( xs )
# 5880 "src/frontend/parser.ml"
             in
            
# 132 "src/frontend/parser.mly"
                         ( l )
# 5885 "src/frontend/parser.ml"
            
          in
          (
# 655 "src/frontend/parser.mly"
                                ( l )
# 5891 "src/frontend/parser.ml"
           : (Squirrelcore.Crypto.Parse.var_rnd list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.global_formula_i) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let f =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 5925 "src/frontend/parser.ml"
            
          in
          (
# 1213 "src/frontend/parser.mly"
                          ( f )
# 5931 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.global_formula))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = f;
            MenhirLib.EngineTypes.startp = _startpos_f_;
            MenhirLib.EngineTypes.endp = _endpos_f_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let f : (Squirrelcore.Theory.term) = Obj.magic f in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Squirrelcore.Theory.global_formula_i) = 
# 1179 "src/frontend/parser.mly"
                                   ( Theory.PReach f )
# 5971 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let e : (Squirrelcore.Theory.equiv) = Obj.magic e in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Squirrelcore.Theory.global_formula_i) = 
# 1180 "src/frontend/parser.mly"
                                   ( Theory.PEquiv e )
# 6017 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let e : (Squirrelcore.Theory.equiv) = Obj.magic e in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Squirrelcore.Theory.global_formula_i) = 
# 1181 "src/frontend/parser.mly"
                                   ( Theory.PEquiv e )
# 6063 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = f;
            MenhirLib.EngineTypes.startp = _startpos_f_;
            MenhirLib.EngineTypes.endp = _endpos_f_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let f : (Squirrelcore.Theory.global_formula_i) = Obj.magic f in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Squirrelcore.Theory.global_formula_i) = 
# 1182 "src/frontend/parser.mly"
                                   ( f )
# 6102 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = f0;
          MenhirLib.EngineTypes.startp = _startpos_f0_;
          MenhirLib.EngineTypes.endp = _endpos_f0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = f;
              MenhirLib.EngineTypes.startp = _startpos_f_;
              MenhirLib.EngineTypes.endp = _endpos_f_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let f0 : (Squirrelcore.Theory.global_formula) = Obj.magic f0 in
        let _2 : unit = Obj.magic _2 in
        let f : (Squirrelcore.Theory.global_formula) = Obj.magic f in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_f0_ in
        let _v : (Squirrelcore.Theory.global_formula_i) = 
# 1184 "src/frontend/parser.mly"
                                           ( Theory.PImpl (f,f0) )
# 6141 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = vs;
              MenhirLib.EngineTypes.startp = _startpos_vs_;
              MenhirLib.EngineTypes.endp = _endpos_vs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let f : (Squirrelcore.Theory.global_formula) = Obj.magic f in
        let _3 : unit = Obj.magic _3 in
        let vs : (Squirrelcore.Theory.bnds_tagged) = Obj.magic vs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_f_ in
        let _v =
          let q = 
# 1171 "src/frontend/parser.mly"
          ( Theory.PForAll )
# 6188 "src/frontend/parser.ml"
           in
          (
# 1187 "src/frontend/parser.mly"
                                   ( Theory.PQuant (q,vs,f)  )
# 6193 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.global_formula_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = vs;
              MenhirLib.EngineTypes.startp = _startpos_vs_;
              MenhirLib.EngineTypes.endp = _endpos_vs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let f : (Squirrelcore.Theory.global_formula) = Obj.magic f in
        let _3 : unit = Obj.magic _3 in
        let vs : (Squirrelcore.Theory.bnds_tagged) = Obj.magic vs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_f_ in
        let _v =
          let q = 
# 1172 "src/frontend/parser.mly"
          ( Theory.PExists )
# 6241 "src/frontend/parser.ml"
           in
          (
# 1187 "src/frontend/parser.mly"
                                   ( Theory.PQuant (q,vs,f)  )
# 6246 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.global_formula_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = f2;
          MenhirLib.EngineTypes.startp = _startpos_f2_;
          MenhirLib.EngineTypes.endp = _endpos_f2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = f1;
              MenhirLib.EngineTypes.startp = _startpos_f1_;
              MenhirLib.EngineTypes.endp = _endpos_f1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let f2 : (Squirrelcore.Theory.global_formula) = Obj.magic f2 in
        let _2 : unit = Obj.magic _2 in
        let f1 : (Squirrelcore.Theory.global_formula) = Obj.magic f1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_f1_ in
        let _endpos = _endpos_f2_ in
        let _v : (Squirrelcore.Theory.global_formula_i) = 
# 1190 "src/frontend/parser.mly"
                                   ( Theory.PAnd (f1, f2) )
# 6286 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = f2;
          MenhirLib.EngineTypes.startp = _startpos_f2_;
          MenhirLib.EngineTypes.endp = _endpos_f2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = f1;
              MenhirLib.EngineTypes.startp = _startpos_f1_;
              MenhirLib.EngineTypes.endp = _endpos_f1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let f2 : (Squirrelcore.Theory.global_formula) = Obj.magic f2 in
        let _2 : unit = Obj.magic _2 in
        let f1 : (Squirrelcore.Theory.global_formula) = Obj.magic f1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_f1_ in
        let _endpos = _endpos_f2_ in
        let _v : (Squirrelcore.Theory.global_formula_i) = 
# 1192 "src/frontend/parser.mly"
                                   ( Theory.POr (f1, f2) )
# 6325 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ty;
                  MenhirLib.EngineTypes.startp = _startpos_ty_;
                  MenhirLib.EngineTypes.endp = _endpos_ty_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = v;
                    MenhirLib.EngineTypes.startp = _startpos_v_;
                    MenhirLib.EngineTypes.endp = _endpos_v_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let f : (Squirrelcore.Theory.global_formula) = Obj.magic f in
        let _6 : unit = Obj.magic _6 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _4 : unit = Obj.magic _4 in
        let ty : (Squirrelcore.Theory.p_ty option) = Obj.magic ty in
        let v : (Squirrelcore.Theory.lsymb) = Obj.magic v in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_f_ in
        let _v : (Squirrelcore.Theory.global_formula_i) = 
# 1195 "src/frontend/parser.mly"
    ( Theory.PLet (v,t,ty,f) )
# 6392 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = g;
            MenhirLib.EngineTypes.startp = _startpos_g_;
            MenhirLib.EngineTypes.endp = _endpos_g_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let g : (Squirrelcore.Theory.global_formula_i) = Obj.magic g in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Squirrelcore.Theory.global_formula_i) = 
# 1197 "src/frontend/parser.mly"
                                            ( g )
# 6438 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = vars;
              MenhirLib.EngineTypes.startp = _startpos_vars_;
              MenhirLib.EngineTypes.endp = _endpos_vars_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ty_vars;
                MenhirLib.EngineTypes.startp = _startpos_ty_vars_;
                MenhirLib.EngineTypes.endp = _endpos_ty_vars_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = name;
                  MenhirLib.EngineTypes.startp = _startpos_name_;
                  MenhirLib.EngineTypes.endp = _endpos_name_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = s;
                    MenhirLib.EngineTypes.startp = _startpos_s_;
                    MenhirLib.EngineTypes.endp = _endpos_s_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let f : (Squirrelcore.Theory.global_formula) = Obj.magic f in
        let _5 : unit = Obj.magic _5 in
        let vars : (Squirrelcore.Theory.bnds_tagged) = Obj.magic vars in
        let ty_vars : (Squirrelcore.Theory.lsymb list) = Obj.magic ty_vars in
        let name : (Squirrelcore.Theory.lsymb option) = Obj.magic name in
        let s : (SE.Parse.sys_cnt L.located) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_f_ in
        let _v : (Squirrelcore.Goal.Parsed.t) = 
# 1262 "src/frontend/parser.mly"
   ( let formula = Goal.Parsed.Global f in
     let system = `Global, s in
     Goal.Parsed.{ name; ty_vars; vars; system; formula } )
# 6500 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = post;
          MenhirLib.EngineTypes.startp = _startpos_post_;
          MenhirLib.EngineTypes.endp = _endpos_post_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ip;
            MenhirLib.EngineTypes.startp = _startpos_ip_;
            MenhirLib.EngineTypes.endp = _endpos_ip_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = pre;
              MenhirLib.EngineTypes.startp = _startpos_pre_;
              MenhirLib.EngineTypes.endp = _endpos_pre_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let post : (Squirrelcore.TacticsArgs.s_item list) = Obj.magic post in
        let ip : (Squirrelcore.TacticsArgs.simpl_pat) = Obj.magic ip in
        let pre : (Squirrelcore.TacticsArgs.s_item list) = Obj.magic pre in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pre_ in
        let _endpos = _endpos_post_ in
        let _v : (Squirrelcore.TacticsArgs.have_ip) = 
# 935 "src/frontend/parser.mly"
                                                             ( (pre, ip, post) )
# 6539 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = id;
            MenhirLib.EngineTypes.startp = _startpos_id_;
            MenhirLib.EngineTypes.endp = _endpos_id_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Squirrelcore.Hint.p_hint) = 
# 1304 "src/frontend/parser.mly"
                            ( Hint.Hint_rewrite id )
# 6585 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = id;
            MenhirLib.EngineTypes.startp = _startpos_id_;
            MenhirLib.EngineTypes.endp = _endpos_id_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Squirrelcore.Hint.p_hint) = 
# 1305 "src/frontend/parser.mly"
                            ( Hint.Hint_smt     id )
# 6631 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.TacticsArgs.in_target) = 
# 765 "src/frontend/parser.mly"
                                   ( `Goal )
# 6649 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let l : (Squirrelcore.Theory.lsymb list) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_l_ in
        let _v =
          let l = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 6682 "src/frontend/parser.ml"
           in
          (
# 766 "src/frontend/parser.mly"
                                   ( `HypsOrDefs l )
# 6687 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.in_target))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Squirrelcore.TacticsArgs.in_target) = 
# 767 "src/frontend/parser.mly"
                                   ( `All )
# 6720 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : (Squirrelcore.Theory.var_tags) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let l =
            let l = 
# 241 "<standard.mly>"
    ( xs )
# 6761 "src/frontend/parser.ml"
             in
            
# 132 "src/frontend/parser.mly"
                         ( l )
# 6766 "src/frontend/parser.ml"
            
          in
          (
# 1309 "src/frontend/parser.mly"
                                          ( l )
# 6772 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.var_tags))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.var_tags) = 
# 1310 "src/frontend/parser.mly"
                                          ( [] )
# 6791 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 16 "src/frontend/parser.mly"
       (int)
# 6812 "src/frontend/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (int) = 
# 829 "src/frontend/parser.mly"
       ( i )
# 6820 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = decls;
          MenhirLib.EngineTypes.startp = _startpos_decls_;
          MenhirLib.EngineTypes.endp = _endpos_decls_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let decls : (Squirrelcore.Decl.declarations) = Obj.magic decls in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_decls_ in
        let _endpos = _endpos_decls_ in
        let _v : (Squirrelcore.ProverLib.input) = 
# 1337 "src/frontend/parser.mly"
                     ( ProverLib.(InputDescr decls) )
# 6845 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = set;
          MenhirLib.EngineTypes.startp = _startpos_set_;
          MenhirLib.EngineTypes.endp = _endpos_set_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let set : (Squirrelcore.Config.p_set_param) = Obj.magic set in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_set_ in
        let _endpos = _endpos_set_ in
        let _v : (Squirrelcore.ProverLib.input) = 
# 1338 "src/frontend/parser.mly"
                     ( ProverLib.(SetOption set) )
# 6870 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = h;
          MenhirLib.EngineTypes.startp = _startpos_h_;
          MenhirLib.EngineTypes.endp = _endpos_h_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let h : (Squirrelcore.Hint.p_hint) = Obj.magic h in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_h_ in
        let _endpos = _endpos_h_ in
        let _v : (Squirrelcore.ProverLib.input) = 
# 1339 "src/frontend/parser.mly"
                     ( ProverLib.(Hint h) )
# 6895 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = q;
          MenhirLib.EngineTypes.startp = _startpos_q_;
          MenhirLib.EngineTypes.endp = _endpos_q_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let q : (Squirrelcore.ProverLib.input) = Obj.magic q in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_q_ in
        let _endpos = _endpos_q_ in
        let _v : (Squirrelcore.ProverLib.input) = 
# 1340 "src/frontend/parser.mly"
                     ( q )
# 6920 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (Squirrelcore.ProverLib.include_param) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (Squirrelcore.ProverLib.input) = 
# 1341 "src/frontend/parser.mly"
                     ( ProverLib.(Include i) )
# 6945 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = g;
          MenhirLib.EngineTypes.startp = _startpos_g_;
          MenhirLib.EngineTypes.endp = _endpos_g_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let g : (Squirrelcore.Goal.Parsed.t L.located) = Obj.magic g in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_g_ in
        let _endpos = _endpos_g_ in
        let _v : (Squirrelcore.ProverLib.input) = 
# 1342 "src/frontend/parser.mly"
                     ( ProverLib.(Goal g) )
# 6970 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.ProverLib.input) = 
# 1343 "src/frontend/parser.mly"
                     ( ProverLib.Proof )
# 6995 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.ProverLib.input) = 
# 1344 "src/frontend/parser.mly"
                     ( ProverLib.Reset )
# 7020 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.ProverLib.input) = 
# 1345 "src/frontend/parser.mly"
                     ( ProverLib.EOF )
# 7045 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = u;
          MenhirLib.EngineTypes.startp = _startpos_u_;
          MenhirLib.EngineTypes.endp = _endpos_u_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let u : (int) = Obj.magic u in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_u_ in
        let _endpos = _endpos_u_ in
        let _v : (Squirrelcore.ProverLib.input_or_undo) = 
# 1333 "src/frontend/parser.mly"
                     ( ProverLib.Undo u )
# 7070 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (Squirrelcore.ProverLib.input) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (Squirrelcore.ProverLib.input_or_undo) = 
# 1334 "src/frontend/parser.mly"
                     ( ProverLib.Input i )
# 7095 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let l : (Squirrelcore.Theory.lsymb list) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_l_ in
        let _v : (Squirrelcore.TacticsArgs.intro_pattern) = 
# 817 "src/frontend/parser.mly"
                ( TacticsArgs.SClear l )
# 7120 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (Squirrelcore.TacticsArgs.s_item_body) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v =
          let s = 
# 806 "src/frontend/parser.mly"
                ( s,[] )
# 7146 "src/frontend/parser.ml"
           in
          (
# 818 "src/frontend/parser.mly"
                ( TacticsArgs.SItem (s) )
# 7151 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.intro_pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = s;
              MenhirLib.EngineTypes.startp = _startpos_s_;
              MenhirLib.EngineTypes.endp = _endpos_s_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let a : (Squirrelcore.TacticsArgs.named_args) = Obj.magic a in
        let s : (Squirrelcore.TacticsArgs.s_item_body) = Obj.magic s in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let s = 
# 807 "src/frontend/parser.mly"
                                               ( s, a )
# 7199 "src/frontend/parser.ml"
           in
          (
# 818 "src/frontend/parser.mly"
                ( TacticsArgs.SItem (s) )
# 7204 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.intro_pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let l =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 7238 "src/frontend/parser.ml"
            
          in
          (
# 819 "src/frontend/parser.mly"
                ( TacticsArgs.Star  (L.loc l))
# 7244 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.intro_pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let l =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 7278 "src/frontend/parser.ml"
            
          in
          (
# 820 "src/frontend/parser.mly"
                ( TacticsArgs.StarV (L.loc l))
# 7284 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.intro_pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = pat;
          MenhirLib.EngineTypes.startp = _startpos_pat_;
          MenhirLib.EngineTypes.endp = _endpos_pat_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let pat : (Squirrelcore.TacticsArgs.simpl_pat) = Obj.magic pat in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pat_ in
        let _endpos = _endpos_pat_ in
        let _v : (Squirrelcore.TacticsArgs.intro_pattern) = 
# 821 "src/frontend/parser.mly"
               ( TacticsArgs.Simpl pat )
# 7310 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let e : (Squirrelcore.TacticsArgs.expnd_item) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_e_ in
        let _v : (Squirrelcore.TacticsArgs.intro_pattern) = 
# 822 "src/frontend/parser.mly"
                ( TacticsArgs.SExpnd e )
# 7335 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let l : (Squirrelcore.TacticsArgs.intro_pattern list) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_l_ in
        let _v =
          let l = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 7361 "src/frontend/parser.ml"
           in
          (
# 825 "src/frontend/parser.mly"
                            ( l )
# 7366 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.intro_pattern list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let l : (Squirrelcore.Theory.lsymb) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_l_ in
        let _v : (Squirrelcore.Theory.lsymb) = 
# 976 "src/frontend/parser.mly"
          ( l )
# 7392 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Goal.Parsed.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let l =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 7425 "src/frontend/parser.ml"
            
          in
          (
# 1287 "src/frontend/parser.mly"
                 ( l )
# 7431 "src/frontend/parser.ml"
           : (Squirrelcore.Goal.Parsed.t L.located))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (unit) = 
# 1273 "src/frontend/parser.mly"
          ()
# 7457 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (unit) = 
# 1274 "src/frontend/parser.mly"
          ()
# 7482 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let s : (Squirrelcore.Goal.Parsed.t) = Obj.magic s in
        let _1 : (unit) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Squirrelcore.Goal.Parsed.t) = 
# 1277 "src/frontend/parser.mly"
                                           ( s )
# 7521 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let s : (Squirrelcore.Goal.Parsed.t) = Obj.magic s in
        let _2 : (unit) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Squirrelcore.Goal.Parsed.t) = 
# 1278 "src/frontend/parser.mly"
                                           ( s )
# 7567 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let s : (Squirrelcore.Goal.Parsed.t) = Obj.magic s in
        let _2 : (unit) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Squirrelcore.Goal.Parsed.t) = 
# 1279 "src/frontend/parser.mly"
                                           ( s )
# 7613 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let s : (Squirrelcore.Goal.Parsed.t) = Obj.magic s in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Squirrelcore.Goal.Parsed.t) = 
# 1280 "src/frontend/parser.mly"
                                           ( s )
# 7652 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = vars;
                MenhirLib.EngineTypes.startp = _startpos_vars_;
                MenhirLib.EngineTypes.endp = _endpos_vars_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = name;
                  MenhirLib.EngineTypes.startp = _startpos_name_;
                  MenhirLib.EngineTypes.endp = _endpos_name_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = s;
                    MenhirLib.EngineTypes.startp = _startpos_s_;
                    MenhirLib.EngineTypes.endp = _endpos_s_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let x : (Squirrelcore.Theory.equiv) = Obj.magic x in
        let _5 : unit = Obj.magic _5 in
        let vars : (Squirrelcore.Theory.bnds_tagged) = Obj.magic vars in
        let name : (Squirrelcore.Theory.lsymb option) = Obj.magic name in
        let s : (SE.Parse.sys_cnt L.located) = Obj.magic s in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let b =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 7727 "src/frontend/parser.ml"
            
          in
          (
# 1282 "src/frontend/parser.mly"
    ( let f = L.mk_loc (L.loc b) (Theory.PEquiv (L.unloc b)) in
      let system = `Global, s in
      Goal.Parsed.{ name; system; ty_vars = []; vars; formula = Global f } )
# 7735 "src/frontend/parser.ml"
           : (Squirrelcore.Goal.Parsed.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = vars;
              MenhirLib.EngineTypes.startp = _startpos_vars_;
              MenhirLib.EngineTypes.endp = _endpos_vars_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ty_vars;
                MenhirLib.EngineTypes.startp = _startpos_ty_vars_;
                MenhirLib.EngineTypes.endp = _endpos_ty_vars_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = name;
                  MenhirLib.EngineTypes.startp = _startpos_name_;
                  MenhirLib.EngineTypes.endp = _endpos_name_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = s;
                    MenhirLib.EngineTypes.startp = _startpos_s_;
                    MenhirLib.EngineTypes.endp = _endpos_s_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let f : (Squirrelcore.Theory.term) = Obj.magic f in
        let _5 : unit = Obj.magic _5 in
        let vars : (Squirrelcore.Theory.bnds_tagged) = Obj.magic vars in
        let ty_vars : (Squirrelcore.Theory.lsymb list) = Obj.magic ty_vars in
        let name : (Squirrelcore.Theory.lsymb option) = Obj.magic name in
        let s : (SE.Parse.sys_cnt L.located) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_f_ in
        let _v : (Squirrelcore.Goal.Parsed.t) = 
# 1255 "src/frontend/parser.mly"
   ( let system = `Local, s in
     let formula = Goal.Parsed.Local f in
     Goal.Parsed.{ name; ty_vars; vars; system; formula } )
# 7798 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 145 "<standard.mly>"
    ( [] )
# 7816 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.lsymb list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 148 "<standard.mly>"
    ( x )
# 7841 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 145 "<standard.mly>"
    ( [] )
# 7859 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.lsymb list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 148 "<standard.mly>"
    ( x )
# 7884 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.var_tags) = 
# 145 "<standard.mly>"
    ( [] )
# 7902 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.var_tags) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.var_tags) = 
# 148 "<standard.mly>"
    ( x )
# 7927 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.term list) = 
# 145 "<standard.mly>"
    ( [] )
# 7945 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.term list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.term list) = 
# 148 "<standard.mly>"
    ( x )
# 7970 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.TacticsArgs.simpl_pat list) = 
# 145 "<standard.mly>"
    ( [] )
# 7988 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.TacticsArgs.simpl_pat list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.TacticsArgs.simpl_pat list) = 
# 148 "<standard.mly>"
    ( x )
# 8013 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.bnds list) = 
# 145 "<standard.mly>"
    ( [] )
# 8031 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.bnds list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.bnds list) = 
# 148 "<standard.mly>"
    ( x )
# 8056 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.bnd_tagged list list) = 
# 145 "<standard.mly>"
    ( [] )
# 8074 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.bnd_tagged list list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.bnd_tagged list list) = 
# 148 "<standard.mly>"
    ( x )
# 8099 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.TacticsArgs.crypto_args) = 
# 145 "<standard.mly>"
    ( [] )
# 8117 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.TacticsArgs.crypto_args) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.TacticsArgs.crypto_args) = 
# 148 "<standard.mly>"
    ( x )
# 8142 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.ext_bnds list) = 
# 145 "<standard.mly>"
    ( [] )
# 8160 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.ext_bnds list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.ext_bnds list) = 
# 148 "<standard.mly>"
    ( x )
# 8185 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.term) list) = 
# 145 "<standard.mly>"
    ( [] )
# 8203 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.term) list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.term) list) = 
# 148 "<standard.mly>"
    ( x )
# 8228 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Crypto.Parse.var_decl list) = 
# 145 "<standard.mly>"
    ( [] )
# 8246 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Crypto.Parse.var_decl list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Crypto.Parse.var_decl list) = 
# 148 "<standard.mly>"
    ( x )
# 8271 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Crypto.Parse.var_rnd list) = 
# 145 "<standard.mly>"
    ( [] )
# 8289 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Crypto.Parse.var_rnd list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Crypto.Parse.var_rnd list) = 
# 148 "<standard.mly>"
    ( x )
# 8314 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 145 "<standard.mly>"
    ( [] )
# 8332 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.lsymb list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 148 "<standard.mly>"
    ( x )
# 8357 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.bnds) list) = 
# 145 "<standard.mly>"
    ( [] )
# 8375 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.bnds) list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.bnds) list) = 
# 148 "<standard.mly>"
    ( x )
# 8400 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.TacticsArgs.named_args) = 
# 145 "<standard.mly>"
    ( [] )
# 8418 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.TacticsArgs.named_args) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.TacticsArgs.named_args) = 
# 148 "<standard.mly>"
    ( x )
# 8443 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Crypto.Parse.oracle_decl list) = 
# 145 "<standard.mly>"
    ( [] )
# 8461 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Crypto.Parse.oracle_decl list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Crypto.Parse.oracle_decl list) = 
# 148 "<standard.mly>"
    ( x )
# 8486 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.TacticsArgs.s_item list) = 
# 145 "<standard.mly>"
    ( [] )
# 8504 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.TacticsArgs.s_item list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.TacticsArgs.s_item list) = 
# 148 "<standard.mly>"
    ( x )
# 8529 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.lsymb list) list) = 
# 145 "<standard.mly>"
    ( [] )
# 8547 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.lsymb list) list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.lsymb list) list) = 
# 148 "<standard.mly>"
    ( x )
# 8572 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 145 "<standard.mly>"
    ( [] )
# 8590 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.lsymb list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 148 "<standard.mly>"
    ( x )
# 8615 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.TacticsArgs.simpl_pat list) = 
# 145 "<standard.mly>"
    ( [] )
# 8633 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.TacticsArgs.simpl_pat list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.TacticsArgs.simpl_pat list) = 
# 148 "<standard.mly>"
    ( x )
# 8658 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.term list) = 
# 145 "<standard.mly>"
    ( [] )
# 8676 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.term list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.term list) = 
# 148 "<standard.mly>"
    ( x )
# 8701 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.SE.Parse.t list) = 
# 145 "<standard.mly>"
    ( [] )
# 8719 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.SE.Parse.t list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.SE.Parse.t list) = 
# 148 "<standard.mly>"
    ( x )
# 8744 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 18 "src/frontend/parser.mly"
       (string)
# 8765 "src/frontend/parser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let id =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 8781 "src/frontend/parser.ml"
            
          in
          (
# 158 "src/frontend/parser.mly"
               ( id )
# 8787 "src/frontend/parser.ml"
           : (string L.located))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 17 "src/frontend/parser.mly"
       (string)
# 8809 "src/frontend/parser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let id =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 8825 "src/frontend/parser.ml"
            
          in
          (
# 155 "src/frontend/parser.mly"
             ( id )
# 8831 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.lsymb))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = id;
          MenhirLib.EngineTypes.startp = _startpos_id_;
          MenhirLib.EngineTypes.endp = _endpos_id_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_id_ in
        let _endpos = _endpos_id_ in
        let _v : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb) = 
# 491 "src/frontend/parser.mly"
                               ( `Prefix, id )
# 8857 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let s =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
            let x = 
# 161 "src/frontend/parser.mly"
                   ( "=" , `Left )
# 8899 "src/frontend/parser.ml"
             in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 8911 "src/frontend/parser.ml"
            
          in
          (
# 493 "src/frontend/parser.mly"
          ( let loc = L.loc s in
            let k = snd @@ L.unloc s in
            let s = fst @@ L.unloc s in
            `Infix k, L.mk_loc loc s )
# 8920 "src/frontend/parser.ml"
           : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let s =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
            let x = 
# 162 "src/frontend/parser.mly"
                   ( "<>", `Left )
# 8963 "src/frontend/parser.ml"
             in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 8975 "src/frontend/parser.ml"
            
          in
          (
# 493 "src/frontend/parser.mly"
          ( let loc = L.loc s in
            let k = snd @@ L.unloc s in
            let s = fst @@ L.unloc s in
            `Infix k, L.mk_loc loc s )
# 8984 "src/frontend/parser.ml"
           : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let s =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
            let x = 
# 163 "src/frontend/parser.mly"
                   ( "<=", `Left )
# 9027 "src/frontend/parser.ml"
             in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 9039 "src/frontend/parser.ml"
            
          in
          (
# 493 "src/frontend/parser.mly"
          ( let loc = L.loc s in
            let k = snd @@ L.unloc s in
            let s = fst @@ L.unloc s in
            `Infix k, L.mk_loc loc s )
# 9048 "src/frontend/parser.ml"
           : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let s =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
            let x = 
# 164 "src/frontend/parser.mly"
                   ( "<" , `Left )
# 9091 "src/frontend/parser.ml"
             in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 9103 "src/frontend/parser.ml"
            
          in
          (
# 493 "src/frontend/parser.mly"
          ( let loc = L.loc s in
            let k = snd @@ L.unloc s in
            let s = fst @@ L.unloc s in
            `Infix k, L.mk_loc loc s )
# 9112 "src/frontend/parser.ml"
           : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let s =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
            let x = 
# 165 "src/frontend/parser.mly"
                   ( ">=", `Left )
# 9155 "src/frontend/parser.ml"
             in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 9167 "src/frontend/parser.ml"
            
          in
          (
# 493 "src/frontend/parser.mly"
          ( let loc = L.loc s in
            let k = snd @@ L.unloc s in
            let s = fst @@ L.unloc s in
            `Infix k, L.mk_loc loc s )
# 9176 "src/frontend/parser.ml"
           : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let s =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
            let x = 
# 166 "src/frontend/parser.mly"
                   ( ">" , `Left )
# 9219 "src/frontend/parser.ml"
             in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 9231 "src/frontend/parser.ml"
            
          in
          (
# 493 "src/frontend/parser.mly"
          ( let loc = L.loc s in
            let k = snd @@ L.unloc s in
            let s = fst @@ L.unloc s in
            `Infix k, L.mk_loc loc s )
# 9240 "src/frontend/parser.ml"
           : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let s =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
            let x = 
# 167 "src/frontend/parser.mly"
                   ( "&&", `Left )
# 9283 "src/frontend/parser.ml"
             in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 9295 "src/frontend/parser.ml"
            
          in
          (
# 493 "src/frontend/parser.mly"
          ( let loc = L.loc s in
            let k = snd @@ L.unloc s in
            let s = fst @@ L.unloc s in
            `Infix k, L.mk_loc loc s )
# 9304 "src/frontend/parser.ml"
           : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let s =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
            let x = 
# 168 "src/frontend/parser.mly"
                   ( "||", `Left )
# 9347 "src/frontend/parser.ml"
             in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 9359 "src/frontend/parser.ml"
            
          in
          (
# 493 "src/frontend/parser.mly"
          ( let loc = L.loc s in
            let k = snd @@ L.unloc s in
            let s = fst @@ L.unloc s in
            `Infix k, L.mk_loc loc s )
# 9368 "src/frontend/parser.ml"
           : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let s : (
# 19 "src/frontend/parser.mly"
       (string)
# 9403 "src/frontend/parser.ml"
        ) = Obj.magic s in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let s =
            let x = 
# 169 "src/frontend/parser.mly"
                   ( s, `Left )
# 9414 "src/frontend/parser.ml"
             in
            let (_endpos_x_, _startpos_x_) = (_endpos_s_, _startpos_s_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 9426 "src/frontend/parser.ml"
            
          in
          (
# 493 "src/frontend/parser.mly"
          ( let loc = L.loc s in
            let k = snd @@ L.unloc s in
            let s = fst @@ L.unloc s in
            `Infix k, L.mk_loc loc s )
# 9435 "src/frontend/parser.ml"
           : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let s : (
# 20 "src/frontend/parser.mly"
       (string)
# 9470 "src/frontend/parser.ml"
        ) = Obj.magic s in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let s =
            let x = 
# 170 "src/frontend/parser.mly"
                   ( s, `Right )
# 9481 "src/frontend/parser.ml"
             in
            let (_endpos_x_, _startpos_x_) = (_endpos_s_, _startpos_s_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 9493 "src/frontend/parser.ml"
            
          in
          (
# 493 "src/frontend/parser.mly"
          ( let loc = L.loc s in
            let k = snd @@ L.unloc s in
            let s = fst @@ L.unloc s in
            `Infix k, L.mk_loc loc s )
# 9502 "src/frontend/parser.ml"
           : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let s =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
            let x = 
# 171 "src/frontend/parser.mly"
                   ( "xor", `Left )
# 9545 "src/frontend/parser.ml"
             in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 9557 "src/frontend/parser.ml"
            
          in
          (
# 493 "src/frontend/parser.mly"
          ( let loc = L.loc s in
            let k = snd @@ L.unloc s in
            let s = fst @@ L.unloc s in
            `Infix k, L.mk_loc loc s )
# 9566 "src/frontend/parser.ml"
           : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let s =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
            let x = 
# 172 "src/frontend/parser.mly"
                   ( "=>" , `Left )
# 9609 "src/frontend/parser.ml"
             in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 9621 "src/frontend/parser.ml"
            
          in
          (
# 493 "src/frontend/parser.mly"
          ( let loc = L.loc s in
            let k = snd @@ L.unloc s in
            let s = fst @@ L.unloc s in
            `Infix k, L.mk_loc loc s )
# 9630 "src/frontend/parser.ml"
           : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let s =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
            let x = 
# 173 "src/frontend/parser.mly"
                   ( "<=>", `Left )
# 9673 "src/frontend/parser.ml"
             in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 9685 "src/frontend/parser.ml"
            
          in
          (
# 493 "src/frontend/parser.mly"
          ( let loc = L.loc s in
            let k = snd @@ L.unloc s in
            let s = fst @@ L.unloc s in
            `Infix k, L.mk_loc loc s )
# 9694 "src/frontend/parser.ml"
           : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = se_v;
                MenhirLib.EngineTypes.startp = _startpos_se_v_;
                MenhirLib.EngineTypes.endp = _endpos_se_v_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let l : (Squirrelcore.Theory.bnds) = Obj.magic l in
        let _3 : unit = Obj.magic _3 in
        let se_v : (Squirrelcore.Theory.lsymb) = Obj.magic se_v in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Squirrelcore.Theory.lsymb * Squirrelcore.Theory.bnds) = 
# 301 "src/frontend/parser.mly"
                                         ( se_v, l )
# 9748 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.bnds) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let l =
            let l = 
# 241 "<standard.mly>"
    ( xs )
# 9775 "src/frontend/parser.ml"
             in
            
# 132 "src/frontend/parser.mly"
                         ( l )
# 9780 "src/frontend/parser.ml"
            
          in
          (
# 304 "src/frontend/parser.mly"
                                 ( l )
# 9786 "src/frontend/parser.ml"
           : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.bnds) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (unit) = Obj.magic _4 in
        let l : (Squirrelcore.Theory.lsymb) = Obj.magic l in
        let _2 : unit = Obj.magic _2 in
        let _1 : (unit) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Squirrelcore.TacticsArgs.named_arg) = 
# 967 "src/frontend/parser.mly"
  ( TacticsArgs.NArg l )
# 9833 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = l;
                    MenhirLib.EngineTypes.startp = _startpos_l_;
                    MenhirLib.EngineTypes.endp = _endpos_l_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (unit) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let xs : (Squirrelcore.Theory.lsymb list) = Obj.magic xs in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let l : (Squirrelcore.Theory.lsymb) = Obj.magic l in
        let _2 : unit = Obj.magic _2 in
        let _1 : (unit) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v =
          let ll =
            let l = 
# 241 "<standard.mly>"
    ( xs )
# 9909 "src/frontend/parser.ml"
             in
            
# 132 "src/frontend/parser.mly"
                         ( l )
# 9914 "src/frontend/parser.ml"
            
          in
          (
# 971 "src/frontend/parser.mly"
  ( TacticsArgs.NList (l,ll) )
# 9920 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.named_arg))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = l;
                MenhirLib.EngineTypes.startp = _startpos_l_;
                MenhirLib.EngineTypes.endp = _endpos_l_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (unit) = Obj.magic _6 in
        let a : (Squirrelcore.Theory.lsymb) = Obj.magic a in
        let _4 : unit = Obj.magic _4 in
        let l : (Squirrelcore.Theory.lsymb) = Obj.magic l in
        let _2 : unit = Obj.magic _2 in
        let _1 : (unit) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Squirrelcore.TacticsArgs.named_arg) = 
# 973 "src/frontend/parser.mly"
  ( TacticsArgs.NList (l,[a]) )
# 9981 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (Squirrelcore.TacticsArgs.named_args) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let args =
            let l = 
# 241 "<standard.mly>"
    ( xs )
# 10008 "src/frontend/parser.ml"
             in
            
# 132 "src/frontend/parser.mly"
                         ( l )
# 10013 "src/frontend/parser.ml"
            
          in
          (
# 979 "src/frontend/parser.mly"
                               ( args )
# 10019 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.named_args))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.TacticsArgs.naming_pat) = 
# 780 "src/frontend/parser.mly"
              ( TacticsArgs.Unnamed )
# 10045 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.TacticsArgs.naming_pat) = 
# 781 "src/frontend/parser.mly"
              ( TacticsArgs.AnyName )
# 10070 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = id;
          MenhirLib.EngineTypes.startp = _startpos_id_;
          MenhirLib.EngineTypes.endp = _endpos_id_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let id : (
# 17 "src/frontend/parser.mly"
       (string)
# 10091 "src/frontend/parser.ml"
        ) = Obj.magic id in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_id_ in
        let _endpos = _endpos_id_ in
        let _v : (Squirrelcore.TacticsArgs.naming_pat) = 
# 782 "src/frontend/parser.mly"
              ( TacticsArgs.Named id )
# 10099 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = n;
          MenhirLib.EngineTypes.startp = _startpos_n_;
          MenhirLib.EngineTypes.endp = _endpos_n_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let n : (Squirrelcore.Theory.lsymb option) = Obj.magic n in
        let s : (SE.Parse.sys_cnt L.located) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_n_ in
        let _v : (Squirrelcore.Goal.Parsed.t) = 
# 1268 "src/frontend/parser.mly"
   ( let system = `Global, s in
     Goal.Parsed.{ name = n; system; ty_vars = []; vars = [];
                   formula = Goal.Parsed.Obs_equiv } )
# 10133 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 417 "src/frontend/parser.mly"
                                    ( [] )
# 10151 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = id;
          MenhirLib.EngineTypes.startp = _startpos_id_;
          MenhirLib.EngineTypes.endp = _endpos_id_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_id_ in
        let _endpos = _endpos_id_ in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 418 "src/frontend/parser.mly"
                                    ( [id] )
# 10176 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ids;
          MenhirLib.EngineTypes.startp = _startpos_ids_;
          MenhirLib.EngineTypes.endp = _endpos_ids_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = id;
              MenhirLib.EngineTypes.startp = _startpos_id_;
              MenhirLib.EngineTypes.endp = _endpos_id_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ids : (Squirrelcore.Theory.lsymb list) = Obj.magic ids in
        let _2 : unit = Obj.magic _2 in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_id_ in
        let _endpos = _endpos_ids_ in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 419 "src/frontend/parser.mly"
                                    ( id::ids )
# 10215 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (unit option) = 
# 111 "<standard.mly>"
    ( None )
# 10233 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (unit option) = 
# 114 "<standard.mly>"
    ( Some x )
# 10258 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.TacticsArgs.have_ip option) = 
# 111 "<standard.mly>"
    ( None )
# 10276 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.TacticsArgs.have_ip) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.TacticsArgs.have_ip option) = 
# 114 "<standard.mly>"
    ( Some x )
# 10301 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.TacticsArgs.naming_pat list option) = 
# 111 "<standard.mly>"
    ( None )
# 10319 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.TacticsArgs.naming_pat list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.TacticsArgs.naming_pat list option) = 
# 114 "<standard.mly>"
    ( Some x )
# 10344 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.p_ty option) = 
# 111 "<standard.mly>"
    ( None )
# 10362 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.p_ty) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.p_ty option) = 
# 114 "<standard.mly>"
    ( Some x )
# 10387 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Squirrelcore.Theory.bnds * Squirrelcore.Theory.term) option) = 
# 111 "<standard.mly>"
    ( None )
# 10405 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.bnds * Squirrelcore.Theory.term) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Squirrelcore.Theory.bnds * Squirrelcore.Theory.term) option) = 
# 114 "<standard.mly>"
    ( Some x )
# 10430 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.TacticsArgs.have_ip option) = 
# 111 "<standard.mly>"
    ( None )
# 10448 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.TacticsArgs.have_ip) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.TacticsArgs.have_ip option) = 
# 114 "<standard.mly>"
    ( Some x )
# 10473 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.term option) = 
# 111 "<standard.mly>"
    ( None )
# 10491 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.term) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.term option) = 
# 114 "<standard.mly>"
    ( Some x )
# 10516 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.global_formula option) = 
# 111 "<standard.mly>"
    ( None )
# 10534 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.global_formula) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.global_formula option) = 
# 114 "<standard.mly>"
    ( Some x )
# 10559 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.term option) = 
# 111 "<standard.mly>"
    ( None )
# 10577 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.term) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.term option) = 
# 114 "<standard.mly>"
    ( Some x )
# 10602 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.Config.p_param_val) = 
# 1291 "src/frontend/parser.mly"
        ( Config.Param_bool true  )
# 10627 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.Config.p_param_val) = 
# 1292 "src/frontend/parser.mly"
        ( Config.Param_bool false )
# 10652 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = n;
          MenhirLib.EngineTypes.startp = _startpos_n_;
          MenhirLib.EngineTypes.endp = _endpos_n_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let n : (
# 17 "src/frontend/parser.mly"
       (string)
# 10673 "src/frontend/parser.ml"
        ) = Obj.magic n in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_n_ in
        let _endpos = _endpos_n_ in
        let _v : (Squirrelcore.Config.p_param_val) = 
# 1293 "src/frontend/parser.mly"
        (
        if n = "true" then (Config.Param_bool true)
        else if n = "false" then (Config.Param_bool false)
        else Config.Param_string n   )
# 10684 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 16 "src/frontend/parser.mly"
       (int)
# 10705 "src/frontend/parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (Squirrelcore.Config.p_param_val) = 
# 1297 "src/frontend/parser.mly"
        ( Config.Param_int i      )
# 10713 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ret;
          MenhirLib.EngineTypes.startp = _startpos_ret_;
          MenhirLib.EngineTypes.endp = _endpos_ret_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = updates;
            MenhirLib.EngineTypes.startp = _startpos_updates_;
            MenhirLib.EngineTypes.endp = _endpos_updates_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = vars;
              MenhirLib.EngineTypes.startp = _startpos_vars_;
              MenhirLib.EngineTypes.endp = _endpos_vars_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = rnds;
                MenhirLib.EngineTypes.startp = _startpos_rnds_;
                MenhirLib.EngineTypes.endp = _endpos_rnds_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let ret : (Squirrelcore.Theory.term option) = Obj.magic ret in
        let updates : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.term) list) = Obj.magic updates in
        let vars : (Squirrelcore.Crypto.Parse.var_decl list) = Obj.magic vars in
        let rnds : (Squirrelcore.Crypto.Parse.var_rnd list) = Obj.magic rnds in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_rnds_ in
        let _endpos = _endpos_ret_ in
        let _v : (Squirrelcore.Crypto.Parse.oracle_body) = 
# 677 "src/frontend/parser.mly"
( Crypto.Parse.{ 
    bdy_rnds    = rnds; 
    bdy_lvars   = vars; 
    bdy_updates = updates; 
    bdy_ret     = ret; 
  } 
)
# 10765 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ty;
                  MenhirLib.EngineTypes.startp = _startpos_ty_;
                  MenhirLib.EngineTypes.endp = _endpos_ty_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = args;
                    MenhirLib.EngineTypes.startp = _startpos_args_;
                    MenhirLib.EngineTypes.endp = _endpos_args_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = n;
                      MenhirLib.EngineTypes.startp = _startpos_n_;
                      MenhirLib.EngineTypes.endp = _endpos_n_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : unit = Obj.magic _8 in
        let body : (Squirrelcore.Crypto.Parse.oracle_body) = Obj.magic body in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let ty : (Squirrelcore.Theory.p_ty option) = Obj.magic ty in
        let args : (Squirrelcore.Theory.bnds) = Obj.magic args in
        let n : (Squirrelcore.Theory.lsymb) = Obj.magic n in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : (Squirrelcore.Crypto.Parse.oracle_decl) = 
# 688 "src/frontend/parser.mly"
    ( Crypto.Parse.{ o_name = n; o_args = args; o_tyout = ty; o_body = body; } )
# 10839 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (Squirrelcore.Crypto.Parse.oracle_decl list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let l =
            let l = 
# 241 "<standard.mly>"
    ( xs )
# 10866 "src/frontend/parser.ml"
             in
            
# 132 "src/frontend/parser.mly"
                         ( l )
# 10871 "src/frontend/parser.ml"
            
          in
          (
# 691 "src/frontend/parser.mly"
                              ( l )
# 10877 "src/frontend/parser.ml"
           : (Squirrelcore.Crypto.Parse.oracle_decl list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ret;
            MenhirLib.EngineTypes.startp = _startpos_ret_;
            MenhirLib.EngineTypes.endp = _endpos_ret_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (unit option) = Obj.magic _3 in
        let ret : (Squirrelcore.Theory.term) = Obj.magic ret in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Squirrelcore.Theory.term) = 
# 673 "src/frontend/parser.mly"
                             ( ret )
# 10917 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = th;
              MenhirLib.EngineTypes.startp = _startpos_th_;
              MenhirLib.EngineTypes.endp = _endpos_th_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let th : (string L.located) = Obj.magic th in
        let _3 : unit = Obj.magic _3 in
        let l : (Squirrelcore.Theory.var_tags) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Squirrelcore.ProverLib.include_param) = 
# 1314 "src/frontend/parser.mly"
    ( ProverLib.{ th_name = ProverLib.Path th; params = l; } )
# 10977 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = th;
            MenhirLib.EngineTypes.startp = _startpos_th_;
            MenhirLib.EngineTypes.endp = _endpos_th_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let th : (Squirrelcore.Theory.lsymb) = Obj.magic th in
        let l : (Squirrelcore.Theory.var_tags) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Squirrelcore.ProverLib.include_param) = 
# 1316 "src/frontend/parser.mly"
    ( ProverLib.{ th_name = ProverLib.Name th; params = l; } )
# 11023 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = form;
          MenhirLib.EngineTypes.startp = _startpos_form_;
          MenhirLib.EngineTypes.endp = _endpos_form_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let form : (Squirrelcore.Theory.global_formula) = Obj.magic form in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_form_ in
        let _v : (Squirrelcore.Theory.global_formula) = 
# 504 "src/frontend/parser.mly"
                         ( form )
# 11055 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Process.Parse.cnt) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let p =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 11088 "src/frontend/parser.ml"
            
          in
          (
# 400 "src/frontend/parser.mly"
                   ( p )
# 11094 "src/frontend/parser.ml"
           : (Squirrelcore.Process.Parse.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let _endpos = _endpos__0_ in
          let _startpos = _endpos__0_ in
          (
# 407 "src/frontend/parser.mly"
                                 ( let loc = L.make _startpos _endpos in
                                   L.mk_loc loc Process.Parse.Null )
# 11117 "src/frontend/parser.ml"
           : (Squirrelcore.Process.Parse.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let p : (Squirrelcore.Process.Parse.t) = Obj.magic p in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_p_ in
        let _v : (Squirrelcore.Process.Parse.t) = 
# 409 "src/frontend/parser.mly"
                                 ( p )
# 11150 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.Process.Parse.cnt) = 
# 367 "src/frontend/parser.mly"
                                     ( Process.Parse.Null )
# 11175 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ps;
            MenhirLib.EngineTypes.startp = _startpos_ps_;
            MenhirLib.EngineTypes.endp = _endpos_ps_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let ps : (Squirrelcore.Process.Parse.cnt) = Obj.magic ps in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Squirrelcore.Process.Parse.cnt) = 
# 368 "src/frontend/parser.mly"
                                     ( ps )
# 11214 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = terms;
          MenhirLib.EngineTypes.startp = _startpos_terms_;
          MenhirLib.EngineTypes.endp = _endpos_terms_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = id;
            MenhirLib.EngineTypes.startp = _startpos_id_;
            MenhirLib.EngineTypes.endp = _endpos_id_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let terms : (Squirrelcore.Theory.term list) = Obj.magic terms in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_id_ in
        let _endpos = _endpos_terms_ in
        let _v : (Squirrelcore.Process.Parse.cnt) = 
# 369 "src/frontend/parser.mly"
                                     ( Process.Parse.Apply (id,terms) )
# 11246 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = s;
              MenhirLib.EngineTypes.startp = _startpos_s_;
              MenhirLib.EngineTypes.endp = _endpos_s_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let p : (Squirrelcore.Process.Parse.t) = Obj.magic p in
        let _2 : unit = Obj.magic _2 in
        let s : (
# 17 "src/frontend/parser.mly"
       (string)
# 11281 "src/frontend/parser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_p_ in
        let _v =
          let id =
            let x = 
# 362 "src/frontend/parser.mly"
       ( s )
# 11291 "src/frontend/parser.ml"
             in
            let (_endpos_x_, _startpos_x_) = (_endpos_s_, _startpos_s_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 11303 "src/frontend/parser.ml"
            
          in
          (
# 370 "src/frontend/parser.mly"
                                     ( Process.Parse.Alias (p,id) )
# 11309 "src/frontend/parser.ml"
           : (Squirrelcore.Process.Parse.cnt))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = s;
              MenhirLib.EngineTypes.startp = _startpos_s_;
              MenhirLib.EngineTypes.endp = _endpos_s_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let p : (Squirrelcore.Process.Parse.t) = Obj.magic p in
        let _2 : unit = Obj.magic _2 in
        let s : (
# 17 "src/frontend/parser.mly"
       (string)
# 11351 "src/frontend/parser.ml"
        ) = Obj.magic s in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_p_ in
        let _v =
          let id =
            let x = 
# 363 "src/frontend/parser.mly"
              ( "$" ^ s )
# 11362 "src/frontend/parser.ml"
             in
            let (_endpos_x_, _startpos_x_) = (_endpos_s_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 11374 "src/frontend/parser.ml"
            
          in
          (
# 370 "src/frontend/parser.mly"
                                     ( Process.Parse.Alias (p,id) )
# 11380 "src/frontend/parser.ml"
           : (Squirrelcore.Process.Parse.cnt))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = s;
                MenhirLib.EngineTypes.startp = _startpos_s_;
                MenhirLib.EngineTypes.endp = _endpos_s_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let p : (Squirrelcore.Process.Parse.t) = Obj.magic p in
        let _2 : unit = Obj.magic _2 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let s : (
# 17 "src/frontend/parser.mly"
       (string)
# 11423 "src/frontend/parser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_p_ in
        let _v =
          let id =
            let _endpos__2_ = _endpos__2_inlined1_ in
            let x = 
# 364 "src/frontend/parser.mly"
              ( "$" ^ s )
# 11434 "src/frontend/parser.ml"
             in
            let (_endpos_x_, _startpos_x_) = (_endpos__2_, _startpos_s_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 11446 "src/frontend/parser.ml"
            
          in
          (
# 370 "src/frontend/parser.mly"
                                     ( Process.Parse.Alias (p,id) )
# 11452 "src/frontend/parser.ml"
           : (Squirrelcore.Process.Parse.cnt))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ty;
              MenhirLib.EngineTypes.startp = _startpos_ty_;
              MenhirLib.EngineTypes.endp = _endpos_ty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = id;
                MenhirLib.EngineTypes.startp = _startpos_id_;
                MenhirLib.EngineTypes.endp = _endpos_id_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let p : (Squirrelcore.Process.Parse.t) = Obj.magic p in
        let _4 : unit = Obj.magic _4 in
        let ty : (Squirrelcore.Theory.p_ty option) = Obj.magic ty in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_p_ in
        let _v : (Squirrelcore.Process.Parse.cnt) = 
# 373 "src/frontend/parser.mly"
    ( let ty = match ty with
        | Some ty -> ty
        | None -> L.mk_loc (L.loc id) Theory.P_message
      in
      Process.Parse.New (id,ty,p) )
# 11510 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = id;
              MenhirLib.EngineTypes.startp = _startpos_id_;
              MenhirLib.EngineTypes.endp = _endpos_id_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = c;
                  MenhirLib.EngineTypes.startp = _startpos_c_;
                  MenhirLib.EngineTypes.endp = _endpos_c_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let p : (Squirrelcore.Process.Parse.t) = Obj.magic p in
        let _6 : unit = Obj.magic _6 in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _4 : unit = Obj.magic _4 in
        let c : (Squirrelcore.Theory.lsymb) = Obj.magic c in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_p_ in
        let _v : (Squirrelcore.Process.Parse.cnt) = 
# 380 "src/frontend/parser.mly"
    ( Process.Parse.In (c,id,p) )
# 11577 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = c;
                  MenhirLib.EngineTypes.startp = _startpos_c_;
                  MenhirLib.EngineTypes.endp = _endpos_c_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let p : (Squirrelcore.Process.Parse.t) = Obj.magic p in
        let _6 : unit = Obj.magic _6 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _4 : unit = Obj.magic _4 in
        let c : (Squirrelcore.Theory.lsymb) = Obj.magic c in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_p_ in
        let _v : (Squirrelcore.Process.Parse.cnt) = 
# 383 "src/frontend/parser.mly"
    ( Process.Parse.Out (c,t,p) )
# 11644 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p0;
          MenhirLib.EngineTypes.startp = _startpos_p0_;
          MenhirLib.EngineTypes.endp = _endpos_p0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = p;
            MenhirLib.EngineTypes.startp = _startpos_p_;
            MenhirLib.EngineTypes.endp = _endpos_p_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = f;
                MenhirLib.EngineTypes.startp = _startpos_f_;
                MenhirLib.EngineTypes.endp = _endpos_f_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let p0 : (Squirrelcore.Process.Parse.t) = Obj.magic p0 in
        let p : (Squirrelcore.Process.Parse.t) = Obj.magic p in
        let _3 : unit = Obj.magic _3 in
        let f : (Squirrelcore.Theory.term) = Obj.magic f in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_p0_ in
        let _v : (Squirrelcore.Process.Parse.cnt) = 
# 386 "src/frontend/parser.mly"
    ( Process.Parse.Exists ([],f,p,p0) )
# 11697 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p0;
          MenhirLib.EngineTypes.startp = _startpos_p0_;
          MenhirLib.EngineTypes.endp = _endpos_p0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = p;
            MenhirLib.EngineTypes.startp = _startpos_p_;
            MenhirLib.EngineTypes.endp = _endpos_p_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = f;
                MenhirLib.EngineTypes.startp = _startpos_f_;
                MenhirLib.EngineTypes.endp = _endpos_f_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = is;
                    MenhirLib.EngineTypes.startp = _startpos_is_;
                    MenhirLib.EngineTypes.endp = _endpos_is_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let p0 : (Squirrelcore.Process.Parse.t) = Obj.magic p0 in
        let p : (Squirrelcore.Process.Parse.t) = Obj.magic p in
        let _5 : unit = Obj.magic _5 in
        let f : (Squirrelcore.Theory.term) = Obj.magic f in
        let _3 : unit = Obj.magic _3 in
        let is : (Squirrelcore.Theory.lsymb list) = Obj.magic is in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_p0_ in
        let _v : (Squirrelcore.Process.Parse.cnt) = 
# 389 "src/frontend/parser.mly"
    ( Process.Parse.Exists (is,f,p,p0) )
# 11764 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ty;
                  MenhirLib.EngineTypes.startp = _startpos_ty_;
                  MenhirLib.EngineTypes.endp = _endpos_ty_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = id;
                    MenhirLib.EngineTypes.startp = _startpos_id_;
                    MenhirLib.EngineTypes.endp = _endpos_id_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let p : (Squirrelcore.Process.Parse.t) = Obj.magic p in
        let _6 : unit = Obj.magic _6 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _4 : unit = Obj.magic _4 in
        let ty : (Squirrelcore.Theory.p_ty option) = Obj.magic ty in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_p_ in
        let _v : (Squirrelcore.Process.Parse.cnt) = 
# 392 "src/frontend/parser.mly"
    ( Process.Parse.Let (id,t,ty,p) )
# 11831 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = args;
                MenhirLib.EngineTypes.startp = _startpos_args_;
                MenhirLib.EngineTypes.endp = _endpos_args_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = id;
                  MenhirLib.EngineTypes.startp = _startpos_id_;
                  MenhirLib.EngineTypes.endp = _endpos_id_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let p : (Squirrelcore.Process.Parse.t) = Obj.magic p in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _3 : unit = Obj.magic _3 in
        let args : (Squirrelcore.Theory.term list) = Obj.magic args in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_id_ in
        let _endpos = _endpos_p_ in
        let _v : (Squirrelcore.Process.Parse.cnt) = 
# 395 "src/frontend/parser.mly"
    ( Process.Parse.Set (id,args,t,p) )
# 11884 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let p : (Squirrelcore.Process.Parse.t) = Obj.magic p in
        let x : (
# 21 "src/frontend/parser.mly"
       (string)
# 11912 "src/frontend/parser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_p_ in
        let _v =
          let s =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 11928 "src/frontend/parser.ml"
            
          in
          (
# 397 "src/frontend/parser.mly"
                        ( Process.Parse.Repl (s,p) )
# 11934 "src/frontend/parser.ml"
           : (Squirrelcore.Process.Parse.cnt))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let p : (Squirrelcore.Process.Parse.cnt) = Obj.magic p in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos_p_ in
        let _v : (Squirrelcore.Process.Parse.cnt) = 
# 403 "src/frontend/parser.mly"
                                          ( p )
# 11960 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = p;
              MenhirLib.EngineTypes.startp = _startpos_p_;
              MenhirLib.EngineTypes.endp = _endpos_p_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Squirrelcore.Process.Parse.cnt) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let p : (Squirrelcore.Process.Parse.t) = Obj.magic p in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos_x_ in
        let _v =
          let ps =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 12007 "src/frontend/parser.ml"
            
          in
          (
# 404 "src/frontend/parser.mly"
                                          ( Process.Parse.Parallel (p,ps) )
# 12013 "src/frontend/parser.ml"
           : (Squirrelcore.Process.Parse.cnt))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.pt_cnt) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let pt =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 12047 "src/frontend/parser.ml"
            
          in
          (
# 865 "src/frontend/parser.mly"
                 ( pt )
# 12053 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.pt))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t_ in
        let _v : (Squirrelcore.Theory.pt_app_arg) = 
# 848 "src/frontend/parser.mly"
                                 ( Theory.PTA_term t )
# 12079 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = pt;
            MenhirLib.EngineTypes.startp = _startpos_pt_;
            MenhirLib.EngineTypes.endp = _endpos_pt_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let pt : (Squirrelcore.Theory.pt) = Obj.magic pt in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Squirrelcore.Theory.pt_app_arg) = 
# 852 "src/frontend/parser.mly"
                               ( Theory.PTA_sub pt )
# 12125 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = pt;
          MenhirLib.EngineTypes.startp = _startpos_pt_;
          MenhirLib.EngineTypes.endp = _endpos_pt_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let pt : (Squirrelcore.Theory.pt_cnt) = Obj.magic pt in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pt_ in
        let _endpos = _endpos_pt_ in
        let _v : (Squirrelcore.Theory.pt_cnt) = 
# 857 "src/frontend/parser.mly"
              ( pt )
# 12150 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = head;
            MenhirLib.EngineTypes.startp = _startpos_head_;
            MenhirLib.EngineTypes.endp = _endpos_head_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let l : (Squirrelcore.Theory.pt_app_arg list) = Obj.magic l in
        let head : (Squirrelcore.Theory.pt) = Obj.magic head in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_head_ in
        let _endpos = _endpos_l_ in
        let _v =
          let args = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 12183 "src/frontend/parser.ml"
           in
          let _endpos_args_ = _endpos_l_ in
          let _endpos = _endpos_args_ in
          let _startpos = _startpos_head_ in
          (
# 860 "src/frontend/parser.mly"
    ( let pta_loc = L.make _startpos _endpos in
      let app = Theory.{ pta_head = head; pta_args = args; pta_loc; } in
      Theory.PT_app app )
# 12193 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.pt_cnt))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = pt;
          MenhirLib.EngineTypes.startp = _startpos_pt_;
          MenhirLib.EngineTypes.endp = _endpos_pt_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let pt : (Squirrelcore.Theory.pt) = Obj.magic pt in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pt_ in
        let _endpos = _endpos_pt_ in
        let _v : (Squirrelcore.Theory.pt) = 
# 881 "src/frontend/parser.mly"
         ( pt )
# 12219 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = head;
              MenhirLib.EngineTypes.startp = _startpos_head_;
              MenhirLib.EngineTypes.endp = _endpos_head_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let l : (Squirrelcore.Theory.term list) = Obj.magic l in
        let _2 : unit = Obj.magic _2 in
        let head : (Squirrelcore.Theory.pt) = Obj.magic head in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_head_ in
        let _endpos = _endpos_l_ in
        let _v =
          let args = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 12259 "src/frontend/parser.ml"
           in
          let _endpos_args_ = _endpos_l_ in
          let _endpos = _endpos_args_ in
          let _startpos = _startpos_head_ in
          (
# 884 "src/frontend/parser.mly"
    ( let pta_loc = L.make _startpos _endpos in
      let args = List.map (fun x -> Theory.PTA_term x) args in
      let app = Theory.{ pta_head = head; pta_args = args; pta_loc; } in
      L.mk_loc pta_loc (Theory.PT_app app) )
# 12270 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.pt))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Squirrelcore.ProverLib.input) = 
# 1320 "src/frontend/parser.mly"
                                 ( ProverLib.Help )
# 12303 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Squirrelcore.ProverLib.input) = 
# 1321 "src/frontend/parser.mly"
                                 ( ProverLib.Prof )
# 12335 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let l : (Squirrelcore.SystemExpr.Parse.t) = Obj.magic l in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Squirrelcore.ProverLib.input) = 
# 1323 "src/frontend/parser.mly"
                                 ( ProverLib.(Print (Pr_system (Some l))) )
# 12381 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let l : (Squirrelcore.Theory.lsymb) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Squirrelcore.ProverLib.input) = 
# 1324 "src/frontend/parser.mly"
                                 ( ProverLib.(Print (Pr_any l)) )
# 12420 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Squirrelcore.ProverLib.input) = 
# 1325 "src/frontend/parser.mly"
                                 ( ProverLib.(Print (Pr_system None)) )
# 12452 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = f;
                MenhirLib.EngineTypes.startp = _startpos_f_;
                MenhirLib.EngineTypes.endp = _endpos_f_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let s : (Squirrelcore.SystemExpr.Parse.t) = Obj.magic s in
        let _3 : unit = Obj.magic _3 in
        let f : (Squirrelcore.Theory.term) = Obj.magic f in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let t = 
# 919 "src/frontend/parser.mly"
                     ( Theory.Local f )
# 12506 "src/frontend/parser.ml"
           in
          (
# 1328 "src/frontend/parser.mly"
                                 ( ProverLib.(Search (Srch_inSys (t,s))) )
# 12511 "src/frontend/parser.ml"
           : (Squirrelcore.ProverLib.input))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = g;
                MenhirLib.EngineTypes.startp = _startpos_g_;
                MenhirLib.EngineTypes.endp = _endpos_g_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let s : (Squirrelcore.SystemExpr.Parse.t) = Obj.magic s in
        let _3 : unit = Obj.magic _3 in
        let g : (Squirrelcore.Theory.global_formula) = Obj.magic g in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let t = 
# 920 "src/frontend/parser.mly"
                     ( Theory.Global g )
# 12566 "src/frontend/parser.ml"
           in
          (
# 1328 "src/frontend/parser.mly"
                                 ( ProverLib.(Search (Srch_inSys (t,s))) )
# 12571 "src/frontend/parser.ml"
           : (Squirrelcore.ProverLib.input))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = f;
            MenhirLib.EngineTypes.startp = _startpos_f_;
            MenhirLib.EngineTypes.endp = _endpos_f_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let f : (Squirrelcore.Theory.term) = Obj.magic f in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let t = 
# 919 "src/frontend/parser.mly"
                     ( Theory.Local f )
# 12612 "src/frontend/parser.ml"
           in
          (
# 1329 "src/frontend/parser.mly"
                                 ( ProverLib.(Search (Srch_term t)) )
# 12617 "src/frontend/parser.ml"
           : (Squirrelcore.ProverLib.input))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = g;
            MenhirLib.EngineTypes.startp = _startpos_g_;
            MenhirLib.EngineTypes.endp = _endpos_g_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let g : (Squirrelcore.Theory.global_formula) = Obj.magic g in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let t = 
# 920 "src/frontend/parser.mly"
                     ( Theory.Global g )
# 12658 "src/frontend/parser.ml"
           in
          (
# 1329 "src/frontend/parser.mly"
                                 ( ProverLib.(Search (Srch_term t)) )
# 12663 "src/frontend/parser.ml"
           : (Squirrelcore.ProverLib.input))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : ([ `LeftToRight | `RightToLeft ]) = 
# 792 "src/frontend/parser.mly"
         ( `LeftToRight )
# 12689 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : ([ `LeftToRight | `RightToLeft ]) = 
# 793 "src/frontend/parser.mly"
         ( `RightToLeft )
# 12714 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let r : ([ `Expand of Squirrelcore.Theory.lsymb
  | `ExpandAll of L.t
  | `Rw of Squirrelcore.Theory.pt ] Squirrelcore.TacticsArgs.rw_item_g) = Obj.magic r in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_r_ in
        let _endpos = _endpos_r_ in
        let _v : (Squirrelcore.TacticsArgs.rw_arg) = 
# 754 "src/frontend/parser.mly"
            ( TacticsArgs.R_item r )
# 12741 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (Squirrelcore.TacticsArgs.s_item_body) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v =
          let s = 
# 806 "src/frontend/parser.mly"
                ( s,[] )
# 12767 "src/frontend/parser.ml"
           in
          (
# 755 "src/frontend/parser.mly"
            ( TacticsArgs.R_s_item s )
# 12772 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.rw_arg))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = s;
              MenhirLib.EngineTypes.startp = _startpos_s_;
              MenhirLib.EngineTypes.endp = _endpos_s_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let a : (Squirrelcore.TacticsArgs.named_args) = Obj.magic a in
        let s : (Squirrelcore.TacticsArgs.s_item_body) = Obj.magic s in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let s = 
# 807 "src/frontend/parser.mly"
                                               ( s, a )
# 12820 "src/frontend/parser.ml"
           in
          (
# 755 "src/frontend/parser.mly"
            ( TacticsArgs.R_s_item s )
# 12825 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.rw_arg))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let l : (Squirrelcore.TacticsArgs.rw_arg list) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_l_ in
        let _v =
          let l = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 12852 "src/frontend/parser.ml"
           in
          (
# 758 "src/frontend/parser.mly"
                          ( l )
# 12857 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.rw_arg list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ([ `LeftToRight | `RightToLeft ]) = 
# 725 "src/frontend/parser.mly"
        ( `LeftToRight )
# 12876 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : ([ `LeftToRight | `RightToLeft ]) = 
# 726 "src/frontend/parser.mly"
        ( `RightToLeft )
# 12901 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = pt;
          MenhirLib.EngineTypes.startp = _startpos_pt_;
          MenhirLib.EngineTypes.endp = _endpos_pt_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let pt : (Squirrelcore.Theory.pt) = Obj.magic pt in
        let x : ([ `LeftToRight | `RightToLeft ]) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_pt_ in
        let _v =
          let d =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 12941 "src/frontend/parser.ml"
            
          in
          (
# 743 "src/frontend/parser.mly"
                       ( TacticsArgs.{ rw_mult = TacticsArgs.Once;
                                         rw_dir = d;
                                         rw_type = `Rw pt; } )
# 12949 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.rw_equiv_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = m;
              MenhirLib.EngineTypes.startp = _startpos_m_;
              MenhirLib.EngineTypes.endp = _endpos_m_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t : ([ `Expand of Squirrelcore.Theory.lsymb
  | `ExpandAll of L.t
  | `Rw of Squirrelcore.Theory.pt ]) = Obj.magic t in
        let x : ([ `LeftToRight | `RightToLeft ]) = Obj.magic x in
        let m : (Squirrelcore.TacticsArgs.rw_count) = Obj.magic m in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_m_ in
        let _endpos = _endpos_t_ in
        let _v =
          let d =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 12999 "src/frontend/parser.ml"
            
          in
          (
# 738 "src/frontend/parser.mly"
                                     ( TacticsArgs.{ rw_mult = m;
                                                     rw_dir = d;
                                                     rw_type = t; } )
# 13007 "src/frontend/parser.ml"
           : ([ `Expand of Squirrelcore.Theory.lsymb
  | `ExpandAll of L.t
  | `Rw of Squirrelcore.Theory.pt ] Squirrelcore.TacticsArgs.rw_item_g))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let i : (int) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos__2_ in
        let _v : (Squirrelcore.TacticsArgs.rw_count) = 
# 719 "src/frontend/parser.mly"
              ( TacticsArgs.Exact i )
# 13042 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.TacticsArgs.rw_count) = 
# 720 "src/frontend/parser.mly"
              ( TacticsArgs.Many )
# 13067 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.TacticsArgs.rw_count) = 
# 721 "src/frontend/parser.mly"
              ( TacticsArgs.Any )
# 13092 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.TacticsArgs.rw_count) = 
# 722 "src/frontend/parser.mly"
              ( TacticsArgs.Once )
# 13110 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = pt;
          MenhirLib.EngineTypes.startp = _startpos_pt_;
          MenhirLib.EngineTypes.endp = _endpos_pt_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let pt : (Squirrelcore.Theory.pt) = Obj.magic pt in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pt_ in
        let _endpos = _endpos_pt_ in
        let _v : ([ `Expand of Squirrelcore.Theory.lsymb
  | `ExpandAll of L.t
  | `Rw of Squirrelcore.Theory.pt ]) = 
# 729 "src/frontend/parser.mly"
                                ( `Rw pt )
# 13137 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let s : (Squirrelcore.Symbols.symb_type * Squirrelcore.Theory.lsymb) = Obj.magic s in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_s_ in
        let _v : ([ `Expand of Squirrelcore.Theory.lsymb
  | `ExpandAll of L.t
  | `Rw of Squirrelcore.Theory.pt ]) = 
# 730 "src/frontend/parser.mly"
                                ( `Expand (snd s) )
# 13171 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let l =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 13208 "src/frontend/parser.ml"
            
          in
          (
# 731 "src/frontend/parser.mly"
                                ( `ExpandAll l )
# 13214 "src/frontend/parser.ml"
           : ([ `Expand of Squirrelcore.Theory.lsymb
  | `ExpandAll of L.t
  | `Rw of Squirrelcore.Theory.pt ]))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let l =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 13250 "src/frontend/parser.ml"
            
          in
          (
# 801 "src/frontend/parser.mly"
                         ( TacticsArgs.Tryauto      (L.loc l))
# 13256 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.s_item_body))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let l =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 13290 "src/frontend/parser.ml"
            
          in
          (
# 802 "src/frontend/parser.mly"
                         ( TacticsArgs.Simplify     (L.loc l))
# 13296 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.s_item_body))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let l =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 13330 "src/frontend/parser.ml"
            
          in
          (
# 803 "src/frontend/parser.mly"
                         ( TacticsArgs.Tryautosimpl (L.loc l))
# 13336 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.s_item_body))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (Squirrelcore.TacticsArgs.s_item_body) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : (Squirrelcore.TacticsArgs.s_item) = 
# 811 "src/frontend/parser.mly"
                ( s,[] )
# 13362 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (Squirrelcore.TacticsArgs.s_item list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let l =
            let l = 
# 241 "<standard.mly>"
    ( xs )
# 13389 "src/frontend/parser.ml"
             in
            
# 132 "src/frontend/parser.mly"
                         ( l )
# 13394 "src/frontend/parser.ml"
            
          in
          (
# 931 "src/frontend/parser.mly"
                               ( l )
# 13400 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.s_item list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : (Squirrelcore.Theory.SE.Parse.t list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let l =
            let l = 
# 241 "<standard.mly>"
    ( xs )
# 13442 "src/frontend/parser.ml"
             in
            
# 132 "src/frontend/parser.mly"
                         ( l )
# 13447 "src/frontend/parser.ml"
            
          in
          (
# 1175 "src/frontend/parser.mly"
                                           ( l  )
# 13453 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.SE.Parse.t list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.SE.Parse.t list) = 
# 1176 "src/frontend/parser.mly"
                                           ( [] )
# 13472 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = v;
          MenhirLib.EngineTypes.startp = _startpos_v_;
          MenhirLib.EngineTypes.endp = _endpos_v_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let v : (Squirrelcore.Theory.lsymb) = Obj.magic v in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_v_ in
        let _endpos = _endpos_v_ in
        let _v : (Squirrelcore.Theory.lsymb * Squirrelcore.Theory.lsymb list) = 
# 461 "src/frontend/parser.mly"
                                                    ( v, [] )
# 13497 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = v;
                MenhirLib.EngineTypes.startp = _startpos_v_;
                MenhirLib.EngineTypes.endp = _endpos_v_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xs : (Squirrelcore.Theory.lsymb list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let v : (Squirrelcore.Theory.lsymb) = Obj.magic v in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_v_ in
        let _endpos = _endpos__4_ in
        let _v =
          let l =
            let l = 
# 241 "<standard.mly>"
    ( xs )
# 13545 "src/frontend/parser.ml"
             in
            
# 132 "src/frontend/parser.mly"
                         ( l )
# 13550 "src/frontend/parser.ml"
            
          in
          (
# 462 "src/frontend/parser.mly"
                                                    ( v, l  )
# 13556 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.lsymb * Squirrelcore.Theory.lsymb list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (Squirrelcore.Theory.lsymb) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (Squirrelcore.Theory.lsymb) = 
# 458 "src/frontend/parser.mly"
          ( i )
# 13582 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let ll =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 13611 "src/frontend/parser.ml"
            
          in
          (
# 427 "src/frontend/parser.mly"
                 ( L.mk_loc ll "set" )
# 13617 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.lsymb))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let ll =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 13647 "src/frontend/parser.ml"
            
          in
          (
# 428 "src/frontend/parser.mly"
                 ( L.mk_loc ll "equiv" )
# 13653 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.lsymb))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = id;
          MenhirLib.EngineTypes.startp = _startpos_id_;
          MenhirLib.EngineTypes.endp = _endpos_id_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_id_ in
        let _endpos = _endpos_id_ in
        let _v : (Squirrelcore.Theory.lsymb) = 
# 429 "src/frontend/parser.mly"
                 ( id )
# 13679 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let l : ((T.selector * Squirrelcore.TacticsArgs.parser_arg T.ast) list) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_l_ in
        let _v =
          let l = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 13705 "src/frontend/parser.ml"
           in
          (
# 844 "src/frontend/parser.mly"
                             ( l )
# 13710 "src/frontend/parser.ml"
           : ((T.selector * Squirrelcore.TacticsArgs.parser_arg T.ast) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let l : (T.selector) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_l_ in
        let _v =
          let l = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 13737 "src/frontend/parser.ml"
           in
          (
# 832 "src/frontend/parser.mly"
                      ( l )
# 13742 "src/frontend/parser.ml"
           : (T.selector))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = k;
          MenhirLib.EngineTypes.startp = _startpos_k_;
          MenhirLib.EngineTypes.endp = _endpos_k_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let k : (Squirrelcore.Theory.p_ty * Squirrelcore.Theory.var_tags) = Obj.magic k in
        let _2 : unit = Obj.magic _2 in
        let l : (Squirrelcore.Theory.lval list) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_k_ in
        let _v =
          let x =
            let is = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 13784 "src/frontend/parser.ml"
             in
            
# 273 "src/frontend/parser.mly"
                                   ( List.map (fun x -> x,k) is )
# 13789 "src/frontend/parser.ml"
            
          in
          (
# 250 "<standard.mly>"
    ( [ x ] )
# 13795 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.ext_bnd list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = k;
              MenhirLib.EngineTypes.startp = _startpos_k_;
              MenhirLib.EngineTypes.endp = _endpos_k_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.ext_bnd list list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let k : (Squirrelcore.Theory.p_ty * Squirrelcore.Theory.var_tags) = Obj.magic k in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let l : (Squirrelcore.Theory.lval list) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let is = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 13851 "src/frontend/parser.ml"
             in
            
# 273 "src/frontend/parser.mly"
                                   ( List.map (fun x -> x,k) is )
# 13856 "src/frontend/parser.ml"
            
          in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 13862 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.ext_bnd list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = k;
          MenhirLib.EngineTypes.startp = _startpos_k_;
          MenhirLib.EngineTypes.endp = _endpos_k_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let k : (Squirrelcore.Theory.p_ty) = Obj.magic k in
        let _2 : unit = Obj.magic _2 in
        let l : (Squirrelcore.Theory.lsymb list) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_k_ in
        let _v =
          let x =
            let is = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 13904 "src/frontend/parser.ml"
             in
            
# 273 "src/frontend/parser.mly"
                                   ( List.map (fun x -> x,k) is )
# 13909 "src/frontend/parser.ml"
            
          in
          (
# 250 "<standard.mly>"
    ( [ x ] )
# 13915 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.bnd list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = k;
              MenhirLib.EngineTypes.startp = _startpos_k_;
              MenhirLib.EngineTypes.endp = _endpos_k_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.bnd list list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let k : (Squirrelcore.Theory.p_ty) = Obj.magic k in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let l : (Squirrelcore.Theory.lsymb list) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let is = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 13971 "src/frontend/parser.ml"
             in
            
# 273 "src/frontend/parser.mly"
                                   ( List.map (fun x -> x,k) is )
# 13976 "src/frontend/parser.ml"
            
          in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 13982 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.bnd list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = k;
          MenhirLib.EngineTypes.startp = _startpos_k_;
          MenhirLib.EngineTypes.endp = _endpos_k_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let k : (Squirrelcore.Theory.p_ty * Squirrelcore.Theory.var_tags) = Obj.magic k in
        let _2 : unit = Obj.magic _2 in
        let l : (Squirrelcore.Theory.lsymb list) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_k_ in
        let _v =
          let x =
            let is = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 14024 "src/frontend/parser.ml"
             in
            
# 273 "src/frontend/parser.mly"
                                   ( List.map (fun x -> x,k) is )
# 14029 "src/frontend/parser.ml"
            
          in
          (
# 250 "<standard.mly>"
    ( [ x ] )
# 14035 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.bnd_tagged list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = k;
              MenhirLib.EngineTypes.startp = _startpos_k_;
              MenhirLib.EngineTypes.endp = _endpos_k_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.bnd_tagged list list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let k : (Squirrelcore.Theory.p_ty * Squirrelcore.Theory.var_tags) = Obj.magic k in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let l : (Squirrelcore.Theory.lsymb list) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let is = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 14091 "src/frontend/parser.ml"
             in
            
# 273 "src/frontend/parser.mly"
                                   ( List.map (fun x -> x,k) is )
# 14096 "src/frontend/parser.ml"
            
          in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 14102 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.bnd_tagged list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.lsymb) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 14128 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.lsymb list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Squirrelcore.Theory.lsymb) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 253 "<standard.mly>"
    ( x :: xs )
# 14167 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Symbols.dh_hyp) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Symbols.dh_hyp list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 14192 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Symbols.dh_hyp list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Squirrelcore.Symbols.dh_hyp) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Squirrelcore.Symbols.dh_hyp list) = 
# 253 "<standard.mly>"
    ( x :: xs )
# 14231 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.TacticsArgs.fa_arg) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.TacticsArgs.fa_arg list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 14256 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.TacticsArgs.fa_arg list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Squirrelcore.TacticsArgs.fa_arg) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Squirrelcore.TacticsArgs.fa_arg list) = 
# 253 "<standard.mly>"
    ( x :: xs )
# 14295 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (int) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (T.selector) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 14320 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (T.selector) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (int) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (T.selector) = 
# 253 "<standard.mly>"
    ( x :: xs )
# 14359 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.lsymb) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 14384 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.lsymb list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Squirrelcore.Theory.lsymb) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 253 "<standard.mly>"
    ( x :: xs )
# 14423 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.lsymb) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.var_tags) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 14448 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.var_tags) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Squirrelcore.Theory.lsymb) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Squirrelcore.Theory.var_tags) = 
# 253 "<standard.mly>"
    ( x :: xs )
# 14487 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let l : (Squirrelcore.Theory.lsymb) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_l_ in
        let _v =
          let x = 
# 266 "src/frontend/parser.mly"
                                        ( Theory.L_var l )
# 14513 "src/frontend/parser.ml"
           in
          (
# 250 "<standard.mly>"
    ( [ x ] )
# 14518 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.lval list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let l : (Squirrelcore.Theory.var_tags) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let x =
            let ids = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 14560 "src/frontend/parser.ml"
             in
            
# 267 "src/frontend/parser.mly"
                                        ( Theory.L_tuple ids )
# 14565 "src/frontend/parser.ml"
            
          in
          (
# 250 "<standard.mly>"
    ( [ x ] )
# 14571 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.lval list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.lval list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let l : (Squirrelcore.Theory.lsymb) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x = 
# 266 "src/frontend/parser.mly"
                                        ( Theory.L_var l )
# 14612 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 14617 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.lval list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = l;
                MenhirLib.EngineTypes.startp = _startpos_l_;
                MenhirLib.EngineTypes.endp = _endpos_l_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.lval list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _3 : unit = Obj.magic _3 in
        let l : (Squirrelcore.Theory.var_tags) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let ids = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 14673 "src/frontend/parser.ml"
             in
            
# 267 "src/frontend/parser.mly"
                                        ( Theory.L_tuple ids )
# 14678 "src/frontend/parser.ml"
            
          in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 14684 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.lval list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.lsymb) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 14710 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.lsymb list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Squirrelcore.Theory.lsymb) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 253 "<standard.mly>"
    ( x :: xs )
# 14749 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (string L.located) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 14774 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.lsymb list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (string L.located) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 253 "<standard.mly>"
    ( x :: xs )
# 14813 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.term) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.term list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 14838 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.term list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Squirrelcore.Theory.term) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Squirrelcore.Theory.term list) = 
# 253 "<standard.mly>"
    ( x :: xs )
# 14877 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.term) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.term list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 14902 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.term list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Squirrelcore.Theory.term) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Squirrelcore.Theory.term list) = 
# 253 "<standard.mly>"
    ( x :: xs )
# 14941 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (int L.located * Squirrelcore.Theory.term) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((int L.located * Squirrelcore.Theory.term) list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 14966 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : ((int L.located * Squirrelcore.Theory.term) list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (int L.located * Squirrelcore.Theory.term) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : ((int L.located * Squirrelcore.Theory.term) list) = 
# 253 "<standard.mly>"
    ( x :: xs )
# 15005 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = s;
              MenhirLib.EngineTypes.startp = _startpos_s_;
              MenhirLib.EngineTypes.endp = _endpos_s_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let r : (Squirrelcore.ProverTactics.AST.t) = Obj.magic r in
        let _2 : unit = Obj.magic _2 in
        let s : (T.selector) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_r_ in
        let _v =
          let x = 
# 841 "src/frontend/parser.mly"
                         ( (s,r) )
# 15045 "src/frontend/parser.ml"
           in
          (
# 250 "<standard.mly>"
    ( [ x ] )
# 15050 "src/frontend/parser.ml"
           : ((T.selector * Squirrelcore.TacticsArgs.parser_arg T.ast) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = r;
              MenhirLib.EngineTypes.startp = _startpos_r_;
              MenhirLib.EngineTypes.endp = _endpos_r_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = s;
                  MenhirLib.EngineTypes.startp = _startpos_s_;
                  MenhirLib.EngineTypes.endp = _endpos_s_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : ((T.selector * Squirrelcore.TacticsArgs.parser_arg T.ast) list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let r : (Squirrelcore.ProverTactics.AST.t) = Obj.magic r in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let s : (T.selector) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x = 
# 841 "src/frontend/parser.mly"
                         ( (s,r) )
# 15105 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 15110 "src/frontend/parser.ml"
           : ((T.selector * Squirrelcore.TacticsArgs.parser_arg T.ast) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.TacticsArgs.simpl_pat) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.TacticsArgs.simpl_pat list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 15136 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.TacticsArgs.simpl_pat list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Squirrelcore.TacticsArgs.simpl_pat) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Squirrelcore.TacticsArgs.simpl_pat list) = 
# 253 "<standard.mly>"
    ( x :: xs )
# 15175 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.p_ty) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.p_ty list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 15200 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.p_ty list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Squirrelcore.Theory.p_ty) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Squirrelcore.Theory.p_ty list) = 
# 253 "<standard.mly>"
    ( x :: xs )
# 15239 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let l : (Squirrelcore.Theory.bnd list list) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let x =
            let l =
              let args = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 15281 "src/frontend/parser.ml"
               in
              
# 278 "src/frontend/parser.mly"
                                        ( List.flatten args )
# 15286 "src/frontend/parser.ml"
              
            in
            
# 283 "src/frontend/parser.mly"
                                                ( l )
# 15292 "src/frontend/parser.ml"
            
          in
          (
# 250 "<standard.mly>"
    ( [ x ] )
# 15298 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.bnds list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.lsymb) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x = 
# 286 "src/frontend/parser.mly"
                  ( [x, L.mk_loc (L.loc x) Theory.P_ty_pat] )
# 15325 "src/frontend/parser.ml"
           in
          (
# 250 "<standard.mly>"
    ( [ x ] )
# 15330 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.bnds list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.bnds list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let l : (Squirrelcore.Theory.bnd list list) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 15378 "src/frontend/parser.ml"
           in
          let x =
            let l =
              let args = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 15385 "src/frontend/parser.ml"
               in
              
# 278 "src/frontend/parser.mly"
                                        ( List.flatten args )
# 15390 "src/frontend/parser.ml"
              
            in
            
# 283 "src/frontend/parser.mly"
                                                ( l )
# 15396 "src/frontend/parser.ml"
            
          in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 15402 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.bnds list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.bnds list) = Obj.magic xs in
        let x : (Squirrelcore.Theory.lsymb) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 15436 "src/frontend/parser.ml"
           in
          let x = 
# 286 "src/frontend/parser.mly"
                  ( [x, L.mk_loc (L.loc x) Theory.P_ty_pat] )
# 15441 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 15446 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.bnds list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let l : (Squirrelcore.Theory.bnd_tagged list list) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let x =
            let l =
              let args = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 15489 "src/frontend/parser.ml"
               in
              
# 278 "src/frontend/parser.mly"
                                        ( List.flatten args )
# 15494 "src/frontend/parser.ml"
              
            in
            
# 320 "src/frontend/parser.mly"
                                                       ( l )
# 15500 "src/frontend/parser.ml"
            
          in
          (
# 250 "<standard.mly>"
    ( [ x ] )
# 15506 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.bnd_tagged list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.lsymb) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x = 
# 323 "src/frontend/parser.mly"
                  ( [x, (L.mk_loc (L.loc x) Theory.P_ty_pat, [])] )
# 15533 "src/frontend/parser.ml"
           in
          (
# 250 "<standard.mly>"
    ( [ x ] )
# 15538 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.bnd_tagged list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.bnd_tagged list list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let l : (Squirrelcore.Theory.bnd_tagged list list) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 15586 "src/frontend/parser.ml"
           in
          let x =
            let l =
              let args = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 15593 "src/frontend/parser.ml"
               in
              
# 278 "src/frontend/parser.mly"
                                        ( List.flatten args )
# 15598 "src/frontend/parser.ml"
              
            in
            
# 320 "src/frontend/parser.mly"
                                                       ( l )
# 15604 "src/frontend/parser.ml"
            
          in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 15610 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.bnd_tagged list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.bnd_tagged list list) = Obj.magic xs in
        let x : (Squirrelcore.Theory.lsymb) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 15644 "src/frontend/parser.ml"
           in
          let x = 
# 323 "src/frontend/parser.mly"
                  ( [x, (L.mk_loc (L.loc x) Theory.P_ty_pat, [])] )
# 15649 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 15654 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.bnd_tagged list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Decl.c_ty) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Decl.c_tys) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 15680 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Decl.c_tys) = Obj.magic xs in
        let x : (Squirrelcore.Decl.c_ty) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 15713 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 15718 "src/frontend/parser.ml"
           : (Squirrelcore.Decl.c_tys))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.term * Squirrelcore.Theory.term) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Squirrelcore.Theory.term * Squirrelcore.Theory.term) list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 15744 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : ((Squirrelcore.Theory.term * Squirrelcore.Theory.term) list) = Obj.magic xs in
        let x : (Squirrelcore.Theory.term * Squirrelcore.Theory.term) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 15777 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 15782 "src/frontend/parser.ml"
           : ((Squirrelcore.Theory.term * Squirrelcore.Theory.term) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.TacticsArgs.crypto_arg) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.TacticsArgs.crypto_args) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 15808 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.TacticsArgs.crypto_args) = Obj.magic xs in
        let x : (Squirrelcore.TacticsArgs.crypto_arg) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 15841 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 15846 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.crypto_args))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let l : (Squirrelcore.Theory.ext_bnd list list) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let x =
            let l =
              let args = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 15889 "src/frontend/parser.ml"
               in
              
# 278 "src/frontend/parser.mly"
                                        ( List.flatten args )
# 15894 "src/frontend/parser.ml"
              
            in
            
# 333 "src/frontend/parser.mly"
                                                 ( l )
# 15900 "src/frontend/parser.ml"
            
          in
          (
# 250 "<standard.mly>"
    ( [ x ] )
# 15906 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.ext_bnds list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.lsymb) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x = 
# 336 "src/frontend/parser.mly"
                  ( [Theory.L_var x, (L.mk_loc (L.loc x) Theory.P_ty_pat, [])] )
# 15933 "src/frontend/parser.ml"
           in
          (
# 250 "<standard.mly>"
    ( [ x ] )
# 15938 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.ext_bnds list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.ext_bnds list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let l : (Squirrelcore.Theory.ext_bnd list list) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 15986 "src/frontend/parser.ml"
           in
          let x =
            let l =
              let args = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 15993 "src/frontend/parser.ml"
               in
              
# 278 "src/frontend/parser.mly"
                                        ( List.flatten args )
# 15998 "src/frontend/parser.ml"
              
            in
            
# 333 "src/frontend/parser.mly"
                                                 ( l )
# 16004 "src/frontend/parser.ml"
            
          in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 16010 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.ext_bnds list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.ext_bnds list) = Obj.magic xs in
        let x : (Squirrelcore.Theory.lsymb) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 16044 "src/frontend/parser.ml"
           in
          let x = 
# 336 "src/frontend/parser.mly"
                  ( [Theory.L_var x, (L.mk_loc (L.loc x) Theory.P_ty_pat, [])] )
# 16049 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 16054 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.ext_bnds list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.lsymb * Squirrelcore.Theory.term) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.term) list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 16080 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.term) list) = Obj.magic xs in
        let x : (Squirrelcore.Theory.lsymb * Squirrelcore.Theory.term) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 16113 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 16118 "src/frontend/parser.ml"
           : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.term) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Crypto.Parse.var_decl) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Crypto.Parse.var_decl list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 16144 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Crypto.Parse.var_decl list) = Obj.magic xs in
        let x : (Squirrelcore.Crypto.Parse.var_decl) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 16177 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 16182 "src/frontend/parser.ml"
           : (Squirrelcore.Crypto.Parse.var_decl list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Crypto.Parse.var_rnd) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Crypto.Parse.var_rnd list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 16208 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Crypto.Parse.var_rnd list) = Obj.magic xs in
        let x : (Squirrelcore.Crypto.Parse.var_rnd) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 16241 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 16246 "src/frontend/parser.ml"
           : (Squirrelcore.Crypto.Parse.var_rnd list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.TacticsArgs.intro_pattern) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.TacticsArgs.intro_pattern list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 16272 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.TacticsArgs.intro_pattern list) = Obj.magic xs in
        let x : (Squirrelcore.TacticsArgs.intro_pattern) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 16305 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 16310 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.intro_pattern list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.lsymb) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 16336 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.lsymb list) = Obj.magic xs in
        let x : (Squirrelcore.Theory.lsymb) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 16369 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 16374 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.lsymb list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.lsymb * Squirrelcore.Theory.bnds) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.bnds) list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 16400 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.bnds) list) = Obj.magic xs in
        let x : (Squirrelcore.Theory.lsymb * Squirrelcore.Theory.bnds) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 16433 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 16438 "src/frontend/parser.ml"
           : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.bnds) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.TacticsArgs.named_arg) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.TacticsArgs.named_args) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 16464 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.TacticsArgs.named_args) = Obj.magic xs in
        let x : (Squirrelcore.TacticsArgs.named_arg) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 16497 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 16502 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.named_args))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.TacticsArgs.naming_pat) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.TacticsArgs.naming_pat list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 16528 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.TacticsArgs.naming_pat list) = Obj.magic xs in
        let x : (Squirrelcore.TacticsArgs.naming_pat) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 16561 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 16566 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.naming_pat list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Crypto.Parse.oracle_decl) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Crypto.Parse.oracle_decl list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 16592 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Crypto.Parse.oracle_decl list) = Obj.magic xs in
        let x : (Squirrelcore.Crypto.Parse.oracle_decl) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 16625 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 16630 "src/frontend/parser.ml"
           : (Squirrelcore.Crypto.Parse.oracle_decl list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.pt_app_arg) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.pt_app_arg list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 16656 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.pt_app_arg list) = Obj.magic xs in
        let x : (Squirrelcore.Theory.pt_app_arg) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 16689 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 16694 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.pt_app_arg list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.TacticsArgs.rw_arg) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.TacticsArgs.rw_arg list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 16720 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.TacticsArgs.rw_arg list) = Obj.magic xs in
        let x : (Squirrelcore.TacticsArgs.rw_arg) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 16753 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 16758 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.rw_arg list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.TacticsArgs.s_item) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.TacticsArgs.s_item list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 16784 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.TacticsArgs.s_item list) = Obj.magic xs in
        let x : (Squirrelcore.TacticsArgs.s_item) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 16817 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 16822 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.s_item list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.lsymb * Squirrelcore.Theory.lsymb list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.lsymb list) list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 16848 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.lsymb list) list) = Obj.magic xs in
        let x : (Squirrelcore.Theory.lsymb * Squirrelcore.Theory.lsymb list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 16881 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 16886 "src/frontend/parser.ml"
           : ((Squirrelcore.Theory.lsymb * Squirrelcore.Theory.lsymb list) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.lsymb) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 16912 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.lsymb list) = Obj.magic xs in
        let x : (Squirrelcore.Theory.lsymb) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 16945 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 16950 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.lsymb list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.TacticsArgs.simpl_pat) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.TacticsArgs.simpl_pat list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 16976 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.TacticsArgs.simpl_pat list) = Obj.magic xs in
        let x : (Squirrelcore.TacticsArgs.simpl_pat) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 17009 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 17014 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.simpl_pat list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.term) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.term list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 17040 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.term list) = Obj.magic xs in
        let x : (Squirrelcore.Theory.term) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 17073 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 17078 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.SystemExpr.Parse.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.SE.Parse.t list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 17104 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.SE.Parse.t list) = Obj.magic xs in
        let x : (Squirrelcore.SystemExpr.Parse.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 17137 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 17142 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.SE.Parse.t list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.lsymb) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 17168 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.Theory.lsymb list) = Obj.magic xs in
        let x : (Squirrelcore.Theory.lsymb) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _2 = 
# 129 "src/frontend/parser.mly"
  ( () )
# 17201 "src/frontend/parser.ml"
           in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 17206 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.lsymb list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = param;
            MenhirLib.EngineTypes.startp = _startpos_param_;
            MenhirLib.EngineTypes.endp = _endpos_param_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = n;
                MenhirLib.EngineTypes.startp = _startpos_n_;
                MenhirLib.EngineTypes.endp = _endpos_n_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let param : (Squirrelcore.Config.p_param_val) = Obj.magic param in
        let _3 : unit = Obj.magic _3 in
        let n : (
# 17 "src/frontend/parser.mly"
       (string)
# 17255 "src/frontend/parser.ml"
        ) = Obj.magic n in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Squirrelcore.Config.p_set_param) = 
# 1300 "src/frontend/parser.mly"
                                     ( (n, param) )
# 17264 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = n_ip;
          MenhirLib.EngineTypes.startp = _startpos_n_ip_;
          MenhirLib.EngineTypes.endp = _endpos_n_ip_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let n_ip : (Squirrelcore.TacticsArgs.naming_pat) = Obj.magic n_ip in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_n_ip_ in
        let _endpos = _endpos_n_ip_ in
        let _v : (Squirrelcore.TacticsArgs.simpl_pat) = 
# 796 "src/frontend/parser.mly"
                   ( TacticsArgs.SNamed n_ip )
# 17289 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ao_ip;
          MenhirLib.EngineTypes.startp = _startpos_ao_ip_;
          MenhirLib.EngineTypes.endp = _endpos_ao_ip_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ao_ip : (Squirrelcore.TacticsArgs.and_or_pat) = Obj.magic ao_ip in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ao_ip_ in
        let _endpos = _endpos_ao_ip_ in
        let _v : (Squirrelcore.TacticsArgs.simpl_pat) = 
# 797 "src/frontend/parser.mly"
                  ( TacticsArgs.SAndOr ao_ip )
# 17314 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : ([ `LeftToRight | `RightToLeft ]) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let d =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 17347 "src/frontend/parser.ml"
            
          in
          (
# 798 "src/frontend/parser.mly"
                    ( TacticsArgs.Srewrite d )
# 17353 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.simpl_pat))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let l =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 17387 "src/frontend/parser.ml"
            
          in
          (
# 261 "src/frontend/parser.mly"
                     ( L.mk_loc (L.loc l) "_x" )
# 17393 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.lsymb))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let l : (Squirrelcore.Theory.lsymb) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_l_ in
        let _v : (Squirrelcore.Theory.lsymb) = 
# 262 "src/frontend/parser.mly"
                     ( l )
# 17419 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = id;
          MenhirLib.EngineTypes.startp = _startpos_id_;
          MenhirLib.EngineTypes.endp = _endpos_id_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_id_ in
        let _endpos = _endpos_id_ in
        let _v : (string L.located) = 
# 761 "src/frontend/parser.mly"
           ( id )
# 17444 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (int) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let i =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 17477 "src/frontend/parser.ml"
            
          in
          (
# 762 "src/frontend/parser.mly"
                ( L.mk_loc (L.loc i) (string_of_int (L.unloc i)) )
# 17483 "src/frontend/parser.ml"
           : (string L.located))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.pt_cnt) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let pt =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 17517 "src/frontend/parser.ml"
            
          in
          (
# 876 "src/frontend/parser.mly"
                  ( pt )
# 17523 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.pt))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = head;
          MenhirLib.EngineTypes.startp = _startpos_head_;
          MenhirLib.EngineTypes.endp = _endpos_head_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let head : (Squirrelcore.Theory.lsymb) = Obj.magic head in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_head_ in
        let _endpos = _endpos_head_ in
        let _v : (Squirrelcore.Theory.pt_cnt) = 
# 870 "src/frontend/parser.mly"
               ( Theory.PT_symb head )
# 17549 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = pt;
            MenhirLib.EngineTypes.startp = _startpos_pt_;
            MenhirLib.EngineTypes.endp = _endpos_pt_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let pt : (Squirrelcore.Theory.pt) = Obj.magic pt in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Squirrelcore.Theory.pt_cnt) = 
# 871 "src/frontend/parser.mly"
                                    ( Theory.PT_localize pt )
# 17602 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = pt;
            MenhirLib.EngineTypes.startp = _startpos_pt_;
            MenhirLib.EngineTypes.endp = _endpos_pt_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let pt : (Squirrelcore.Theory.pt_cnt) = Obj.magic pt in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Squirrelcore.Theory.pt_cnt) = 
# 873 "src/frontend/parser.mly"
    ( pt )
# 17641 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (Squirrelcore.Theory.lsymb) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (Squirrelcore.Theory.lsymb option) = 
# 1249 "src/frontend/parser.mly"
             ( Some i )
# 17666 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.Theory.lsymb option) = 
# 1250 "src/frontend/parser.mly"
             ( None )
# 17691 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.term_i) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let t =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 17724 "src/frontend/parser.ml"
            
          in
          (
# 248 "src/frontend/parser.mly"
                 ( t )
# 17730 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = id;
          MenhirLib.EngineTypes.startp = _startpos_id_;
          MenhirLib.EngineTypes.endp = _endpos_id_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_id_ in
        let _endpos = _endpos_id_ in
        let _v : (Squirrelcore.Theory.term_i) = 
# 181 "src/frontend/parser.mly"
                                ( Theory.Symb id )
# 17756 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.Theory.term_i) = 
# 182 "src/frontend/parser.mly"
                                ( Theory.Tpat )
# 17781 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = t0;
            MenhirLib.EngineTypes.startp = _startpos_t0_;
            MenhirLib.EngineTypes.endp = _endpos_t0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let _4 : unit = Obj.magic _4 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (Squirrelcore.Theory.term_i) = 
# 184 "src/frontend/parser.mly"
                                          ( Theory.Diff (t,t0) )
# 17841 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = l;
                MenhirLib.EngineTypes.startp = _startpos_l_;
                MenhirLib.EngineTypes.endp = _endpos_l_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _4 : unit = Obj.magic _4 in
        let l : (Squirrelcore.Theory.ext_bnd list list) = Obj.magic l in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let vs =
            let args = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 17903 "src/frontend/parser.ml"
             in
            
# 278 "src/frontend/parser.mly"
                                        ( List.flatten args )
# 17908 "src/frontend/parser.ml"
            
          in
          (
# 188 "src/frontend/parser.mly"
                                          ( Theory.Quant (Seq,vs,t) )
# 17914 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let f : (Squirrelcore.Theory.term) = Obj.magic f in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_f_ in
        let _v =
          let l =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 17955 "src/frontend/parser.ml"
            
          in
          (
# 191 "src/frontend/parser.mly"
    ( let fsymb = L.mk_loc (L.loc l) "not" in
      Theory.mk_app_i (Theory.mk_symb fsymb) [f] )
# 17962 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 17992 "src/frontend/parser.ml"
            
          in
          (
# 194 "src/frontend/parser.mly"
                 ( Theory.Symb (L.mk_loc l "false") )
# 17998 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 18028 "src/frontend/parser.ml"
            
          in
          (
# 196 "src/frontend/parser.mly"
                 ( Theory.Symb (L.mk_loc l "true") )
# 18034 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let l : (Squirrelcore.Theory.term list) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let l =
            let x = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 18076 "src/frontend/parser.ml"
             in
            
# 139 "src/frontend/parser.mly"
                    ( x )
# 18081 "src/frontend/parser.ml"
            
          in
          (
# 199 "src/frontend/parser.mly"
    ( match l with
      | [t] -> L.unloc t
      | _ -> Theory.Tuple l )
# 18089 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.p_ty_i) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let ty =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 18123 "src/frontend/parser.ml"
            
          in
          (
# 451 "src/frontend/parser.mly"
                ( ty )
# 18129 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.p_ty))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.Theory.p_ty_i) = 
# 440 "src/frontend/parser.mly"
                                 ( Theory.P_message )
# 18155 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.Theory.p_ty_i) = 
# 441 "src/frontend/parser.mly"
                                 ( Theory.P_index )
# 18180 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.Theory.p_ty_i) = 
# 442 "src/frontend/parser.mly"
                                 ( Theory.P_timestamp )
# 18205 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.Theory.p_ty_i) = 
# 443 "src/frontend/parser.mly"
                                 ( Theory.P_boolean )
# 18230 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.Theory.p_ty_i) = 
# 444 "src/frontend/parser.mly"
                                 ( Theory.P_boolean )
# 18255 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = tv;
          MenhirLib.EngineTypes.startp = _startpos_tv_;
          MenhirLib.EngineTypes.endp = _endpos_tv_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let tv : (Squirrelcore.Theory.lsymb) = Obj.magic tv in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_tv_ in
        let _endpos = _endpos_tv_ in
        let _v : (Squirrelcore.Theory.p_ty_i) = 
# 445 "src/frontend/parser.mly"
                                 ( Theory.P_tvar tv )
# 18280 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let l : (Squirrelcore.Theory.lsymb) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_l_ in
        let _v : (Squirrelcore.Theory.p_ty_i) = 
# 446 "src/frontend/parser.mly"
                                 ( Theory.P_tbase l )
# 18305 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let ty : (Squirrelcore.Theory.p_ty_i) = Obj.magic ty in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Squirrelcore.Theory.p_ty_i) = 
# 447 "src/frontend/parser.mly"
                                 ( ty )
# 18344 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.Theory.p_ty_i) = 
# 448 "src/frontend/parser.mly"
                                 ( Theory.P_ty_pat )
# 18369 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (SE.Parse.sys_cnt) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let a =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 18402 "src/frontend/parser.ml"
            
          in
          (
# 1242 "src/frontend/parser.mly"
                          ( a )
# 18408 "src/frontend/parser.ml"
           : (SE.Parse.sys_cnt L.located))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (SE.Parse.sys_cnt) = 
# 1234 "src/frontend/parser.mly"
                                              ( SE.Parse.NoSystem )
# 18427 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let x : (SE.Parse.item list) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let l =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 18474 "src/frontend/parser.ml"
            
          in
          (
# 1235 "src/frontend/parser.mly"
                                              ( SE.Parse.System l )
# 18480 "src/frontend/parser.ml"
           : (SE.Parse.sys_cnt))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = x_inlined1;
            MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = x;
                    MenhirLib.EngineTypes.startp = _startpos_x_;
                    MenhirLib.EngineTypes.endp = _endpos_x_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : unit = Obj.magic _9 in
        let x_inlined1 : (SE.Parse.item list) = Obj.magic x_inlined1 in
        let _7 : unit = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let x : (SE.Parse.item list) = Obj.magic x in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v =
          let p =
            let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 18571 "src/frontend/parser.ml"
            
          in
          let s =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 18584 "src/frontend/parser.ml"
            
          in
          (
# 1239 "src/frontend/parser.mly"
                                              ( SE.Parse.Set_pair (s,p) )
# 18590 "src/frontend/parser.ml"
           : (SE.Parse.sys_cnt))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let x : (SE.Parse.item list) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let s =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 18638 "src/frontend/parser.ml"
            
          in
          (
# 1231 "src/frontend/parser.mly"
                                              ( s )
# 18644 "src/frontend/parser.ml"
           : (Squirrelcore.SystemExpr.Parse.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (Squirrelcore.Theory.lsymb) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (SE.Parse.item) = 
# 1223 "src/frontend/parser.mly"
                        ( SE.Parse.{ alias = None; system = i; projection = None   } )
# 18670 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let p : (Squirrelcore.Theory.lsymb) = Obj.magic p in
        let _2 : unit = Obj.magic _2 in
        let i : (Squirrelcore.Theory.lsymb) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_p_ in
        let _v : (SE.Parse.item) = 
# 1224 "src/frontend/parser.mly"
                        ( SE.Parse.{ alias = None; system = i; projection = Some p } )
# 18709 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (SE.Parse.item) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (SE.Parse.item list) = 
# 1227 "src/frontend/parser.mly"
                                         (  [i] )
# 18734 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let l : (SE.Parse.item list) = Obj.magic l in
        let _2 : unit = Obj.magic _2 in
        let i : (SE.Parse.item) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_l_ in
        let _v : (SE.Parse.item list) = 
# 1228 "src/frontend/parser.mly"
                                         ( i::l )
# 18773 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = gf;
          MenhirLib.EngineTypes.startp = _startpos_gf_;
          MenhirLib.EngineTypes.endp = _endpos_gf_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let gf : (Squirrelcore.Theory.global_formula) = Obj.magic gf in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_gf_ in
        let _v : (Squirrelcore.Decl.global_rule) = 
# 509 "src/frontend/parser.mly"
    ( Decl.Rename gf )
# 18805 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = enc;
          MenhirLib.EngineTypes.startp = _startpos_enc_;
          MenhirLib.EngineTypes.endp = _endpos_enc_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = args;
              MenhirLib.EngineTypes.startp = _startpos_args_;
              MenhirLib.EngineTypes.endp = _endpos_args_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let enc : (Squirrelcore.Theory.term) = Obj.magic enc in
        let _3 : unit = Obj.magic _3 in
        let args : (Squirrelcore.Theory.bnds) = Obj.magic args in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_enc_ in
        let _v : (Squirrelcore.Decl.global_rule) = 
# 512 "src/frontend/parser.mly"
    ( Decl.CCA (args, enc) )
# 18851 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = hash;
          MenhirLib.EngineTypes.startp = _startpos_hash_;
          MenhirLib.EngineTypes.endp = _endpos_hash_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = args;
              MenhirLib.EngineTypes.startp = _startpos_args_;
              MenhirLib.EngineTypes.endp = _endpos_args_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let hash : (Squirrelcore.Theory.term) = Obj.magic hash in
        let _3 : unit = Obj.magic _3 in
        let args : (Squirrelcore.Theory.bnds) = Obj.magic args in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_hash_ in
        let _v : (Squirrelcore.Decl.global_rule) = 
# 515 "src/frontend/parser.mly"
    ( Decl.PRF (args, hash) )
# 18897 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = hash;
          MenhirLib.EngineTypes.startp = _startpos_hash_;
          MenhirLib.EngineTypes.endp = _endpos_hash_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = args;
              MenhirLib.EngineTypes.startp = _startpos_args_;
              MenhirLib.EngineTypes.endp = _endpos_args_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let hash : (Squirrelcore.Theory.term) = Obj.magic hash in
        let _4 : unit = Obj.magic _4 in
        let args : (Squirrelcore.Theory.bnds) = Obj.magic args in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_hash_ in
        let _v : (Squirrelcore.Decl.global_rule) = 
# 518 "src/frontend/parser.mly"
    ( Decl.PRFt (args, hash) )
# 18950 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let p : (Squirrelcore.TacticsArgs.rw_arg list) = Obj.magic p in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_p_ in
        let _v : (Squirrelcore.Decl.global_rule) = 
# 521 "src/frontend/parser.mly"
    ( Decl.Rewrite p )
# 18982 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let t : (Squirrelcore.ProverTactics.AST.t) = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Squirrelcore.ProverTactics.AST.t) = 
# 983 "src/frontend/parser.mly"
                                       ( t )
# 19021 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let r : (Squirrelcore.ProverTactics.AST.t) = Obj.magic r in
        let _2 : unit = Obj.magic _2 in
        let l : (Squirrelcore.ProverTactics.AST.t) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : (Squirrelcore.ProverTactics.AST.t) = 
# 984 "src/frontend/parser.mly"
                                       ( T.AndThen [l;r] )
# 19060 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = sls;
            MenhirLib.EngineTypes.startp = _startpos_sls_;
            MenhirLib.EngineTypes.endp = _endpos_sls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let sls : ((T.selector * Squirrelcore.TacticsArgs.parser_arg T.ast) list) = Obj.magic sls in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let l : (Squirrelcore.ProverTactics.AST.t) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos__5_ in
        let _v : (Squirrelcore.ProverTactics.AST.t) = 
# 986 "src/frontend/parser.mly"
                                       ( T.AndThenSel (l,sls) )
# 19113 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = s;
              MenhirLib.EngineTypes.startp = _startpos_s_;
              MenhirLib.EngineTypes.endp = _endpos_s_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let r : (Squirrelcore.ProverTactics.AST.t) = Obj.magic r in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let s : (T.selector) = Obj.magic s in
        let _2 : unit = Obj.magic _2 in
        let l : (Squirrelcore.ProverTactics.AST.t) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v =
          let sl = 
# 841 "src/frontend/parser.mly"
                         ( (s,r) )
# 19167 "src/frontend/parser.ml"
           in
          (
# 988 "src/frontend/parser.mly"
                                       ( T.AndThenSel (l,[sl]) )
# 19172 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let t : (Squirrelcore.ProverTactics.AST.t) = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 19209 "src/frontend/parser.ml"
            
          in
          (
# 989 "src/frontend/parser.mly"
                                       ( T.By (t,l) )
# 19215 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let r : (Squirrelcore.ProverTactics.AST.t) = Obj.magic r in
        let _2 : unit = Obj.magic _2 in
        let l : (Squirrelcore.ProverTactics.AST.t) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : (Squirrelcore.ProverTactics.AST.t) = 
# 990 "src/frontend/parser.mly"
                                       ( T.OrElse [l;r] )
# 19255 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let l : (Squirrelcore.ProverTactics.AST.t) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_l_ in
        let _v : (Squirrelcore.ProverTactics.AST.t) = 
# 991 "src/frontend/parser.mly"
                                       ( T.Try l )
# 19287 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let t : (Squirrelcore.ProverTactics.AST.t) = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : (Squirrelcore.ProverTactics.AST.t) = 
# 992 "src/frontend/parser.mly"
                                       ( T.Repeat t )
# 19319 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = id;
            MenhirLib.EngineTypes.startp = _startpos_id_;
            MenhirLib.EngineTypes.endp = _endpos_id_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let t : (Squirrelcore.TacticsArgs.parser_arg list) = Obj.magic t in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_id_ in
        let _endpos = _endpos_t_ in
        let _v : (Squirrelcore.ProverTactics.AST.t) = 
# 993 "src/frontend/parser.mly"
                                       ( mk_abstract (L.loc id) (L.unloc id) t )
# 19351 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = game;
            MenhirLib.EngineTypes.startp = _startpos_game_;
            MenhirLib.EngineTypes.endp = _endpos_game_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Squirrelcore.TacticsArgs.crypto_args) = Obj.magic xs in
        let game : (Squirrelcore.Theory.lsymb) = Obj.magic game in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let args =
            let l = 
# 241 "<standard.mly>"
    ( xs )
# 19392 "src/frontend/parser.ml"
             in
            
# 132 "src/frontend/parser.mly"
                         ( l )
# 19397 "src/frontend/parser.ml"
            
          in
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 19406 "src/frontend/parser.ml"
            
          in
          (
# 1000 "src/frontend/parser.mly"
    ( mk_abstract l "crypto" [TacticsArgs.Crypto (game,args)] )
# 19412 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let a : (Squirrelcore.TacticsArgs.named_args) = Obj.magic a in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_t_ in
        let _v =
          let id =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 19460 "src/frontend/parser.ml"
            
          in
          (
# 1004 "src/frontend/parser.mly"
    ( mk_abstract (L.loc id) "case" [TacticsArgs.Named_args a; Theory t] )
# 19466 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = a;
          MenhirLib.EngineTypes.startp = _startpos_a_;
          MenhirLib.EngineTypes.endp = _endpos_a_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let a : (Squirrelcore.TacticsArgs.named_args) = Obj.magic a in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_a_ in
        let _v =
          let id =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 19507 "src/frontend/parser.ml"
            
          in
          (
# 1008 "src/frontend/parser.mly"
    ( mk_abstract (L.loc id) "smt" [TacticsArgs.Named_args a] )
# 19513 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 19550 "src/frontend/parser.ml"
            
          in
          (
# 1012 "src/frontend/parser.mly"
    ( mk_abstract l "cs" [TacticsArgs.Theory t] )
# 19556 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let x : (int) = Obj.magic x in
        let _3 : unit = Obj.magic _3 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let i =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 19611 "src/frontend/parser.ml"
            
          in
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 19620 "src/frontend/parser.ml"
            
          in
          (
# 1016 "src/frontend/parser.mly"
    ( mk_abstract l "cs" [TacticsArgs.Theory t; 
                          TacticsArgs.Int_parsed i] )
# 19627 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let l : (Squirrelcore.TacticsArgs.fa_arg list) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_l_ in
        let _v =
          let args = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 19661 "src/frontend/parser.ml"
           in
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 19669 "src/frontend/parser.ml"
            
          in
          (
# 1021 "src/frontend/parser.mly"
    ( mk_abstract l "fa" [TacticsArgs.Fa args] )
# 19675 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (int) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let i =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 19716 "src/frontend/parser.ml"
            
          in
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 19725 "src/frontend/parser.ml"
            
          in
          (
# 1025 "src/frontend/parser.mly"
    ( mk_abstract l "fa" [TacticsArgs.Int_parsed i] )
# 19731 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 19761 "src/frontend/parser.ml"
            
          in
          (
# 1029 "src/frontend/parser.mly"
    ( mk_abstract l "fa" [] )
# 19767 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let p : (Squirrelcore.TacticsArgs.intro_pattern list) = Obj.magic p in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_p_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 19804 "src/frontend/parser.ml"
            
          in
          (
# 1032 "src/frontend/parser.mly"
    ( mk_abstract l "intro" [TacticsArgs.IntroPat p] )
# 19810 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let p : (Squirrelcore.TacticsArgs.intro_pattern list) = Obj.magic p in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.ProverTactics.AST.t) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_p_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 19854 "src/frontend/parser.ml"
            
          in
          (
# 1035 "src/frontend/parser.mly"
    ( T.AndThen [t; mk_abstract l "intro" [TacticsArgs.IntroPat p]] )
# 19860 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (Squirrelcore.Theory.lsymb) = Obj.magic i in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 19897 "src/frontend/parser.ml"
            
          in
          (
# 1038 "src/frontend/parser.mly"
    ( mk_abstract l "destruct" [TacticsArgs.String_name i] )
# 19903 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let p : (Squirrelcore.TacticsArgs.and_or_pat) = Obj.magic p in
        let _3 : unit = Obj.magic _3 in
        let i : (Squirrelcore.Theory.lsymb) = Obj.magic i in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_p_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 19954 "src/frontend/parser.ml"
            
          in
          (
# 1041 "src/frontend/parser.mly"
    ( mk_abstract l "destruct" [TacticsArgs.String_name i;
                                TacticsArgs.AndOrPat p] )
# 19961 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let p : (Squirrelcore.TacticsArgs.naming_pat) = Obj.magic p in
        let _3 : unit = Obj.magic _3 in
        let i : (Squirrelcore.Theory.lsymb) = Obj.magic i in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_p_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 20012 "src/frontend/parser.ml"
            
          in
          (
# 1045 "src/frontend/parser.mly"
    ( mk_abstract l "localize" [TacticsArgs.String_name i;
                                TacticsArgs.NamingPat p] )
# 20019 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = args;
          MenhirLib.EngineTypes.startp = _startpos_args_;
          MenhirLib.EngineTypes.endp = _endpos_args_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let args : (Squirrelcore.TacticsArgs.parser_arg list) = Obj.magic args in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_args_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 20056 "src/frontend/parser.ml"
            
          in
          (
# 1049 "src/frontend/parser.mly"
    ( mk_abstract l "depends" args )
# 20062 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = args;
              MenhirLib.EngineTypes.startp = _startpos_args_;
              MenhirLib.EngineTypes.endp = _endpos_args_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let t : (Squirrelcore.ProverTactics.AST.t) = Obj.magic t in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let args : (Squirrelcore.TacticsArgs.parser_arg list) = Obj.magic args in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v =
          let l1 =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 20114 "src/frontend/parser.ml"
            
          in
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 20123 "src/frontend/parser.ml"
            
          in
          (
# 1052 "src/frontend/parser.mly"
    ( T.AndThenSel (mk_abstract l "depends" args, [[1], T.By (t,l1)]) )
# 20129 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = id;
          MenhirLib.EngineTypes.startp = _startpos_id_;
          MenhirLib.EngineTypes.endp = _endpos_id_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _3 : unit = Obj.magic _3 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_id_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 20180 "src/frontend/parser.ml"
            
          in
          (
# 1055 "src/frontend/parser.mly"
    ( mk_abstract l "remember" [TacticsArgs.Remember (t, id)] )
# 20186 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let t : (Squirrelcore.TacticsArgs.parser_arg list) = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 20223 "src/frontend/parser.ml"
            
          in
          (
# 1058 "src/frontend/parser.mly"
    ( mk_abstract l "exists" t )
# 20229 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let t : (Squirrelcore.ProverTactics.AST.t) = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : (Squirrelcore.ProverTactics.AST.t) = 
# 1060 "src/frontend/parser.mly"
                                       ( T.Modifier ("nosimpl", t) )
# 20262 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let t : (Squirrelcore.ProverTactics.AST.t) = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : (Squirrelcore.ProverTactics.AST.t) = 
# 1061 "src/frontend/parser.mly"
                                       ( T.Time t )
# 20294 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (
# 16 "src/frontend/parser.mly"
       (int)
# 20321 "src/frontend/parser.ml"
        ) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let i =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 20338 "src/frontend/parser.ml"
            
          in
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 20347 "src/frontend/parser.ml"
            
          in
          (
# 1064 "src/frontend/parser.mly"
    ( mk_abstract l "cycle" [TacticsArgs.Int_parsed i] )
# 20353 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (
# 16 "src/frontend/parser.mly"
       (int)
# 20387 "src/frontend/parser.ml"
        ) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let i =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 20405 "src/frontend/parser.ml"
            
          in
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 20414 "src/frontend/parser.ml"
            
          in
          (
# 1067 "src/frontend/parser.mly"
    ( let im = L.mk_loc (L.loc i) (- (L.unloc i)) in
      mk_abstract l "cycle" [TacticsArgs.Int_parsed im] )
# 20421 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ts;
          MenhirLib.EngineTypes.startp = _startpos_ts_;
          MenhirLib.EngineTypes.endp = _endpos_ts_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let ts : (
# 17 "src/frontend/parser.mly"
       (string)
# 20461 "src/frontend/parser.ml"
        ) = Obj.magic ts in
        let _3 : unit = Obj.magic _3 in
        let t : (Squirrelcore.ProverTactics.AST.t) = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ts_ in
        let _v : (Squirrelcore.ProverTactics.AST.t) = 
# 1070 "src/frontend/parser.mly"
                               ( T.CheckFail (ts, t) )
# 20472 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let l : (Squirrelcore.Theory.lsymb list) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_l_ in
        let _v =
          let ids = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 20505 "src/frontend/parser.ml"
           in
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 20513 "src/frontend/parser.ml"
            
          in
          (
# 1073 "src/frontend/parser.mly"
    ( let ids = List.map (fun id -> TacticsArgs.String_name id) ids in
      mk_abstract l "revert" ids )
# 20520 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = n_ips_o;
          MenhirLib.EngineTypes.startp = _startpos_n_ips_o_;
          MenhirLib.EngineTypes.endp = _endpos_n_ips_o_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let n_ips_o : (Squirrelcore.TacticsArgs.naming_pat list option) = Obj.magic n_ips_o in
        let l : (Squirrelcore.Theory.term list) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_n_ips_o_ in
        let _v =
          let terms = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 20561 "src/frontend/parser.ml"
           in
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 20569 "src/frontend/parser.ml"
            
          in
          (
# 1077 "src/frontend/parser.mly"
    ( mk_abstract l "generalize" [TacticsArgs.Generalize (terms, n_ips_o)] )
# 20575 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = n_ips_o;
          MenhirLib.EngineTypes.startp = _startpos_n_ips_o_;
          MenhirLib.EngineTypes.endp = _endpos_n_ips_o_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let n_ips_o : (Squirrelcore.TacticsArgs.naming_pat list option) = Obj.magic n_ips_o in
        let l : (Squirrelcore.Theory.term list) = Obj.magic l in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_n_ips_o_ in
        let _v =
          let terms = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 20623 "src/frontend/parser.ml"
           in
          let l =
            let _1 = 
# 908 "src/frontend/parser.mly"
                       ( )
# 20629 "src/frontend/parser.ml"
             in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 20637 "src/frontend/parser.ml"
            
          in
          (
# 1080 "src/frontend/parser.mly"
    ( mk_abstract l "generalize dependent"
                  [TacticsArgs.Generalize (terms, n_ips_o)] )
# 20644 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let t : (Squirrelcore.TacticsArgs.parser_arg list) = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 20681 "src/frontend/parser.ml"
            
          in
          (
# 1084 "src/frontend/parser.mly"
    ( mk_abstract l "induction" t)
# 20687 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t : (Squirrelcore.TacticsArgs.parser_arg list) = Obj.magic t in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v =
          let l =
            let _1 = 
# 911 "src/frontend/parser.mly"
                      ( )
# 20729 "src/frontend/parser.ml"
             in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 20737 "src/frontend/parser.ml"
            
          in
          (
# 1087 "src/frontend/parser.mly"
    ( mk_abstract l "dependent induction" t )
# 20743 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let l : (Squirrelcore.Theory.lsymb list) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_l_ in
        let _v =
          let ids = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 20777 "src/frontend/parser.ml"
           in
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 20785 "src/frontend/parser.ml"
            
          in
          (
# 1090 "src/frontend/parser.mly"
    ( let ids = List.map (fun id -> TacticsArgs.String_name id) ids in
      mk_abstract l "clear" ids )
# 20792 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ip;
          MenhirLib.EngineTypes.startp = _startpos_ip_;
          MenhirLib.EngineTypes.endp = _endpos_ip_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = p;
            MenhirLib.EngineTypes.startp = _startpos_p_;
            MenhirLib.EngineTypes.endp = _endpos_p_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ip : (Squirrelcore.TacticsArgs.have_ip option) = Obj.magic ip in
        let p : (Squirrelcore.Theory.term) = Obj.magic p in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ip_ in
        let _v =
          let t =
            let l =
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 20837 "src/frontend/parser.ml"
              
            in
            
# 939 "src/frontend/parser.mly"
    ( mk_abstract l "have" [TacticsArgs.Have (ip, Theory.Local p)] )
# 20843 "src/frontend/parser.ml"
            
          in
          (
# 1095 "src/frontend/parser.mly"
               ( t )
# 20849 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ip;
              MenhirLib.EngineTypes.startp = _startpos_ip_;
              MenhirLib.EngineTypes.endp = _endpos_ip_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let p : (Squirrelcore.Theory.any_term) = Obj.magic p in
        let _3 : unit = Obj.magic _3 in
        let ip : (Squirrelcore.TacticsArgs.have_ip) = Obj.magic ip in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_p_ in
        let _v =
          let t =
            let l =
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 20901 "src/frontend/parser.ml"
              
            in
            
# 942 "src/frontend/parser.mly"
    ( mk_abstract l "have" [TacticsArgs.Have (Some ip, p)] )
# 20907 "src/frontend/parser.ml"
            
          in
          (
# 1095 "src/frontend/parser.mly"
               ( t )
# 20913 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t1;
          MenhirLib.EngineTypes.startp = _startpos_t1_;
          MenhirLib.EngineTypes.endp = _endpos_t1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ip;
              MenhirLib.EngineTypes.startp = _startpos_ip_;
              MenhirLib.EngineTypes.endp = _endpos_ip_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = p;
                MenhirLib.EngineTypes.startp = _startpos_p_;
                MenhirLib.EngineTypes.endp = _endpos_p_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let t1 : (Squirrelcore.ProverTactics.AST.t) = Obj.magic t1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let ip : (Squirrelcore.TacticsArgs.have_ip option) = Obj.magic ip in
        let p : (Squirrelcore.Theory.term) = Obj.magic p in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t1_ in
        let _v =
          let l =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 20972 "src/frontend/parser.ml"
            
          in
          let t =
            let l =
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 20982 "src/frontend/parser.ml"
              
            in
            
# 939 "src/frontend/parser.mly"
    ( mk_abstract l "have" [TacticsArgs.Have (ip, Theory.Local p)] )
# 20988 "src/frontend/parser.ml"
            
          in
          (
# 1098 "src/frontend/parser.mly"
    ( T.AndThenSel (t, [[1], T.By (t1,l)]) )
# 20994 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t1;
          MenhirLib.EngineTypes.startp = _startpos_t1_;
          MenhirLib.EngineTypes.endp = _endpos_t1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = p;
              MenhirLib.EngineTypes.startp = _startpos_p_;
              MenhirLib.EngineTypes.endp = _endpos_p_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ip;
                  MenhirLib.EngineTypes.startp = _startpos_ip_;
                  MenhirLib.EngineTypes.endp = _endpos_ip_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let t1 : (Squirrelcore.ProverTactics.AST.t) = Obj.magic t1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let p : (Squirrelcore.Theory.any_term) = Obj.magic p in
        let _3 : unit = Obj.magic _3 in
        let ip : (Squirrelcore.TacticsArgs.have_ip) = Obj.magic ip in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t1_ in
        let _v =
          let l =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 21060 "src/frontend/parser.ml"
            
          in
          let t =
            let l =
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 21070 "src/frontend/parser.ml"
              
            in
            
# 942 "src/frontend/parser.mly"
    ( mk_abstract l "have" [TacticsArgs.Have (Some ip, p)] )
# 21076 "src/frontend/parser.ml"
            
          in
          (
# 1098 "src/frontend/parser.mly"
    ( T.AndThenSel (t, [[1], T.By (t1,l)]) )
# 21082 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ip;
          MenhirLib.EngineTypes.startp = _startpos_ip_;
          MenhirLib.EngineTypes.endp = _endpos_ip_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = pt;
            MenhirLib.EngineTypes.startp = _startpos_pt_;
            MenhirLib.EngineTypes.endp = _endpos_pt_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ip : (Squirrelcore.TacticsArgs.have_ip option) = Obj.magic ip in
        let pt : (Squirrelcore.Theory.pt) = Obj.magic pt in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ip_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 21126 "src/frontend/parser.ml"
            
          in
          (
# 1101 "src/frontend/parser.mly"
    ( mk_abstract l "have" [TacticsArgs.HavePt (pt, ip, `IntroImpl)] )
# 21132 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = pt;
          MenhirLib.EngineTypes.startp = _startpos_pt_;
          MenhirLib.EngineTypes.endp = _endpos_pt_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ip;
              MenhirLib.EngineTypes.startp = _startpos_ip_;
              MenhirLib.EngineTypes.endp = _endpos_ip_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let pt : (Squirrelcore.Theory.pt) = Obj.magic pt in
        let _3 : unit = Obj.magic _3 in
        let ip : (Squirrelcore.TacticsArgs.have_ip option) = Obj.magic ip in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_pt_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 21183 "src/frontend/parser.ml"
            
          in
          (
# 1106 "src/frontend/parser.mly"
    ( mk_abstract l "have" [TacticsArgs.HavePt (pt, ip, `None)] )
# 21189 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = arg;
          MenhirLib.EngineTypes.startp = _startpos_arg_;
          MenhirLib.EngineTypes.endp = _endpos_arg_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let arg : (Squirrelcore.TacticsArgs.trans_arg) = Obj.magic arg in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_arg_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 21226 "src/frontend/parser.ml"
            
          in
          (
# 1110 "src/frontend/parser.mly"
    ( mk_abstract l "trans" [TacticsArgs.Trans arg] )
# 21232 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = arg;
          MenhirLib.EngineTypes.startp = _startpos_arg_;
          MenhirLib.EngineTypes.endp = _endpos_arg_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let arg : (Squirrelcore.TacticsArgs.fresh_arg) = Obj.magic arg in
        let a : (Squirrelcore.TacticsArgs.named_args) = Obj.magic a in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_arg_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 21276 "src/frontend/parser.ml"
            
          in
          (
# 1113 "src/frontend/parser.mly"
    ( mk_abstract l "fresh" [TacticsArgs.Fresh (a,arg)] )
# 21282 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = a;
          MenhirLib.EngineTypes.startp = _startpos_a_;
          MenhirLib.EngineTypes.endp = _endpos_a_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let a : (Squirrelcore.TacticsArgs.named_args) = Obj.magic a in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_a_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 21319 "src/frontend/parser.ml"
            
          in
          (
# 1116 "src/frontend/parser.mly"
    ( mk_abstract l "auto" [TacticsArgs.Named_args a] )
# 21325 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = a;
          MenhirLib.EngineTypes.startp = _startpos_a_;
          MenhirLib.EngineTypes.endp = _endpos_a_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let a : (Squirrelcore.TacticsArgs.named_args) = Obj.magic a in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_a_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 21362 "src/frontend/parser.ml"
            
          in
          (
# 1119 "src/frontend/parser.mly"
    ( mk_abstract l "simpl" [TacticsArgs.Named_args a] )
# 21368 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = a;
          MenhirLib.EngineTypes.startp = _startpos_a_;
          MenhirLib.EngineTypes.endp = _endpos_a_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let a : (Squirrelcore.TacticsArgs.named_args) = Obj.magic a in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_a_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 21405 "src/frontend/parser.ml"
            
          in
          (
# 1122 "src/frontend/parser.mly"
    ( mk_abstract l "reduce" [TacticsArgs.Named_args a] )
# 21411 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = w;
          MenhirLib.EngineTypes.startp = _startpos_w_;
          MenhirLib.EngineTypes.endp = _endpos_w_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = p;
            MenhirLib.EngineTypes.startp = _startpos_p_;
            MenhirLib.EngineTypes.endp = _endpos_p_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let w : (Squirrelcore.TacticsArgs.in_target) = Obj.magic w in
        let p : (Squirrelcore.TacticsArgs.rw_arg list) = Obj.magic p in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_w_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 21455 "src/frontend/parser.ml"
            
          in
          (
# 1125 "src/frontend/parser.mly"
    ( mk_abstract l "rewrite" [TacticsArgs.RewriteIn (p, w)] )
# 21461 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let p : (Squirrelcore.TacticsArgs.rw_equiv_item) = Obj.magic p in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_p_ in
        let _v =
          let l =
            let _1 = 
# 914 "src/frontend/parser.mly"
                ( )
# 21503 "src/frontend/parser.ml"
             in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 21511 "src/frontend/parser.ml"
            
          in
          (
# 1128 "src/frontend/parser.mly"
    ( mk_abstract l "rewrite equiv" [TacticsArgs.RewriteEquiv (p)] )
# 21517 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = w;
          MenhirLib.EngineTypes.startp = _startpos_w_;
          MenhirLib.EngineTypes.endp = _endpos_w_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = a;
              MenhirLib.EngineTypes.startp = _startpos_a_;
              MenhirLib.EngineTypes.endp = _endpos_a_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let w : (Squirrelcore.TacticsArgs.apply_in) = Obj.magic w in
        let t : (Squirrelcore.Theory.pt) = Obj.magic t in
        let a : (Squirrelcore.TacticsArgs.named_args) = Obj.magic a in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_w_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 21568 "src/frontend/parser.ml"
            
          in
          (
# 1131 "src/frontend/parser.mly"
    ( mk_abstract l "apply" [TacticsArgs.ApplyIn (a, t, w)] )
# 21574 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = dflt;
          MenhirLib.EngineTypes.startp = _startpos_dflt_;
          MenhirLib.EngineTypes.endp = _endpos_dflt_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ht;
              MenhirLib.EngineTypes.startp = _startpos_ht_;
              MenhirLib.EngineTypes.endp = _endpos_ht_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = x;
                    MenhirLib.EngineTypes.startp = _startpos_x_;
                    MenhirLib.EngineTypes.endp = _endpos_x_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let dflt : (Squirrelcore.Theory.term option) = Obj.magic dflt in
        let _6 : unit = Obj.magic _6 in
        let ht : (Squirrelcore.Theory.term) = Obj.magic ht in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let x : (
# 16 "src/frontend/parser.mly"
       (int)
# 21637 "src/frontend/parser.ml"
        ) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_dflt_ in
        let _v =
          let i =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 21654 "src/frontend/parser.ml"
            
          in
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 21663 "src/frontend/parser.ml"
            
          in
          (
# 1134 "src/frontend/parser.mly"
    ( mk_abstract l "splitseq" [TacticsArgs.SplitSeq (i, ht, dflt)] )
# 21669 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let l : ((Squirrelcore.Theory.term * Squirrelcore.Theory.term) list) = Obj.magic l in
        let _3 : unit = Obj.magic _3 in
        let x : (
# 16 "src/frontend/parser.mly"
       (int)
# 21711 "src/frontend/parser.ml"
        ) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_l_ in
        let _v =
          let terms = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 21721 "src/frontend/parser.ml"
           in
          let i =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 21733 "src/frontend/parser.ml"
            
          in
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 21742 "src/frontend/parser.ml"
            
          in
          (
# 1137 "src/frontend/parser.mly"
    ( mk_abstract l "constseq" [TacticsArgs.ConstSeq (i, terms)] )
# 21748 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x_inlined1;
          MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x_inlined1 : (
# 16 "src/frontend/parser.mly"
       (int)
# 21782 "src/frontend/parser.ml"
        ) = Obj.magic x_inlined1 in
        let x : (
# 16 "src/frontend/parser.mly"
       (int)
# 21787 "src/frontend/parser.ml"
        ) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_inlined1_ in
        let _v =
          let j =
            let (_endpos_x_, _startpos_x_, x) = (_endpos_x_inlined1_, _startpos_x_inlined1_, x_inlined1) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 21805 "src/frontend/parser.ml"
            
          in
          let i =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 21818 "src/frontend/parser.ml"
            
          in
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 21827 "src/frontend/parser.ml"
            
          in
          (
# 1140 "src/frontend/parser.mly"
    ( mk_abstract l "memseq" [TacticsArgs.MemSeq (i, j)] )
# 21833 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i3;
          MenhirLib.EngineTypes.startp = _startpos_i3_;
          MenhirLib.EngineTypes.endp = _endpos_i3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = i2;
              MenhirLib.EngineTypes.startp = _startpos_i2_;
              MenhirLib.EngineTypes.endp = _endpos_i2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = i1;
                  MenhirLib.EngineTypes.startp = _startpos_i1_;
                  MenhirLib.EngineTypes.endp = _endpos_i1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = g;
                      MenhirLib.EngineTypes.startp = _startpos_g_;
                      MenhirLib.EngineTypes.endp = _endpos_g_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let i3 : (Squirrelcore.Theory.lsymb) = Obj.magic i3 in
        let _7 : unit = Obj.magic _7 in
        let i2 : (Squirrelcore.Theory.lsymb) = Obj.magic i2 in
        let _5 : unit = Obj.magic _5 in
        let i1 : (Squirrelcore.Theory.lsymb) = Obj.magic i1 in
        let _3 : unit = Obj.magic _3 in
        let g : (Squirrelcore.Theory.lsymb) = Obj.magic g in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i3_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 21912 "src/frontend/parser.ml"
            
          in
          (
# 1143 "src/frontend/parser.mly"
    ( mk_abstract l "ddh"
         [TacticsArgs.String_name g;
          TacticsArgs.String_name i1;
					TacticsArgs.String_name i2;
					TacticsArgs.String_name i3] )
# 21922 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = g;
          MenhirLib.EngineTypes.startp = _startpos_g_;
          MenhirLib.EngineTypes.endp = _endpos_g_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = i1;
              MenhirLib.EngineTypes.startp = _startpos_i1_;
              MenhirLib.EngineTypes.endp = _endpos_i1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let g : (Squirrelcore.Theory.term) = Obj.magic g in
        let _3 : unit = Obj.magic _3 in
        let i1 : (Squirrelcore.Theory.term) = Obj.magic i1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_g_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 21973 "src/frontend/parser.ml"
            
          in
          (
# 1150 "src/frontend/parser.mly"
    ( mk_abstract l "cdh"
         [TacticsArgs.Theory i1;
          TacticsArgs.Theory g] )
# 21981 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = g;
          MenhirLib.EngineTypes.startp = _startpos_g_;
          MenhirLib.EngineTypes.endp = _endpos_g_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = i1;
              MenhirLib.EngineTypes.startp = _startpos_i1_;
              MenhirLib.EngineTypes.endp = _endpos_i1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let g : (Squirrelcore.Theory.term) = Obj.magic g in
        let _3 : unit = Obj.magic _3 in
        let i1 : (Squirrelcore.Theory.term) = Obj.magic i1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_g_ in
        let _v =
          let l =
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 123 "src/frontend/parser.mly"
    ( L.make _startpos _endpos )
# 22032 "src/frontend/parser.ml"
            
          in
          (
# 1155 "src/frontend/parser.mly"
    ( mk_abstract l "gdh"
         [TacticsArgs.Theory i1;
          TacticsArgs.Theory g] )
# 22040 "src/frontend/parser.ml"
           : (Squirrelcore.ProverTactics.AST.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let f : (Squirrelcore.Theory.term) = Obj.magic f in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_f_ in
        let _v =
          let f = 
# 919 "src/frontend/parser.mly"
                     ( Theory.Local f )
# 22067 "src/frontend/parser.ml"
           in
          (
# 923 "src/frontend/parser.mly"
                            ( f )
# 22072 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.any_term))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = g;
          MenhirLib.EngineTypes.startp = _startpos_g_;
          MenhirLib.EngineTypes.endp = _endpos_g_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let g : (Squirrelcore.Theory.global_formula) = Obj.magic g in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_g_ in
        let _endpos = _endpos_g_ in
        let _v =
          let f = 
# 920 "src/frontend/parser.mly"
                     ( Theory.Global g )
# 22099 "src/frontend/parser.ml"
           in
          (
# 923 "src/frontend/parser.mly"
                            ( f )
# 22104 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.any_term))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let f : (Squirrelcore.Theory.term) = Obj.magic f in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_f_ in
        let _v : (Squirrelcore.Theory.term) = 
# 835 "src/frontend/parser.mly"
                         ( f )
# 22130 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let t : (Squirrelcore.ProverTactics.AST.t) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos__2_ in
        let _v : (Squirrelcore.ProverTactics.AST.t) = 
# 1163 "src/frontend/parser.mly"
                                      ( t )
# 22162 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let f : (Squirrelcore.Theory.term) = Obj.magic f in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_f_ in
        let _v : (Squirrelcore.TacticsArgs.parser_arg) = 
# 709 "src/frontend/parser.mly"
                         ( TacticsArgs.Theory f )
# 22187 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 16 "src/frontend/parser.mly"
       (int)
# 22208 "src/frontend/parser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let i =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 22224 "src/frontend/parser.ml"
            
          in
          (
# 710 "src/frontend/parser.mly"
                         ( TacticsArgs.Int_parsed i )
# 22230 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.parser_arg))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.TacticsArgs.parser_arg list) = 
# 713 "src/frontend/parser.mly"
                                        ( [] )
# 22249 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let t : (Squirrelcore.TacticsArgs.parser_arg) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t_ in
        let _v : (Squirrelcore.TacticsArgs.parser_arg list) = 
# 714 "src/frontend/parser.mly"
                                        ( [t] )
# 22274 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ts;
          MenhirLib.EngineTypes.startp = _startpos_ts_;
          MenhirLib.EngineTypes.endp = _endpos_ts_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ts : (Squirrelcore.TacticsArgs.parser_arg list) = Obj.magic ts in
        let _2 : unit = Obj.magic _2 in
        let t : (Squirrelcore.TacticsArgs.parser_arg) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_ts_ in
        let _v : (Squirrelcore.TacticsArgs.parser_arg list) = 
# 715 "src/frontend/parser.mly"
                                        ( t::ts )
# 22313 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.term_i) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let t =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 22346 "src/frontend/parser.ml"
            
          in
          (
# 251 "src/frontend/parser.mly"
                ( t )
# 22352 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let f : (Squirrelcore.Theory.term_i) = Obj.magic f in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_f_ in
        let _v : (Squirrelcore.Theory.term_i) = 
# 209 "src/frontend/parser.mly"
                                    ( f )
# 22378 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ts;
          MenhirLib.EngineTypes.startp = _startpos_ts_;
          MenhirLib.EngineTypes.endp = _endpos_ts_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ts : (Squirrelcore.Theory.term) = Obj.magic ts in
        let _2 : unit = Obj.magic _2 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_ts_ in
        let _v : (Squirrelcore.Theory.term_i) = 
# 211 "src/frontend/parser.mly"
                                    ( Theory.AppAt (t, ts) )
# 22417 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let l : (Squirrelcore.Theory.term list) = Obj.magic l in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_l_ in
        let _v =
          let l = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 22450 "src/frontend/parser.ml"
           in
          (
# 212 "src/frontend/parser.mly"
                                    ( Theory.App (t,l) )
# 22455 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = t0;
            MenhirLib.EngineTypes.startp = _startpos_t0_;
            MenhirLib.EngineTypes.endp = _endpos_t0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let _3 : unit = Obj.magic _3 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _endpos = _endpos__5_ in
          let _startpos = _startpos__1_ in
          (
# 215 "src/frontend/parser.mly"
   ( let fsymb = sloc _startpos _endpos "pair" in
     Theory.mk_app_i (Theory.mk_symb fsymb) [t;t0] )
# 22513 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let s =
            let x =
              let s = 
# 161 "src/frontend/parser.mly"
                   ( "=" , `Left )
# 22556 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 22561 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 22574 "src/frontend/parser.ml"
            
          in
          (
# 219 "src/frontend/parser.mly"
   ( Theory.mk_app_i (Theory.mk_symb s) [t;t0] )
# 22580 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let s =
            let x =
              let s = 
# 162 "src/frontend/parser.mly"
                   ( "<>", `Left )
# 22623 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 22628 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 22641 "src/frontend/parser.ml"
            
          in
          (
# 219 "src/frontend/parser.mly"
   ( Theory.mk_app_i (Theory.mk_symb s) [t;t0] )
# 22647 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let s =
            let x =
              let s = 
# 163 "src/frontend/parser.mly"
                   ( "<=", `Left )
# 22690 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 22695 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 22708 "src/frontend/parser.ml"
            
          in
          (
# 219 "src/frontend/parser.mly"
   ( Theory.mk_app_i (Theory.mk_symb s) [t;t0] )
# 22714 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let s =
            let x =
              let s = 
# 164 "src/frontend/parser.mly"
                   ( "<" , `Left )
# 22757 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 22762 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 22775 "src/frontend/parser.ml"
            
          in
          (
# 219 "src/frontend/parser.mly"
   ( Theory.mk_app_i (Theory.mk_symb s) [t;t0] )
# 22781 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let s =
            let x =
              let s = 
# 165 "src/frontend/parser.mly"
                   ( ">=", `Left )
# 22824 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 22829 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 22842 "src/frontend/parser.ml"
            
          in
          (
# 219 "src/frontend/parser.mly"
   ( Theory.mk_app_i (Theory.mk_symb s) [t;t0] )
# 22848 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let s =
            let x =
              let s = 
# 166 "src/frontend/parser.mly"
                   ( ">" , `Left )
# 22891 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 22896 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 22909 "src/frontend/parser.ml"
            
          in
          (
# 219 "src/frontend/parser.mly"
   ( Theory.mk_app_i (Theory.mk_symb s) [t;t0] )
# 22915 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let s =
            let x =
              let s = 
# 167 "src/frontend/parser.mly"
                   ( "&&", `Left )
# 22958 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 22963 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 22976 "src/frontend/parser.ml"
            
          in
          (
# 219 "src/frontend/parser.mly"
   ( Theory.mk_app_i (Theory.mk_symb s) [t;t0] )
# 22982 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let s =
            let x =
              let s = 
# 168 "src/frontend/parser.mly"
                   ( "||", `Left )
# 23025 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 23030 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 23043 "src/frontend/parser.ml"
            
          in
          (
# 219 "src/frontend/parser.mly"
   ( Theory.mk_app_i (Theory.mk_symb s) [t;t0] )
# 23049 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let s : (
# 19 "src/frontend/parser.mly"
       (string)
# 23084 "src/frontend/parser.ml"
        ) = Obj.magic s in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let s =
            let x =
              let s = 
# 169 "src/frontend/parser.mly"
                   ( s, `Left )
# 23096 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 23101 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos_s_, _startpos_s_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 23114 "src/frontend/parser.ml"
            
          in
          (
# 219 "src/frontend/parser.mly"
   ( Theory.mk_app_i (Theory.mk_symb s) [t;t0] )
# 23120 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let s : (
# 20 "src/frontend/parser.mly"
       (string)
# 23155 "src/frontend/parser.ml"
        ) = Obj.magic s in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let s =
            let x =
              let s = 
# 170 "src/frontend/parser.mly"
                   ( s, `Right )
# 23167 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 23172 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos_s_, _startpos_s_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 23185 "src/frontend/parser.ml"
            
          in
          (
# 219 "src/frontend/parser.mly"
   ( Theory.mk_app_i (Theory.mk_symb s) [t;t0] )
# 23191 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let s =
            let x =
              let s = 
# 171 "src/frontend/parser.mly"
                   ( "xor", `Left )
# 23234 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 23239 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 23252 "src/frontend/parser.ml"
            
          in
          (
# 219 "src/frontend/parser.mly"
   ( Theory.mk_app_i (Theory.mk_symb s) [t;t0] )
# 23258 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let s =
            let x =
              let s = 
# 172 "src/frontend/parser.mly"
                   ( "=>" , `Left )
# 23301 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 23306 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 23319 "src/frontend/parser.ml"
            
          in
          (
# 219 "src/frontend/parser.mly"
   ( Theory.mk_app_i (Theory.mk_symb s) [t;t0] )
# 23325 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t0;
          MenhirLib.EngineTypes.startp = _startpos_t0_;
          MenhirLib.EngineTypes.endp = _endpos_t0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t0 : (Squirrelcore.Theory.term) = Obj.magic t0 in
        let _1 : unit = Obj.magic _1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t0_ in
        let _v =
          let s =
            let x =
              let s = 
# 173 "src/frontend/parser.mly"
                   ( "<=>", `Left )
# 23368 "src/frontend/parser.ml"
               in
              
# 176 "src/frontend/parser.mly"
            ( fst s )
# 23373 "src/frontend/parser.ml"
              
            in
            let (_endpos_x_, _startpos_x_) = (_endpos__1_, _startpos__1_) in
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 23386 "src/frontend/parser.ml"
            
          in
          (
# 219 "src/frontend/parser.mly"
   ( Theory.mk_app_i (Theory.mk_symb s) [t;t0] )
# 23392 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (
# 16 "src/frontend/parser.mly"
       (int)
# 23426 "src/frontend/parser.ml"
        ) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_x_ in
        let _v =
          let i =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 23444 "src/frontend/parser.ml"
            
          in
          (
# 222 "src/frontend/parser.mly"
    ( Theory.Proj (i,t) )
# 23450 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = b;
              MenhirLib.EngineTypes.startp = _startpos_b_;
              MenhirLib.EngineTypes.endp = _endpos_b_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _3 : unit = Obj.magic _3 in
        let b : (Squirrelcore.Theory.term) = Obj.magic b in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v =
          let t0 =
            let _endpos__0_ = _endpos_t_ in
            let _endpos = _endpos__0_ in
            let _startpos = _endpos__0_ in
            
# 242 "src/frontend/parser.mly"
                     ( let loc = L.make _startpos _endpos in
                       let fsymb = L.mk_loc loc "zero" in
                       L.mk_loc loc (Theory.Symb fsymb) )
# 23504 "src/frontend/parser.ml"
            
          in
          let _endpos_t0_ = _endpos_t_ in
          let _endpos = _endpos_t0_ in
          let _startpos = _startpos__1_ in
          (
# 225 "src/frontend/parser.mly"
    ( let fsymb = sloc _startpos _endpos "if" in
      Theory.mk_app_i (Theory.mk_symb fsymb) [b;t;t0] )
# 23514 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t_inlined1;
          MenhirLib.EngineTypes.startp = _startpos_t_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos_t_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = b;
                  MenhirLib.EngineTypes.startp = _startpos_b_;
                  MenhirLib.EngineTypes.endp = _endpos_b_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let t_inlined1 : (Squirrelcore.Theory.term) = Obj.magic t_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _3 : unit = Obj.magic _3 in
        let b : (Squirrelcore.Theory.term) = Obj.magic b in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_inlined1_ in
        let _v =
          let t0 =
            let t = t_inlined1 in
            
# 245 "src/frontend/parser.mly"
                    ( t )
# 23578 "src/frontend/parser.ml"
            
          in
          let _endpos_t0_ = _endpos_t_inlined1_ in
          let _endpos = _endpos_t0_ in
          let _startpos = _startpos__1_ in
          (
# 225 "src/frontend/parser.mly"
    ( let fsymb = sloc _startpos _endpos "if" in
      Theory.mk_app_i (Theory.mk_symb fsymb) [b;t;t0] )
# 23588 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = b;
              MenhirLib.EngineTypes.startp = _startpos_b_;
              MenhirLib.EngineTypes.endp = _endpos_b_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = vs;
                  MenhirLib.EngineTypes.startp = _startpos_vs_;
                  MenhirLib.EngineTypes.endp = _endpos_vs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _5 : unit = Obj.magic _5 in
        let b : (Squirrelcore.Theory.term) = Obj.magic b in
        let _3 : unit = Obj.magic _3 in
        let vs : (Squirrelcore.Theory.bnds) = Obj.magic vs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v =
          let t0 =
            let _endpos__0_ = _endpos_t_ in
            let _endpos = _endpos__0_ in
            let _startpos = _endpos__0_ in
            
# 242 "src/frontend/parser.mly"
                     ( let loc = L.make _startpos _endpos in
                       let fsymb = L.mk_loc loc "zero" in
                       L.mk_loc loc (Theory.Symb fsymb) )
# 23656 "src/frontend/parser.ml"
            
          in
          (
# 229 "src/frontend/parser.mly"
                                 ( Theory.Find (vs,b,t,t0) )
# 23662 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t_inlined1;
          MenhirLib.EngineTypes.startp = _startpos_t_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos_t_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = b;
                  MenhirLib.EngineTypes.startp = _startpos_b_;
                  MenhirLib.EngineTypes.endp = _endpos_b_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = vs;
                      MenhirLib.EngineTypes.startp = _startpos_vs_;
                      MenhirLib.EngineTypes.endp = _endpos_vs_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let t_inlined1 : (Squirrelcore.Theory.term) = Obj.magic t_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _5 : unit = Obj.magic _5 in
        let b : (Squirrelcore.Theory.term) = Obj.magic b in
        let _3 : unit = Obj.magic _3 in
        let vs : (Squirrelcore.Theory.bnds) = Obj.magic vs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_inlined1_ in
        let _v =
          let t0 =
            let t = t_inlined1 in
            
# 245 "src/frontend/parser.mly"
                    ( t )
# 23740 "src/frontend/parser.ml"
            
          in
          (
# 229 "src/frontend/parser.mly"
                                 ( Theory.Find (vs,b,t,t0) )
# 23746 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = vs;
              MenhirLib.EngineTypes.startp = _startpos_vs_;
              MenhirLib.EngineTypes.endp = _endpos_vs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let f : (Squirrelcore.Theory.term) = Obj.magic f in
        let _3 : unit = Obj.magic _3 in
        let vs : (Squirrelcore.Theory.ext_bnds) = Obj.magic vs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_f_ in
        let _v : (Squirrelcore.Theory.term_i) = 
# 232 "src/frontend/parser.mly"
                                 ( Theory.Quant (Lambda,vs,f)  )
# 23793 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = vs;
              MenhirLib.EngineTypes.startp = _startpos_vs_;
              MenhirLib.EngineTypes.endp = _endpos_vs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let f : (Squirrelcore.Theory.term) = Obj.magic f in
        let _3 : unit = Obj.magic _3 in
        let vs : (Squirrelcore.Theory.ext_bnds) = Obj.magic vs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_f_ in
        let _v =
          let q = 
# 204 "src/frontend/parser.mly"
         ( Term.Exists )
# 23840 "src/frontend/parser.ml"
           in
          (
# 235 "src/frontend/parser.mly"
                                 ( Theory.Quant (q,vs,f)  )
# 23845 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = vs;
              MenhirLib.EngineTypes.startp = _startpos_vs_;
              MenhirLib.EngineTypes.endp = _endpos_vs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let f : (Squirrelcore.Theory.term) = Obj.magic f in
        let _3 : unit = Obj.magic _3 in
        let vs : (Squirrelcore.Theory.ext_bnds) = Obj.magic vs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_f_ in
        let _v =
          let q = 
# 205 "src/frontend/parser.mly"
         ( Term.ForAll )
# 23893 "src/frontend/parser.ml"
           in
          (
# 235 "src/frontend/parser.mly"
                                 ( Theory.Quant (q,vs,f)  )
# 23898 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t2;
          MenhirLib.EngineTypes.startp = _startpos_t2_;
          MenhirLib.EngineTypes.endp = _endpos_t2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t1;
              MenhirLib.EngineTypes.startp = _startpos_t1_;
              MenhirLib.EngineTypes.endp = _endpos_t1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ty;
                  MenhirLib.EngineTypes.startp = _startpos_ty_;
                  MenhirLib.EngineTypes.endp = _endpos_ty_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = v;
                    MenhirLib.EngineTypes.startp = _startpos_v_;
                    MenhirLib.EngineTypes.endp = _endpos_v_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let t2 : (Squirrelcore.Theory.term) = Obj.magic t2 in
        let _6 : unit = Obj.magic _6 in
        let t1 : (Squirrelcore.Theory.term) = Obj.magic t1 in
        let _4 : unit = Obj.magic _4 in
        let ty : (Squirrelcore.Theory.p_ty option) = Obj.magic ty in
        let v : (Squirrelcore.Theory.lsymb) = Obj.magic v in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t2_ in
        let _v : (Squirrelcore.Theory.term_i) = 
# 238 "src/frontend/parser.mly"
    ( Theory.Let (v,t1,ty,t2) )
# 23966 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.term list) = 
# 255 "src/frontend/parser.mly"
                             ( [] )
# 23984 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : (Squirrelcore.Theory.term list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let t =
            let x =
              let l = 
# 241 "<standard.mly>"
    ( xs )
# 24026 "src/frontend/parser.ml"
               in
              
# 132 "src/frontend/parser.mly"
                         ( l )
# 24031 "src/frontend/parser.ml"
              
            in
            
# 139 "src/frontend/parser.mly"
                    ( x )
# 24037 "src/frontend/parser.ml"
            
          in
          (
# 256 "src/frontend/parser.mly"
                             ( t )
# 24043 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.term list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = f;
            MenhirLib.EngineTypes.startp = _startpos_f_;
            MenhirLib.EngineTypes.endp = _endpos_f_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let f : (Squirrelcore.Theory.term) = Obj.magic f in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos__2_ in
        let _v : (Squirrelcore.Theory.term) = 
# 348 "src/frontend/parser.mly"
                                ( f )
# 24076 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = f;
            MenhirLib.EngineTypes.startp = _startpos_f_;
            MenhirLib.EngineTypes.endp = _endpos_f_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let f : (Squirrelcore.Theory.global_formula) = Obj.magic f in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos__2_ in
        let _v : (Squirrelcore.Theory.global_formula) = 
# 1216 "src/frontend/parser.mly"
                       ( f )
# 24108 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = p;
            MenhirLib.EngineTypes.startp = _startpos_p_;
            MenhirLib.EngineTypes.endp = _endpos_p_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let p : (Squirrelcore.Process.Parse.t) = Obj.magic p in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos__2_ in
        let _v : (Squirrelcore.Process.Parse.t) = 
# 354 "src/frontend/parser.mly"
                                   ( p )
# 24140 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = q;
          MenhirLib.EngineTypes.startp = _startpos_q_;
          MenhirLib.EngineTypes.endp = _endpos_q_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let q : (Squirrelcore.ProverLib.input) = Obj.magic q in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_q_ in
        let _endpos = _endpos_q_ in
        let _v : (Squirrelcore.ProverLib.input) = 
# 1369 "src/frontend/parser.mly"
                     ( q )
# 24165 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let t : (Squirrelcore.ProverLib.bulleted_tactics) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t_ in
        let _v : (Squirrelcore.ProverLib.input) = 
# 1370 "src/frontend/parser.mly"
                     ( ProverLib.(Tactic t) )
# 24190 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.ProverLib.input) = 
# 1371 "src/frontend/parser.mly"
                     ( ProverLib.Abort )
# 24215 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.ProverLib.input) = 
# 1372 "src/frontend/parser.mly"
                     ( ProverLib.Qed )
# 24240 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.ProverLib.input) = 
# 1373 "src/frontend/parser.mly"
                     ( ProverLib.Reset )
# 24265 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Squirrelcore.ProverLib.input) = 
# 1374 "src/frontend/parser.mly"
                     ( ProverLib.EOF )
# 24290 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = u;
          MenhirLib.EngineTypes.startp = _startpos_u_;
          MenhirLib.EngineTypes.endp = _endpos_u_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let u : (int) = Obj.magic u in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_u_ in
        let _endpos = _endpos_u_ in
        let _v : (Squirrelcore.ProverLib.input_or_undo) = 
# 1365 "src/frontend/parser.mly"
                         ( ProverLib.Undo u )
# 24315 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (Squirrelcore.ProverLib.input) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (Squirrelcore.ProverLib.input_or_undo) = 
# 1366 "src/frontend/parser.mly"
                         ( ProverLib.Input i )
# 24340 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = annot;
          MenhirLib.EngineTypes.startp = _startpos_annot_;
          MenhirLib.EngineTypes.endp = _endpos_annot_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let annot : (SE.Parse.sys_cnt L.located) = Obj.magic annot in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_annot_ in
        let _endpos = _endpos_annot_ in
        let _v : (Squirrelcore.TacticsArgs.trans_arg) = 
# 898 "src/frontend/parser.mly"
                     ( TacticsArgs.TransSystem (`Global, annot) )
# 24365 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let l : ((int L.located * Squirrelcore.Theory.term) list) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_l_ in
        let _v =
          let l = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 24391 "src/frontend/parser.ml"
           in
          (
# 899 "src/frontend/parser.mly"
                                  ( TacticsArgs.TransTerms l )
# 24396 "src/frontend/parser.ml"
           : (Squirrelcore.TacticsArgs.trans_arg))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t : (Squirrelcore.Theory.term) = Obj.magic t in
        let _2 : unit = Obj.magic _2 in
        let x : (int) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_t_ in
        let _v =
          let i =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 24444 "src/frontend/parser.ml"
            
          in
          (
# 895 "src/frontend/parser.mly"
                                         ( i,t )
# 24450 "src/frontend/parser.ml"
           : (int L.located * Squirrelcore.Theory.term))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Squirrelcore.Theory.p_ty_i) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let ty =
            let _endpos = _endpos_x_ in
            let _startpos = _startpos_x_ in
            
# 116 "src/frontend/parser.mly"
      (
    { L.pl_desc = x;
      L.pl_loc  = L.make _startpos _endpos;
    }
  )
# 24484 "src/frontend/parser.ml"
            
          in
          (
# 454 "src/frontend/parser.mly"
               ( ty )
# 24490 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.p_ty))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.lsymb list) = 
# 480 "src/frontend/parser.mly"
                                             ( [] )
# 24509 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let l : (Squirrelcore.Theory.lsymb list) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let ids = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 24549 "src/frontend/parser.ml"
           in
          (
# 481 "src/frontend/parser.mly"
                                             ( ids )
# 24554 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.lsymb list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Squirrelcore.Theory.p_ty_i) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Squirrelcore.Theory.p_ty_i) = 
# 435 "src/frontend/parser.mly"
                                    ( ty )
# 24580 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t2;
          MenhirLib.EngineTypes.startp = _startpos_t2_;
          MenhirLib.EngineTypes.endp = _endpos_t2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t1;
              MenhirLib.EngineTypes.startp = _startpos_t1_;
              MenhirLib.EngineTypes.endp = _endpos_t1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t2 : (Squirrelcore.Theory.p_ty) = Obj.magic t2 in
        let _2 : unit = Obj.magic _2 in
        let t1 : (Squirrelcore.Theory.p_ty) = Obj.magic t1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t1_ in
        let _endpos = _endpos_t2_ in
        let _v : (Squirrelcore.Theory.p_ty_i) = 
# 436 "src/frontend/parser.mly"
                                    ( Theory.P_fun (t1, t2) )
# 24619 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t1;
              MenhirLib.EngineTypes.startp = _startpos_t1_;
              MenhirLib.EngineTypes.endp = _endpos_t1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let l : (Squirrelcore.Theory.p_ty list) = Obj.magic l in
        let _2 : unit = Obj.magic _2 in
        let t1 : (Squirrelcore.Theory.p_ty) = Obj.magic t1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t1_ in
        let _endpos = _endpos_l_ in
        let _v =
          let tys = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 24659 "src/frontend/parser.ml"
           in
          (
# 437 "src/frontend/parser.mly"
                                    ( Theory.P_tuple (t1 :: tys) )
# 24664 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.p_ty_i))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tags;
          MenhirLib.EngineTypes.startp = _startpos_tags_;
          MenhirLib.EngineTypes.endp = _endpos_tags_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = k;
            MenhirLib.EngineTypes.startp = _startpos_k_;
            MenhirLib.EngineTypes.endp = _endpos_k_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let tags : (Squirrelcore.Theory.var_tags) = Obj.magic tags in
        let k : (Squirrelcore.Theory.p_ty) = Obj.magic k in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_k_ in
        let _endpos = _endpos_tags_ in
        let _v : (Squirrelcore.Theory.p_ty * Squirrelcore.Theory.var_tags) = 
# 314 "src/frontend/parser.mly"
                     (k,tags)
# 24697 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = id;
          MenhirLib.EngineTypes.startp = _startpos_id_;
          MenhirLib.EngineTypes.endp = _endpos_id_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let id : (Squirrelcore.Theory.lsymb) = Obj.magic id in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_id_ in
        let _v : (Squirrelcore.Theory.lsymb) = 
# 423 "src/frontend/parser.mly"
                    ( id )
# 24729 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let i : (
# 16 "src/frontend/parser.mly"
       (int)
# 24763 "src/frontend/parser.ml"
        ) = Obj.magic i in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (int) = 
# 1160 "src/frontend/parser.mly"
                                      ( i )
# 24772 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Squirrelcore.Theory.var_tags) = 
# 309 "src/frontend/parser.mly"
                                              ( []   )
# 24790 "src/frontend/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let l : (Squirrelcore.Theory.var_tags) = Obj.magic l in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let tags = 
# 135 "src/frontend/parser.mly"
                                  ( l )
# 24830 "src/frontend/parser.ml"
           in
          (
# 310 "src/frontend/parser.mly"
                                              ( tags )
# 24835 "src/frontend/parser.ml"
           : (Squirrelcore.Theory.var_tags))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
    |]
  
  and trace =
    None
  
end

module MenhirInterpreter = struct
  
  module ET = MenhirLib.TableInterpreter.MakeEngineTable (Tables)
  
  module TI = MenhirLib.Engine.Make (ET)
  
  include TI
  
end

let top_proofmode_or_undo =
  fun lexer lexbuf : (Squirrelcore.ProverLib.input_or_undo) ->
    Obj.magic (MenhirInterpreter.entry `Legacy 1170 lexer lexbuf)

and top_proofmode =
  fun lexer lexbuf : (Squirrelcore.ProverLib.input) ->
    Obj.magic (MenhirInterpreter.entry `Legacy 1147 lexer lexbuf)

and top_process =
  fun lexer lexbuf : (Squirrelcore.Process.Parse.t) ->
    Obj.magic (MenhirInterpreter.entry `Legacy 1143 lexer lexbuf)

and top_global_formula =
  fun lexer lexbuf : (Squirrelcore.Theory.global_formula) ->
    Obj.magic (MenhirInterpreter.entry `Legacy 1139 lexer lexbuf)

and top_formula =
  fun lexer lexbuf : (Squirrelcore.Theory.term) ->
    Obj.magic (MenhirInterpreter.entry `Legacy 1135 lexer lexbuf)

and system_expr =
  fun lexer lexbuf : (Squirrelcore.SystemExpr.Parse.t) ->
    Obj.magic (MenhirInterpreter.entry `Legacy 1130 lexer lexbuf)

and interactive_or_undo =
  fun lexer lexbuf : (Squirrelcore.ProverLib.input_or_undo) ->
    Obj.magic (MenhirInterpreter.entry `Legacy 1123 lexer lexbuf)

and interactive =
  fun lexer lexbuf : (Squirrelcore.ProverLib.input) ->
    Obj.magic (MenhirInterpreter.entry `Legacy 1038 lexer lexbuf)

and declarations =
  fun lexer lexbuf : (Squirrelcore.Decl.declarations) ->
    Obj.magic (MenhirInterpreter.entry `Legacy 0 lexer lexbuf)

module Incremental = struct
  
  let top_proofmode_or_undo =
    fun initial_position : (Squirrelcore.ProverLib.input_or_undo) MenhirInterpreter.checkpoint ->
      Obj.magic (MenhirInterpreter.start 1170 initial_position)
  
  and top_proofmode =
    fun initial_position : (Squirrelcore.ProverLib.input) MenhirInterpreter.checkpoint ->
      Obj.magic (MenhirInterpreter.start 1147 initial_position)
  
  and top_process =
    fun initial_position : (Squirrelcore.Process.Parse.t) MenhirInterpreter.checkpoint ->
      Obj.magic (MenhirInterpreter.start 1143 initial_position)
  
  and top_global_formula =
    fun initial_position : (Squirrelcore.Theory.global_formula) MenhirInterpreter.checkpoint ->
      Obj.magic (MenhirInterpreter.start 1139 initial_position)
  
  and top_formula =
    fun initial_position : (Squirrelcore.Theory.term) MenhirInterpreter.checkpoint ->
      Obj.magic (MenhirInterpreter.start 1135 initial_position)
  
  and system_expr =
    fun initial_position : (Squirrelcore.SystemExpr.Parse.t) MenhirInterpreter.checkpoint ->
      Obj.magic (MenhirInterpreter.start 1130 initial_position)
  
  and interactive_or_undo =
    fun initial_position : (Squirrelcore.ProverLib.input_or_undo) MenhirInterpreter.checkpoint ->
      Obj.magic (MenhirInterpreter.start 1123 initial_position)
  
  and interactive =
    fun initial_position : (Squirrelcore.ProverLib.input) MenhirInterpreter.checkpoint ->
      Obj.magic (MenhirInterpreter.start 1038 initial_position)
  
  and declarations =
    fun initial_position : (Squirrelcore.Decl.declarations) MenhirInterpreter.checkpoint ->
      Obj.magic (MenhirInterpreter.start 0 initial_position)
  
end
